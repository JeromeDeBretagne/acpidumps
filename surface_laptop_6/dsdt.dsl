/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20230628 (64-bit version)
 * Copyright (c) 2000 - 2023 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of dsdt.dat
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x0002E0E3 (188643)
 *     Revision         0x02
 *     Checksum         0x7F
 *     OEM ID           "INTEL"
 *     OEM Table ID     "MTL     "
 *     OEM Revision     0x00000000 (0)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20210105 (539033861)
 */
DefinitionBlock ("", "DSDT", 2, "INTEL", "MTL     ", 0x00000000)
{
    /*
     * iASL Warning: There were 155 external control methods found during
     * disassembly, but only 411 were resolved (4294967040 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.AL6B, MethodObj)    // 0 Arguments
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.PL6B, MethodObj)    // 0 Arguments
    External (_GPE.SL61, MethodObj)    // 0 Arguments
    External (_GPE.SL69, MethodObj)    // 0 Arguments
    External (_GPE.SL6F, MethodObj)    // 0 Arguments
    External (_GPE.SL71, MethodObj)    // 0 Arguments
    External (_GPE.SLA0, MethodObj)    // 0 Arguments
    External (_GPE.SLA1, MethodObj)    // 0 Arguments
    External (_GPE.SLA2, MethodObj)    // 0 Arguments
    External (_GPE.SLA7, MethodObj)    // 0 Arguments
    External (_GPE.SLC0, MethodObj)    // 0 Arguments
    External (_GPE.SLC1, MethodObj)    // 0 Arguments
    External (_GPE.SLC2, MethodObj)    // 0 Arguments
    External (_GPE.SLC7, MethodObj)    // 0 Arguments
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.BTRK, MethodObj)    // 1 Arguments
    External (_SB_.CPPC, IntObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.DTSF, UnknownObj)
    External (_SB_.GBTR, MethodObj)    // 0 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.CNVW.BOFC, UnknownObj)
    External (_SB_.PC00.CNVW.CIRM, UnknownObj)
    External (_SB_.PC00.CNVW.CRFI, UnknownObj)
    External (_SB_.PC00.CNVW.DPRS, UnknownObj)
    External (_SB_.PC00.CNVW.FLRC, UnknownObj)
    External (_SB_.PC00.CNVW.PRRS, UnknownObj)
    External (_SB_.PC00.CNVW.RSTT, UnknownObj)
    External (_SB_.PC00.CNVW.RSTY, UnknownObj)
    External (_SB_.PC00.DPOF, UnknownObj)
    External (_SB_.PC00.GBES, UnknownObj)
    External (_SB_.PC00.GFX0.CDCK, UnknownObj)
    External (_SB_.PC00.GFX0.CLID, UnknownObj)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)
    External (_SB_.PC00.GFX0.DD2F, DeviceObj)
    External (_SB_.PC00.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HDAS.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.IMNG, MethodObj)    // 1 Arguments
    External (_SB_.PC00.ITSP, UnknownObj)
    External (_SB_.PC00.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.LID0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.LSTE, UnknownObj)
    External (_SB_.PC00.M32B, UnknownObj)
    External (_SB_.PC00.M32L, UnknownObj)
    External (_SB_.PC00.M64B, UnknownObj)
    External (_SB_.PC00.M64L, UnknownObj)
    External (_SB_.PC00.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PC2M, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PDRC.DPTR, UnknownObj)
    External (_SB_.PC00.PDRC.EPTR, UnknownObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PBNU, IntObj)
    External (_SB_.PC00.RP01.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PRMV, IntObj)
    External (_SB_.PC00.RP01.PRTP, IntObj)
    External (_SB_.PC00.RP01.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.RD3C, IntObj)
    External (_SB_.PC00.RP01.SLOT, IntObj)
    External (_SB_.PC00.RP01.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PBNU, IntObj)
    External (_SB_.PC00.RP02.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP02.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PRMV, IntObj)
    External (_SB_.PC00.RP02.PRTP, IntObj)
    External (_SB_.PC00.RP02.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.RD3C, IntObj)
    External (_SB_.PC00.RP02.SLOT, IntObj)
    External (_SB_.PC00.RP02.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PBNU, IntObj)
    External (_SB_.PC00.RP03.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP03.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PRMV, IntObj)
    External (_SB_.PC00.RP03.PRTP, IntObj)
    External (_SB_.PC00.RP03.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.RD3C, IntObj)
    External (_SB_.PC00.RP03.SLOT, IntObj)
    External (_SB_.PC00.RP03.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PBNU, IntObj)
    External (_SB_.PC00.RP04.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP04.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PRMV, IntObj)
    External (_SB_.PC00.RP04.PRTP, IntObj)
    External (_SB_.PC00.RP04.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.RD3C, IntObj)
    External (_SB_.PC00.RP04.SLOT, IntObj)
    External (_SB_.PC00.RP04.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PBNU, IntObj)
    External (_SB_.PC00.RP05.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP05.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PRMV, IntObj)
    External (_SB_.PC00.RP05.PRTP, IntObj)
    External (_SB_.PC00.RP05.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.RD3C, IntObj)
    External (_SB_.PC00.RP05.SLOT, IntObj)
    External (_SB_.PC00.RP05.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PBNU, IntObj)
    External (_SB_.PC00.RP06.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PRMV, IntObj)
    External (_SB_.PC00.RP06.PRTP, IntObj)
    External (_SB_.PC00.RP06.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.RD3C, IntObj)
    External (_SB_.PC00.RP06.SLOT, IntObj)
    External (_SB_.PC00.RP06.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PBNU, IntObj)
    External (_SB_.PC00.RP07.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP07.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PRMV, IntObj)
    External (_SB_.PC00.RP07.PRTP, IntObj)
    External (_SB_.PC00.RP07.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.RD3C, IntObj)
    External (_SB_.PC00.RP07.SLOT, IntObj)
    External (_SB_.PC00.RP07.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PBNU, IntObj)
    External (_SB_.PC00.RP08.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP08.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PRMV, IntObj)
    External (_SB_.PC00.RP08.PRTP, IntObj)
    External (_SB_.PC00.RP08.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.RD3C, IntObj)
    External (_SB_.PC00.RP08.SLOT, IntObj)
    External (_SB_.PC00.RP08.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PBNU, IntObj)
    External (_SB_.PC00.RP09.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PRMV, IntObj)
    External (_SB_.PC00.RP09.PRTP, IntObj)
    External (_SB_.PC00.RP09.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.RD3C, IntObj)
    External (_SB_.PC00.RP09.SLOT, IntObj)
    External (_SB_.PC00.RP09.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PBNU, IntObj)
    External (_SB_.PC00.RP10.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PRMV, IntObj)
    External (_SB_.PC00.RP10.PRTP, IntObj)
    External (_SB_.PC00.RP10.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.RD3C, IntObj)
    External (_SB_.PC00.RP10.SLOT, IntObj)
    External (_SB_.PC00.RP10.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PBNU, IntObj)
    External (_SB_.PC00.RP11.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PRMV, IntObj)
    External (_SB_.PC00.RP11.PRTP, IntObj)
    External (_SB_.PC00.RP11.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.RD3C, IntObj)
    External (_SB_.PC00.RP11.SLOT, IntObj)
    External (_SB_.PC00.RP11.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.CLID, UnknownObj)
    External (_SB_.PC00.RP12.DD10, UnknownObj)
    External (_SB_.PC00.RP12.DD11, UnknownObj)
    External (_SB_.PC00.RP12.DD12, UnknownObj)
    External (_SB_.PC00.RP12.DD13, UnknownObj)
    External (_SB_.PC00.RP12.DD14, UnknownObj)
    External (_SB_.PC00.RP12.DD15, UnknownObj)
    External (_SB_.PC00.RP12.DDL2, UnknownObj)
    External (_SB_.PC00.RP12.DDL3, UnknownObj)
    External (_SB_.PC00.RP12.DDL4, UnknownObj)
    External (_SB_.PC00.RP12.DDL5, UnknownObj)
    External (_SB_.PC00.RP12.DDL6, UnknownObj)
    External (_SB_.PC00.RP12.DDL7, UnknownObj)
    External (_SB_.PC00.RP12.DDL8, UnknownObj)
    External (_SB_.PC00.RP12.DDL9, UnknownObj)
    External (_SB_.PC00.RP12.DIDL, UnknownObj)
    External (_SB_.PC00.RP12.PBNU, IntObj)
    External (_SB_.PC00.RP12.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PRMV, IntObj)
    External (_SB_.PC00.RP12.PRTP, IntObj)
    External (_SB_.PC00.RP12.PXSX.ASLC, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.BCLP, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DBRL, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD1, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD2, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD3, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD4, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD5, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD6, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD7, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD8, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD9, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDA, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDB, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDC, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDD, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDE, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDF, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDS, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DNID, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.EDMX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PEGB.PEGE.DEDP, DeviceObj)
    External (_SB_.PC00.RP12.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.RD3C, IntObj)
    External (_SB_.PC00.RP12.SLOT, IntObj)
    External (_SB_.PC00.RP12.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.PRMV, IntObj)
    External (_SB_.PC00.RP13.PRTP, IntObj)
    External (_SB_.PC00.RP13.RD3C, IntObj)
    External (_SB_.PC00.RP13.SLOT, IntObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14.PRMV, IntObj)
    External (_SB_.PC00.RP14.PRTP, IntObj)
    External (_SB_.PC00.RP14.RD3C, IntObj)
    External (_SB_.PC00.RP14.SLOT, IntObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15.PRMV, IntObj)
    External (_SB_.PC00.RP15.PRTP, IntObj)
    External (_SB_.PC00.RP15.RD3C, IntObj)
    External (_SB_.PC00.RP15.SLOT, IntObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16.PRMV, IntObj)
    External (_SB_.PC00.RP16.PRTP, IntObj)
    External (_SB_.PC00.RP16.RD3C, IntObj)
    External (_SB_.PC00.RP16.SLOT, IntObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.PRMV, IntObj)
    External (_SB_.PC00.RP17.PRTP, IntObj)
    External (_SB_.PC00.RP17.RD3C, IntObj)
    External (_SB_.PC00.RP17.SLOT, IntObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18.PRMV, IntObj)
    External (_SB_.PC00.RP18.PRTP, IntObj)
    External (_SB_.PC00.RP18.RD3C, IntObj)
    External (_SB_.PC00.RP18.SLOT, IntObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19.PRMV, IntObj)
    External (_SB_.PC00.RP19.PRTP, IntObj)
    External (_SB_.PC00.RP19.RD3C, IntObj)
    External (_SB_.PC00.RP19.SLOT, IntObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20.PRMV, IntObj)
    External (_SB_.PC00.RP20.PRTP, IntObj)
    External (_SB_.PC00.RP20.RD3C, IntObj)
    External (_SB_.PC00.RP20.SLOT, IntObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.PRMV, IntObj)
    External (_SB_.PC00.RP21.PRTP, IntObj)
    External (_SB_.PC00.RP21.RD3C, IntObj)
    External (_SB_.PC00.RP21.SLOT, IntObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22.PRMV, IntObj)
    External (_SB_.PC00.RP22.PRTP, IntObj)
    External (_SB_.PC00.RP22.RD3C, IntObj)
    External (_SB_.PC00.RP22.SLOT, IntObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23.PRMV, IntObj)
    External (_SB_.PC00.RP23.PRTP, IntObj)
    External (_SB_.PC00.RP23.RD3C, IntObj)
    External (_SB_.PC00.RP23.SLOT, IntObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24.PRMV, IntObj)
    External (_SB_.PC00.RP24.PRTP, IntObj)
    External (_SB_.PC00.RP24.RD3C, IntObj)
    External (_SB_.PC00.RP24.SLOT, IntObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP25.PRMV, IntObj)
    External (_SB_.PC00.RP25.PRTP, IntObj)
    External (_SB_.PC00.RP25.RD3C, IntObj)
    External (_SB_.PC00.RP25.SLOT, IntObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP26.PRMV, IntObj)
    External (_SB_.PC00.RP26.PRTP, IntObj)
    External (_SB_.PC00.RP26.RD3C, IntObj)
    External (_SB_.PC00.RP26.SLOT, IntObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP27.PRMV, IntObj)
    External (_SB_.PC00.RP27.PRTP, IntObj)
    External (_SB_.PC00.RP27.RD3C, IntObj)
    External (_SB_.PC00.RP27.SLOT, IntObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.RP28.PRMV, IntObj)
    External (_SB_.PC00.RP28.PRTP, IntObj)
    External (_SB_.PC00.RP28.RD3C, IntObj)
    External (_SB_.PC00.RP28.SLOT, IntObj)
    External (_SB_.PC00.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC00.SWAK, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TDM0, DeviceObj)
    External (_SB_.PC00.TDM0._STA, UnknownObj)
    External (_SB_.PC00.TDM0.SCME, UnknownObj)
    External (_SB_.PC00.TDM0.STCM, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TDM1, DeviceObj)
    External (_SB_.PC00.TDM1._STA, UnknownObj)
    External (_SB_.PC00.TDM1.SCME, UnknownObj)
    External (_SB_.PC00.TDM1.STCM, MethodObj)    // 2 Arguments
    External (_SB_.PC00.THC0.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC00.THC0.PINT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.THC1.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC00.THC1.PINT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC00.UF0E, UnknownObj)
    External (_SB_.PC00.XDCI.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI._PS0.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI._PS3.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.HS03.VTCM, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS05.VTCM, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.BRMT, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTA, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTC, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTI, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CRFP, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.RDLY, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.WVHO, IntObj)
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC02, DeviceObj)
    External (_SB_.PC02.HDAS.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC02.HDAS.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC02.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC02.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.HDBO, UnknownObj)
    External (_SB_.PC02.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC02.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC02.PBSB, UnknownObj)
    External (_SB_.PC02.PPMC.ACET, UnknownObj)
    External (_SB_.PC02.PPMC.ACWA, UnknownObj)
    External (_SB_.PC02.PPMC.DCET, UnknownObj)
    External (_SB_.PC02.PPMC.DCWA, UnknownObj)
    External (_SB_.PC02.RP01, DeviceObj)
    External (_SB_.PC02.RP01.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP01.PBNU, IntObj)
    External (_SB_.PC02.RP01.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP01.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP01.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP01.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP01.PRMV, IntObj)
    External (_SB_.PC02.RP01.PRTP, IntObj)
    External (_SB_.PC02.RP01.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP01.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP01.RD3C, IntObj)
    External (_SB_.PC02.RP01.SLOT, IntObj)
    External (_SB_.PC02.RP01.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP01.VDID, FieldUnitObj)
    External (_SB_.PC02.RP02.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP02.PBNU, IntObj)
    External (_SB_.PC02.RP02.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP02.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP02.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP02.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP02.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP02.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP02.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP02.VDID, FieldUnitObj)
    External (_SB_.PC02.RP03.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP03.PBNU, IntObj)
    External (_SB_.PC02.RP03.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP03.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP03.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP03.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP03.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP03.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP03.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP03.VDID, FieldUnitObj)
    External (_SB_.PC02.RP04, DeviceObj)
    External (_SB_.PC02.RP04.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP04.PBNU, IntObj)
    External (_SB_.PC02.RP04.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP04.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP04.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP04.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP04.PRMV, IntObj)
    External (_SB_.PC02.RP04.PRTP, IntObj)
    External (_SB_.PC02.RP04.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP04.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP04.RD3C, IntObj)
    External (_SB_.PC02.RP04.SLOT, IntObj)
    External (_SB_.PC02.RP04.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP04.VDID, FieldUnitObj)
    External (_SB_.PC02.RP05, DeviceObj)
    External (_SB_.PC02.RP05.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP05.PBNU, IntObj)
    External (_SB_.PC02.RP05.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP05.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP05.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP05.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP05.PRMV, IntObj)
    External (_SB_.PC02.RP05.PRTP, IntObj)
    External (_SB_.PC02.RP05.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP05.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP05.RD3C, IntObj)
    External (_SB_.PC02.RP05.SLOT, IntObj)
    External (_SB_.PC02.RP05.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP05.VDID, FieldUnitObj)
    External (_SB_.PC02.RP06.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP06.PBNU, IntObj)
    External (_SB_.PC02.RP06.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP06.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP06.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP06.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP06.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP06.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP06.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP06.VDID, FieldUnitObj)
    External (_SB_.PC02.RP07, DeviceObj)
    External (_SB_.PC02.RP07.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP07.PBNU, IntObj)
    External (_SB_.PC02.RP07.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP07.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP07.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP07.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP07.PRMV, IntObj)
    External (_SB_.PC02.RP07.PRTP, IntObj)
    External (_SB_.PC02.RP07.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP07.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP07.RD3C, IntObj)
    External (_SB_.PC02.RP07.SLOT, IntObj)
    External (_SB_.PC02.RP07.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP07.VDID, FieldUnitObj)
    External (_SB_.PC02.RP08, DeviceObj)
    External (_SB_.PC02.RP08.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP08.PBNU, IntObj)
    External (_SB_.PC02.RP08.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP08.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP08.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP08.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP08.PRMV, IntObj)
    External (_SB_.PC02.RP08.PRTP, IntObj)
    External (_SB_.PC02.RP08.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP08.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP08.RD3C, IntObj)
    External (_SB_.PC02.RP08.SLOT, IntObj)
    External (_SB_.PC02.RP08.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP08.VDID, FieldUnitObj)
    External (_SB_.PC02.RP09, DeviceObj)
    External (_SB_.PC02.RP09.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP09.PBNU, IntObj)
    External (_SB_.PC02.RP09.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP09.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP09.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP09.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP09.PRMV, IntObj)
    External (_SB_.PC02.RP09.PRTP, IntObj)
    External (_SB_.PC02.RP09.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP09.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP09.RD3C, IntObj)
    External (_SB_.PC02.RP09.SLOT, IntObj)
    External (_SB_.PC02.RP09.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP09.VDID, FieldUnitObj)
    External (_SB_.PC02.RP10.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP10.PBNU, IntObj)
    External (_SB_.PC02.RP10.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP10.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP10.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP10.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP10.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP10.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP10.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP10.VDID, FieldUnitObj)
    External (_SB_.PC02.RP11.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP11.PBNU, IntObj)
    External (_SB_.PC02.RP11.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP11.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP11.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP11.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP11.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP11.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP11.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP11.VDID, FieldUnitObj)
    External (_SB_.PC02.RP12.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP12.PBNU, IntObj)
    External (_SB_.PC02.RP12.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP12.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP12.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP12.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP12.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP12.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP12.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP12.VDID, FieldUnitObj)
    External (_SB_.PC02.RP13, DeviceObj)
    External (_SB_.PC02.RP13.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP13.PBNU, IntObj)
    External (_SB_.PC02.RP13.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP13.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP13.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP13.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP13.PRMV, IntObj)
    External (_SB_.PC02.RP13.PRTP, IntObj)
    External (_SB_.PC02.RP13.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP13.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP13.RD3C, IntObj)
    External (_SB_.PC02.RP13.SLOT, IntObj)
    External (_SB_.PC02.RP13.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP13.VDID, FieldUnitObj)
    External (_SB_.PC02.RP14.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP14.PBNU, IntObj)
    External (_SB_.PC02.RP14.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP14.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP14.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP14.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP14.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP14.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP14.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP14.VDID, FieldUnitObj)
    External (_SB_.PC02.RP15.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP15.PBNU, IntObj)
    External (_SB_.PC02.RP15.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP15.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP15.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP15.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP15.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP15.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP15.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP15.VDID, FieldUnitObj)
    External (_SB_.PC02.RP16.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP16.PBNU, IntObj)
    External (_SB_.PC02.RP16.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP16.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP16.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP16.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP16.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP16.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP16.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP16.VDID, FieldUnitObj)
    External (_SB_.PC02.RP17, DeviceObj)
    External (_SB_.PC02.RP17.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP17.PBNU, IntObj)
    External (_SB_.PC02.RP17.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP17.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP17.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP17.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP17.PRMV, IntObj)
    External (_SB_.PC02.RP17.PRTP, IntObj)
    External (_SB_.PC02.RP17.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP17.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP17.RD3C, IntObj)
    External (_SB_.PC02.RP17.SLOT, IntObj)
    External (_SB_.PC02.RP17.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP17.VDID, FieldUnitObj)
    External (_SB_.PC02.RP18.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP18.PBNU, IntObj)
    External (_SB_.PC02.RP18.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP18.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP18.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP18.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP18.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP18.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP18.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP18.VDID, FieldUnitObj)
    External (_SB_.PC02.RP19.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP19.PBNU, IntObj)
    External (_SB_.PC02.RP19.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP19.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP19.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP19.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP19.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP19.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP19.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP19.VDID, FieldUnitObj)
    External (_SB_.PC02.RP20.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP20.PBNU, IntObj)
    External (_SB_.PC02.RP20.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP20.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP20.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP20.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP20.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP20.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP20.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP20.VDID, FieldUnitObj)
    External (_SB_.PC02.RP21, DeviceObj)
    External (_SB_.PC02.RP21.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP21.PBNU, IntObj)
    External (_SB_.PC02.RP21.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP21.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP21.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP21.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP21.PRMV, IntObj)
    External (_SB_.PC02.RP21.PRTP, IntObj)
    External (_SB_.PC02.RP21.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP21.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP21.RD3C, IntObj)
    External (_SB_.PC02.RP21.SLOT, IntObj)
    External (_SB_.PC02.RP21.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP21.VDID, FieldUnitObj)
    External (_SB_.PC02.RP22.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP22.PBNU, IntObj)
    External (_SB_.PC02.RP22.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP22.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP22.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP22.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP22.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP22.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP22.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP22.VDID, FieldUnitObj)
    External (_SB_.PC02.RP23.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP23.PBNU, IntObj)
    External (_SB_.PC02.RP23.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP23.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP23.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP23.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP23.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP23.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP23.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP23.VDID, FieldUnitObj)
    External (_SB_.PC02.RP24.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP24.PBNU, IntObj)
    External (_SB_.PC02.RP24.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP24.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP24.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP24.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP24.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP24.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC02.RP24.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP24.VDID, FieldUnitObj)
    External (_SB_.PC02.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC02.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC02.THC0.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC02.THC0.PINT, MethodObj)    // 0 Arguments
    External (_SB_.PC02.THC1.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC02.THC1.PINT, MethodObj)    // 0 Arguments
    External (_SB_.PC02.VMDE, UnknownObj)
    External (_SB_.PC02.VMPP, UnknownObj)
    External (_SB_.PC02.XDCI.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI._PS0.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI._PS3.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.HS03.VTCM, IntObj)
    External (_SB_.PC02.XHCI.RHUB.HS05.VTCM, IntObj)
    External (_SB_.PC02.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.SAPD, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SRTC, DeviceObj)
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, DeviceObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (BRMT, IntObj)
    External (CGLS, UnknownObj)
    External (CNMT, UnknownObj)
    External (DBRL, IntObj)
    External (DGBA, UnknownObj)
    External (DGD1, IntObj)
    External (DGD2, IntObj)
    External (DGD3, IntObj)
    External (DGD4, IntObj)
    External (DGD5, IntObj)
    External (DGD6, IntObj)
    External (DGD7, IntObj)
    External (DGD8, IntObj)
    External (DGD9, IntObj)
    External (DGDA, IntObj)
    External (DGDB, IntObj)
    External (DGDC, IntObj)
    External (DGDD, IntObj)
    External (DGDE, IntObj)
    External (DGDF, IntObj)
    External (DGDX, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (DPTR, IntObj)
    External (DSCE, IntObj)
    External (EPTU, FieldUnitObj)
    External (GBES, UnknownObj)
    External (GPRV, MethodObj)    // 2 Arguments
    External (HDBO, UnknownObj)
    External (HGDT, UnknownObj)
    External (ISAR, MethodObj)    // 4 Arguments
    External (ITSP, IntObj)
    External (LIDS, FieldUnitObj)
    External (M32B, IntObj)
    External (M32L, IntObj)
    External (M64B, IntObj)
    External (M64L, IntObj)
    External (OBCL, MethodObj)    // 3 Arguments
    External (P0WK, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2WK, UnknownObj)
    External (P3WK, UnknownObj)
    External (PBSB, IntObj)
    External (PCHS, FieldUnitObj)
    External (PSON, UnknownObj)
    External (RPN0, IntObj)
    External (RPN1, IntObj)
    External (RPS0, IntObj)
    External (RPS1, IntObj)
    External (SIME, UnknownObj)
    External (SPNT, MethodObj)    // 0 Arguments
    External (SPTS, MethodObj)    // 1 Arguments
    External (STD3, FieldUnitObj)
    External (SWAK, MethodObj)    // 2 Arguments
    External (TDCE, UnknownObj)
    External (TFWB, FieldUnitObj)
    External (THCE, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TVBS, FieldUnitObj)
    External (VMDE, FieldUnitObj)
    External (VMSP, UnknownObj)

    Name (SCAP, 0x000000000000FF8F)
    OperationRegion (FNVS, SystemMemory, 0x59F49000, 0x000F)
    Field (FNVS, AnyAcc, Lock, Preserve)
    {
        CPFM,   8, 
        CPSP,   8, 
        CPPT,   8, 
        CPPS,   8, 
        EBID,   64, 
        MANF,   8, 
        DBGU,   8, 
        CNVE,   8
    }

    Name (MACP, Buffer (0x84)
    {
        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x00, 0x00, 0x00                           // ....
    })
    Scope (\)
    {
        Name (SANB, 0x59F55D18)
        Name (SANL, 0x0138)
        Name (VMNB, 0xFFFF0000)
        Name (VMNL, 0xAA55)
        Name (BRMT, Zero)
        Name (RDLY, 0xA0)
        OperationRegion (SANV, SystemMemory, SANB, SANL)
        Field (SANV, AnyAcc, Lock, Preserve)
        {
            ASLB,   32, 
            IGDS,   8, 
            NDID,   8, 
            DID1,   32, 
            DID2,   32, 
            DID3,   32, 
            DID4,   32, 
            DID5,   32, 
            DID6,   32, 
            DID7,   32, 
            DID8,   32, 
            DID9,   32, 
            DIDA,   32, 
            DIDB,   32, 
            DIDC,   32, 
            DIDD,   32, 
            DIDE,   32, 
            DIDF,   32, 
            DIDX,   32, 
            NXD1,   32, 
            NXD2,   32, 
            NXD3,   32, 
            NXD4,   32, 
            NXD5,   32, 
            NXD6,   32, 
            NXD7,   32, 
            NXD8,   32, 
            NXDX,   32, 
            LIDS,   8, 
            BRTL,   8, 
            ALSE,   8, 
            LLOW,   8, 
            LHIH,   8, 
            IPTP,   8, 
            EDPV,   8, 
            DLPW,   16, 
            DLHR,   16, 
            XBAS,   32, 
            AMDA,   32, 
            LTRZ,   8, 
            M64B,   64, 
            M64L,   64, 
            CPEX,   32, 
            M32B,   32, 
            M32L,   32, 
            P0WK,   32, 
            P1WK,   32, 
            P2WK,   32, 
            VTDS,   8, 
            VTB1,   32, 
            VTB2,   32, 
            VTB3,   32, 
            VTB4,   32, 
            VTB5,   32, 
            VTB6,   32, 
            VTB7,   32, 
            VE1V,   16, 
            VE2V,   16, 
            RPIN,   8, 
            RPBA,   32, 
            SIME,   8, 
            THCE,   8, 
            TDCE,   8, 
            DME0,   8, 
            DME1,   8, 
            TRE0,   8, 
            TRE1,   8, 
            TRE2,   8, 
            TRE3,   8, 
            TPA0,   32, 
            TPA1,   32, 
            TPA2,   32, 
            TPA3,   32, 
            TCDS,   32, 
            TCIT,   8, 
            TCIR,   8, 
            TRTD,   8, 
            ITM0,   32, 
            ITM1,   32, 
            LTE0,   8, 
            LTE1,   8, 
            LTE2,   8, 
            LTE3,   8, 
            PSL0,   16, 
            PSL1,   16, 
            PSL2,   16, 
            PSL3,   16, 
            PNS0,   16, 
            PNS1,   16, 
            PNS2,   16, 
            PNS3,   16, 
            IMRY,   8, 
            TIVS,   8, 
            DIDY,   32, 
            NXDY,   32, 
            SLTS,   8, 
            MPGN,   8, 
            CMBM,   8, 
            DPMS,   8, 
            PMSA,   64, 
            PMRL,   64, 
            PBR1,   8, 
            PBR2,   8, 
            PBR3,   8, 
            REGO,   16, 
            IOMB,   64, 
            RTBM,   8, 
            RPCC,   32
        }

        Name (SS1, Zero)
        Name (SS2, Zero)
        Name (SS3, Zero)
        Name (SS4, One)
        OperationRegion (GNVS, SystemMemory, 0x59F4A000, 0x0D8B)
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            OSYS,   16, 
            SMIF,   8, 
            PRM0,   8, 
            PRM1,   8, 
            SCIF,   8, 
            PRM2,   8, 
            PRM3,   8, 
            LCKF,   8, 
            PRM4,   8, 
            PRM5,   8, 
            PWRS,   8, 
            DBGS,   8, 
            THOF,   8, 
            ACT1,   8, 
            ACTT,   8, 
            PSVT,   8, 
            TC1V,   8, 
            TC2V,   8, 
            TSPV,   8, 
            CRTT,   8, 
            REVN,   8, 
            APIC,   8, 
            TCNT,   8, 
            PCP0,   8, 
            PCP1,   8, 
            PPCM,   8, 
            PPMF,   32, 
            C67L,   8, 
            NATP,   8, 
            CMAP,   8, 
            CMBP,   8, 
            LPTP,   8, 
            FDCP,   8, 
            CMCP,   8, 
            CIRP,   8, 
            SMSC,   8, 
            W381,   8, 
            SMC1,   8, 
            EMAE,   8, 
            EMAP,   16, 
            EMAL,   16, 
            MEFE,   8, 
            DSTS,   8, 
            MORD,   8, 
            TCGP,   8, 
            PPRP,   32, 
            PPRQ,   8, 
            LPPR,   8, 
            IDEM,   8, 
            PLID,   8, 
            BTYP,   8, 
            OSCC,   8, 
            NEXP,   8, 
            SBV1,   8, 
            SBV2,   8, 
            ECON,   8, 
            DSEN,   8, 
            GPIC,   8, 
            CTYP,   8, 
            L01C,   8, 
            VFN0,   8, 
            VFN1,   8, 
            VFN2,   8, 
            VFN3,   8, 
            VFN4,   8, 
            VFN5,   8, 
            VFN6,   8, 
            VFN7,   8, 
            VFN8,   8, 
            VFN9,   8, 
            PNHM,   32, 
            TBAL,   32, 
            TBAH,   32, 
            TSOD,   8, 
            PFLV,   8, 
            BREV,   16, 
            PAMT,   8, 
            AC0F,   8, 
            AC1F,   8, 
            XTUB,   32, 
            XTUS,   32, 
            XMPB,   32, 
            DDRF,   8, 
            RTD3,   8, 
            PEP0,   8, 
            PEP3,   8, 
            PGRT,   8, 
            S0ID,   8, 
            PUIS,   8, 
            CTDB,   8, 
            DKSM,   8, 
            SIO1,   16, 
            SIO2,   16, 
            SPBA,   16, 
            Offset (0x1F3), 
            PG3S,   8, 
            XHPR,   8, 
            RIC0,   8, 
            GBSX,   8, 
            AUDD,   16, 
            IC0D,   16, 
            IC1D,   16, 
            IC1S,   16, 
            VRRD,   16, 
            PSCP,   8, 
            I20D,   16, 
            I21D,   16, 
            RCG0,   16, 
            RCG1,   16, 
            STD3,   8, 
            P2ME,   8, 
            SCMK,   8, 
            SSH0,   16, 
            SSL0,   16, 
            SSD0,   16, 
            FMH0,   16, 
            FML0,   16, 
            FMD0,   16, 
            FPH0,   16, 
            FPL0,   16, 
            FPD0,   16, 
            HSH0,   16, 
            HSL0,   16, 
            HSD0,   16, 
            Offset (0x23D), 
            SSH1,   16, 
            SSL1,   16, 
            SSD1,   16, 
            FMH1,   16, 
            FML1,   16, 
            FMD1,   16, 
            FPH1,   16, 
            FPL1,   16, 
            FPD1,   16, 
            HSH1,   16, 
            HSL1,   16, 
            HSD1,   16, 
            Offset (0x256), 
            SSH2,   16, 
            SSL2,   16, 
            SSD2,   16, 
            FMH2,   16, 
            FML2,   16, 
            FMD2,   16, 
            FPH2,   16, 
            FPL2,   16, 
            FPD2,   16, 
            HSH2,   16, 
            HSL2,   16, 
            HSD2,   16, 
            Offset (0x26F), 
            SSH3,   16, 
            SSL3,   16, 
            SSD3,   16, 
            FMH3,   16, 
            FML3,   16, 
            FMD3,   16, 
            FPH3,   16, 
            FPL3,   16, 
            FPD3,   16, 
            HSH3,   16, 
            HSL3,   16, 
            HSD3,   16, 
            Offset (0x288), 
            SSH4,   16, 
            SSL4,   16, 
            SSD4,   16, 
            FMH4,   16, 
            FML4,   16, 
            FMD4,   16, 
            FPH4,   16, 
            FPL4,   16, 
            FPD4,   16, 
            HSH4,   16, 
            HSL4,   16, 
            HSD4,   16, 
            Offset (0x2A1), 
            SSH5,   16, 
            SSL5,   16, 
            SSD5,   16, 
            FMH5,   16, 
            FML5,   16, 
            FMD5,   16, 
            FPH5,   16, 
            FPL5,   16, 
            FPD5,   16, 
            HSH5,   16, 
            HSL5,   16, 
            HSD5,   16, 
            Offset (0x2BA), 
            M0C0,   16, 
            M1C0,   16, 
            M0C1,   16, 
            M1C1,   16, 
            M0C2,   16, 
            M1C2,   16, 
            M0C3,   16, 
            M1C3,   16, 
            M0C4,   16, 
            M1C4,   16, 
            M0C5,   16, 
            M1C5,   16, 
            M0C6,   16, 
            M1C6,   16, 
            M0C7,   16, 
            M1C7,   16, 
            M0C8,   16, 
            M1C8,   16, 
            Offset (0x2DF), 
            M0C9,   16, 
            M1C9,   16, 
            M0CA,   16, 
            M1CA,   16, 
            M0CB,   16, 
            M1CB,   16, 
            Offset (0x2EC), 
            GIRQ,   32, 
            DMTP,   8, 
            DMTD,   8, 
            DMSH,   8, 
            SHSB,   8, 
            PLCS,   8, 
            PLVL,   16, 
            WWSD,   8, 
            CVSD,   8, 
            SSDD,   8, 
            INLD,   8, 
            IFAT,   8, 
            IFPT,   8, 
            IFCT,   8, 
            IFHT,   8, 
            USBH,   8, 
            BCV4,   8, 
            WTV0,   8, 
            WTV1,   8, 
            APFU,   8, 
            Offset (0x30A), 
            PEPC,   64, 
            VRSD,   16, 
            PB1E,   8, 
            GNID,   8, 
            Offset (0x320), 
            AUPL,   32, 
            ESPC,   8, 
            PSME,   8, 
            PDT1,   8, 
            PLM1,   32, 
            PTW1,   32, 
            DDT1,   8, 
            DDP1,   8, 
            DLI1,   16, 
            DPL1,   16, 
            DTW1,   32, 
            DMI1,   16, 
            DMA1,   16, 
            DMT1,   16, 
            WIFE,   8, 
            DOM1,   8, 
            LIM1,   16, 
            TIM1,   32, 
            TRD0,   8, 
            TRL0,   8, 
            TRD1,   8, 
            TRL1,   8, 
            WDM1,   8, 
            CID1,   16, 
            Offset (0x3FB), 
            SDS0,   8, 
            SDS1,   8, 
            SDS2,   8, 
            SDS3,   8, 
            SDS4,   8, 
            SDS5,   8, 
            SDS6,   8, 
            SDS7,   8, 
            SDS8,   8, 
            SDS9,   8, 
            SDSA,   8, 
            TPLT,   8, 
            TPLM,   8, 
            TPLB,   8, 
            TPLH,   16, 
            TPLS,   8, 
            TPDT,   8, 
            TPDM,   8, 
            TPDB,   8, 
            TPDH,   16, 
            TPDS,   8, 
            FPTT,   8, 
            FPTM,   8, 
            WTVX,   8, 
            WITX,   8, 
            GPTD,   8, 
            GDBT,   16, 
            UTKX,   8, 
            SPTD,   8, 
            Offset (0x42A), 
            ATLB,   32, 
            SDM0,   8, 
            SDM1,   8, 
            SDM2,   8, 
            SDM3,   8, 
            SDM4,   8, 
            SDM5,   8, 
            SDM6,   8, 
            SDM7,   8, 
            SDM8,   8, 
            SDM9,   8, 
            SDMA,   8, 
            SDMB,   8, 
            Offset (0x43B), 
            USTP,   8, 
            Offset (0x465), 
            GFPS,   32, 
            GFPI,   32, 
            WBBR,   32, 
            GBTK,   32, 
            GBTI,   32, 
            GPDI,   32, 
            CL00,   8, 
            CL01,   8, 
            CL02,   8, 
            CL03,   8, 
            CL04,   8, 
            CL05,   8, 
            L0EN,   8, 
            L1EN,   8, 
            L2EN,   8, 
            L3EN,   8, 
            L4EN,   8, 
            L5EN,   8, 
            L0LC,   8, 
            L1LC,   8, 
            L2LC,   8, 
            L3LC,   8, 
            L4LC,   8, 
            L5LC,   8, 
            C0VE,   8, 
            C0TP,   8, 
            C0CV,   8, 
            C0IC,   32, 
            C0GP,   8, 
            C0IB,   8, 
            C0IA,   16, 
            C0P0,   8, 
            C0P1,   8, 
            C0P2,   8, 
            C0P3,   8, 
            C0P4,   8, 
            C0P5,   8, 
            C0G0,   8, 
            C0G1,   8, 
            C0G2,   8, 
            C0G3,   8, 
            C0G4,   8, 
            C0G5,   8, 
            C0F0,   8, 
            C0F1,   8, 
            C0F2,   8, 
            C0F3,   8, 
            C0F4,   8, 
            C0F5,   8, 
            C0A0,   8, 
            C0A1,   8, 
            C0A2,   8, 
            C0A3,   8, 
            C0A4,   8, 
            C0A5,   8, 
            C0I0,   8, 
            C0I1,   8, 
            C0I2,   8, 
            C0I3,   8, 
            C0I4,   8, 
            C0I5,   8, 
            C0PL,   8, 
            C0W0,   8, 
            C0W1,   8, 
            C0W2,   8, 
            C0W3,   8, 
            C0SP,   8, 
            C0W4,   8, 
            C0W5,   8, 
            C0CS,   8, 
            C1VE,   8, 
            C1TP,   8, 
            C1CV,   8, 
            C1IC,   32, 
            C1GP,   8, 
            C1IB,   8, 
            C1IA,   16, 
            C1P0,   8, 
            C1P1,   8, 
            C1P2,   8, 
            C1P3,   8, 
            C1P4,   8, 
            C1P5,   8, 
            C1G0,   8, 
            C1G1,   8, 
            C1G2,   8, 
            C1G3,   8, 
            C1G4,   8, 
            C1G5,   8, 
            C1F0,   8, 
            C1F1,   8, 
            C1F2,   8, 
            C1F3,   8, 
            C1F4,   8, 
            C1F5,   8, 
            C1A0,   8, 
            C1A1,   8, 
            C1A2,   8, 
            C1A3,   8, 
            C1A4,   8, 
            C1A5,   8, 
            C1I0,   8, 
            C1I1,   8, 
            C1I2,   8, 
            C1I3,   8, 
            C1I4,   8, 
            C1I5,   8, 
            C1PL,   8, 
            C1W0,   8, 
            C1W1,   8, 
            C1W2,   8, 
            C1W3,   8, 
            C1SP,   8, 
            C1W4,   8, 
            C1W5,   8, 
            C1CS,   8, 
            C2VE,   8, 
            C2TP,   8, 
            C2CV,   8, 
            C2IC,   32, 
            C2GP,   8, 
            C2IB,   8, 
            C2IA,   16, 
            C2P0,   8, 
            C2P1,   8, 
            C2P2,   8, 
            C2P3,   8, 
            C2P4,   8, 
            C2P5,   8, 
            C2G0,   8, 
            C2G1,   8, 
            C2G2,   8, 
            C2G3,   8, 
            C2G4,   8, 
            C2G5,   8, 
            C2F0,   8, 
            C2F1,   8, 
            C2F2,   8, 
            C2F3,   8, 
            C2F4,   8, 
            C2F5,   8, 
            C2A0,   8, 
            C2A1,   8, 
            C2A2,   8, 
            C2A3,   8, 
            C2A4,   8, 
            C2A5,   8, 
            C2I0,   8, 
            C2I1,   8, 
            C2I2,   8, 
            C2I3,   8, 
            C2I4,   8, 
            C2I5,   8, 
            C2PL,   8, 
            C2W0,   8, 
            C2W1,   8, 
            C2W2,   8, 
            C2W3,   8, 
            C2SP,   8, 
            C2W4,   8, 
            C2W5,   8, 
            C2CS,   8, 
            C3VE,   8, 
            C3TP,   8, 
            C3CV,   8, 
            C3IC,   32, 
            C3GP,   8, 
            C3IB,   8, 
            C3IA,   16, 
            C3P0,   8, 
            C3P1,   8, 
            C3P2,   8, 
            C3P3,   8, 
            C3P4,   8, 
            C3P5,   8, 
            C3G0,   8, 
            C3G1,   8, 
            C3G2,   8, 
            C3G3,   8, 
            C3G4,   8, 
            C3G5,   8, 
            C3F0,   8, 
            C3F1,   8, 
            C3F2,   8, 
            C3F3,   8, 
            C3F4,   8, 
            C3F5,   8, 
            C3A0,   8, 
            C3A1,   8, 
            C3A2,   8, 
            C3A3,   8, 
            C3A4,   8, 
            C3A5,   8, 
            C3I0,   8, 
            C3I1,   8, 
            C3I2,   8, 
            C3I3,   8, 
            C3I4,   8, 
            C3I5,   8, 
            C3PL,   8, 
            C3W0,   8, 
            C3W1,   8, 
            C3W2,   8, 
            C3W3,   8, 
            C3SP,   8, 
            C3W4,   8, 
            C3W5,   8, 
            C3CS,   8, 
            C4VE,   8, 
            C4TP,   8, 
            C4CV,   8, 
            C4IC,   32, 
            C4GP,   8, 
            C4IB,   8, 
            C4IA,   16, 
            C4P0,   8, 
            C4P1,   8, 
            C4P2,   8, 
            C4P3,   8, 
            C4P4,   8, 
            C4P5,   8, 
            C4G0,   8, 
            C4G1,   8, 
            C4G2,   8, 
            C4G3,   8, 
            C4G4,   8, 
            C4G5,   8, 
            C4F0,   8, 
            C4F1,   8, 
            C4F2,   8, 
            C4F3,   8, 
            C4F4,   8, 
            C4F5,   8, 
            C4A0,   8, 
            C4A1,   8, 
            C4A2,   8, 
            C4A3,   8, 
            C4A4,   8, 
            C4A5,   8, 
            C4I0,   8, 
            C4I1,   8, 
            C4I2,   8, 
            C4I3,   8, 
            C4I4,   8, 
            C4I5,   8, 
            C4PL,   8, 
            C4W0,   8, 
            C4W1,   8, 
            C4W2,   8, 
            C4W3,   8, 
            C4SP,   8, 
            C4W4,   8, 
            C4W5,   8, 
            C4CS,   8, 
            C5VE,   8, 
            C5TP,   8, 
            C5CV,   8, 
            C5IC,   32, 
            C5GP,   8, 
            C5IB,   8, 
            C5IA,   16, 
            C5P0,   8, 
            C5P1,   8, 
            C5P2,   8, 
            C5P3,   8, 
            C5P4,   8, 
            C5P5,   8, 
            C5G0,   8, 
            C5G1,   8, 
            C5G2,   8, 
            C5G3,   8, 
            C5G4,   8, 
            C5G5,   8, 
            C5F0,   8, 
            C5F1,   8, 
            C5F2,   8, 
            C5F3,   8, 
            C5F4,   8, 
            C5F5,   8, 
            C5A0,   8, 
            C5A1,   8, 
            C5A2,   8, 
            C5A3,   8, 
            C5A4,   8, 
            C5A5,   8, 
            C5I0,   8, 
            C5I1,   8, 
            C5I2,   8, 
            C5I3,   8, 
            C5I4,   8, 
            C5I5,   8, 
            C5PL,   8, 
            C5W0,   8, 
            C5W1,   8, 
            C5W2,   8, 
            C5W3,   8, 
            C5SP,   8, 
            C5W4,   8, 
            C5W5,   8, 
            C5CS,   8, 
            L0SM,   8, 
            L0H0,   8, 
            L0H1,   8, 
            L0H2,   8, 
            L0H3,   8, 
            L0H4,   8, 
            L0H5,   8, 
            L0H6,   8, 
            L0H7,   8, 
            L0H8,   8, 
            L0PL,   8, 
            L0M0,   8, 
            L0M1,   8, 
            L0M2,   8, 
            L0M3,   8, 
            L0M4,   8, 
            L0M5,   8, 
            L0M6,   8, 
            L0M7,   8, 
            L0M8,   8, 
            L0M9,   8, 
            L0MA,   8, 
            L0MB,   8, 
            L0MC,   8, 
            L0MD,   8, 
            L0ME,   8, 
            L0MF,   8, 
            L0DI,   8, 
            L0BS,   8, 
            L0A0,   16, 
            L0A1,   16, 
            L0A2,   16, 
            L0A3,   16, 
            L0A4,   16, 
            L0A5,   16, 
            L0A6,   16, 
            L0A7,   16, 
            L0A8,   16, 
            L0A9,   16, 
            L0AA,   16, 
            L0AB,   16, 
            L0D0,   8, 
            L0D1,   8, 
            L0D2,   8, 
            L0D3,   8, 
            L0D4,   8, 
            L0D5,   8, 
            L0D6,   8, 
            L0D7,   8, 
            L0D8,   8, 
            L0D9,   8, 
            L0DA,   8, 
            L0DB,   8, 
            L0DV,   8, 
            L0CV,   8, 
            L0LU,   8, 
            L0NL,   8, 
            L0EE,   8, 
            L0VC,   8, 
            L0FS,   8, 
            L0LE,   8, 
            L0DG,   8, 
            L0CK,   32, 
            L0CL,   8, 
            L0PP,   8, 
            L0VR,   8, 
            L0FD,   8, 
            L1SM,   8, 
            L1H0,   8, 
            L1H1,   8, 
            L1H2,   8, 
            L1H3,   8, 
            L1H4,   8, 
            L1H5,   8, 
            L1H6,   8, 
            L1H7,   8, 
            L1H8,   8, 
            L1PL,   8, 
            L1M0,   8, 
            L1M1,   8, 
            L1M2,   8, 
            L1M3,   8, 
            L1M4,   8, 
            L1M5,   8, 
            L1M6,   8, 
            L1M7,   8, 
            L1M8,   8, 
            L1M9,   8, 
            L1MA,   8, 
            L1MB,   8, 
            L1MC,   8, 
            L1MD,   8, 
            L1ME,   8, 
            L1MF,   8, 
            L1DI,   8, 
            L1BS,   8, 
            L1A0,   16, 
            L1A1,   16, 
            L1A2,   16, 
            L1A3,   16, 
            L1A4,   16, 
            L1A5,   16, 
            L1A6,   16, 
            L1A7,   16, 
            L1A8,   16, 
            L1A9,   16, 
            L1AA,   16, 
            L1AB,   16, 
            L1D0,   8, 
            L1D1,   8, 
            L1D2,   8, 
            L1D3,   8, 
            L1D4,   8, 
            L1D5,   8, 
            L1D6,   8, 
            L1D7,   8, 
            L1D8,   8, 
            L1D9,   8, 
            L1DA,   8, 
            L1DB,   8, 
            L1DV,   8, 
            L1CV,   8, 
            L1LU,   8, 
            L1NL,   8, 
            L1EE,   8, 
            L1VC,   8, 
            L1FS,   8, 
            L1LE,   8, 
            L1DG,   8, 
            L1CK,   32, 
            L1CL,   8, 
            L1PP,   8, 
            L1VR,   8, 
            L1FD,   8, 
            L2SM,   8, 
            L2H0,   8, 
            L2H1,   8, 
            L2H2,   8, 
            L2H3,   8, 
            L2H4,   8, 
            L2H5,   8, 
            L2H6,   8, 
            L2H7,   8, 
            L2H8,   8, 
            L2PL,   8, 
            L2M0,   8, 
            L2M1,   8, 
            L2M2,   8, 
            L2M3,   8, 
            L2M4,   8, 
            L2M5,   8, 
            L2M6,   8, 
            L2M7,   8, 
            L2M8,   8, 
            L2M9,   8, 
            L2MA,   8, 
            L2MB,   8, 
            L2MC,   8, 
            L2MD,   8, 
            L2ME,   8, 
            L2MF,   8, 
            L2DI,   8, 
            L2BS,   8, 
            L2A0,   16, 
            L2A1,   16, 
            L2A2,   16, 
            L2A3,   16, 
            L2A4,   16, 
            L2A5,   16, 
            L2A6,   16, 
            L2A7,   16, 
            L2A8,   16, 
            L2A9,   16, 
            L2AA,   16, 
            L2AB,   16, 
            L2D0,   8, 
            L2D1,   8, 
            L2D2,   8, 
            L2D3,   8, 
            L2D4,   8, 
            L2D5,   8, 
            L2D6,   8, 
            L2D7,   8, 
            L2D8,   8, 
            L2D9,   8, 
            L2DA,   8, 
            L2DB,   8, 
            L2DV,   8, 
            L2CV,   8, 
            L2LU,   8, 
            L2NL,   8, 
            L2EE,   8, 
            L2VC,   8, 
            L2FS,   8, 
            L2LE,   8, 
            L2DG,   8, 
            L2CK,   32, 
            L2CL,   8, 
            L2PP,   8, 
            L2VR,   8, 
            L2FD,   8, 
            L3SM,   8, 
            L3H0,   8, 
            L3H1,   8, 
            L3H2,   8, 
            L3H3,   8, 
            L3H4,   8, 
            L3H5,   8, 
            L3H6,   8, 
            L3H7,   8, 
            L3H8,   8, 
            L3PL,   8, 
            L3M0,   8, 
            L3M1,   8, 
            L3M2,   8, 
            L3M3,   8, 
            L3M4,   8, 
            L3M5,   8, 
            L3M6,   8, 
            L3M7,   8, 
            L3M8,   8, 
            L3M9,   8, 
            L3MA,   8, 
            L3MB,   8, 
            L3MC,   8, 
            L3MD,   8, 
            L3ME,   8, 
            L3MF,   8, 
            L3DI,   8, 
            L3BS,   8, 
            L3A0,   16, 
            L3A1,   16, 
            L3A2,   16, 
            L3A3,   16, 
            L3A4,   16, 
            L3A5,   16, 
            L3A6,   16, 
            L3A7,   16, 
            L3A8,   16, 
            L3A9,   16, 
            L3AA,   16, 
            L3AB,   16, 
            L3D0,   8, 
            L3D1,   8, 
            L3D2,   8, 
            L3D3,   8, 
            L3D4,   8, 
            L3D5,   8, 
            L3D6,   8, 
            L3D7,   8, 
            L3D8,   8, 
            L3D9,   8, 
            L3DA,   8, 
            L3DB,   8, 
            L3DV,   8, 
            L3CV,   8, 
            L3LU,   8, 
            L3NL,   8, 
            L3EE,   8, 
            L3VC,   8, 
            L3FS,   8, 
            L3LE,   8, 
            L3DG,   8, 
            L3CK,   32, 
            L3CL,   8, 
            L3PP,   8, 
            L3VR,   8, 
            L3FD,   8, 
            L4SM,   8, 
            L4H0,   8, 
            L4H1,   8, 
            L4H2,   8, 
            L4H3,   8, 
            L4H4,   8, 
            L4H5,   8, 
            L4H6,   8, 
            L4H7,   8, 
            L4H8,   8, 
            L4PL,   8, 
            L4M0,   8, 
            L4M1,   8, 
            L4M2,   8, 
            L4M3,   8, 
            L4M4,   8, 
            L4M5,   8, 
            L4M6,   8, 
            L4M7,   8, 
            L4M8,   8, 
            L4M9,   8, 
            L4MA,   8, 
            L4MB,   8, 
            L4MC,   8, 
            L4MD,   8, 
            L4ME,   8, 
            L4MF,   8, 
            L4DI,   8, 
            L4BS,   8, 
            L4A0,   16, 
            L4A1,   16, 
            L4A2,   16, 
            L4A3,   16, 
            L4A4,   16, 
            L4A5,   16, 
            L4A6,   16, 
            L4A7,   16, 
            L4A8,   16, 
            L4A9,   16, 
            L4AA,   16, 
            L4AB,   16, 
            L4D0,   8, 
            L4D1,   8, 
            L4D2,   8, 
            L4D3,   8, 
            L4D4,   8, 
            L4D5,   8, 
            L4D6,   8, 
            L4D7,   8, 
            L4D8,   8, 
            L4D9,   8, 
            L4DA,   8, 
            L4DB,   8, 
            L4DV,   8, 
            L4CV,   8, 
            L4LU,   8, 
            L4NL,   8, 
            L4EE,   8, 
            L4VC,   8, 
            L4FS,   8, 
            L4LE,   8, 
            L4DG,   8, 
            L4CK,   32, 
            L4CL,   8, 
            L4PP,   8, 
            L4VR,   8, 
            L4FD,   8, 
            L5SM,   8, 
            L5H0,   8, 
            L5H1,   8, 
            L5H2,   8, 
            L5H3,   8, 
            L5H4,   8, 
            L5H5,   8, 
            L5H6,   8, 
            L5H7,   8, 
            L5H8,   8, 
            L5PL,   8, 
            L5M0,   8, 
            L5M1,   8, 
            L5M2,   8, 
            L5M3,   8, 
            L5M4,   8, 
            L5M5,   8, 
            L5M6,   8, 
            L5M7,   8, 
            L5M8,   8, 
            L5M9,   8, 
            L5MA,   8, 
            L5MB,   8, 
            L5MC,   8, 
            L5MD,   8, 
            L5ME,   8, 
            L5MF,   8, 
            L5DI,   8, 
            L5BS,   8, 
            L5A0,   16, 
            L5A1,   16, 
            L5A2,   16, 
            L5A3,   16, 
            L5A4,   16, 
            L5A5,   16, 
            L5A6,   16, 
            L5A7,   16, 
            L5A8,   16, 
            L5A9,   16, 
            L5AA,   16, 
            L5AB,   16, 
            L5D0,   8, 
            L5D1,   8, 
            L5D2,   8, 
            L5D3,   8, 
            L5D4,   8, 
            L5D5,   8, 
            L5D6,   8, 
            L5D7,   8, 
            L5D8,   8, 
            L5D9,   8, 
            L5DA,   8, 
            L5DB,   8, 
            L5DV,   8, 
            L5CV,   8, 
            L5LU,   8, 
            L5NL,   8, 
            L5EE,   8, 
            L5VC,   8, 
            L5FS,   8, 
            L5LE,   8, 
            L5DG,   8, 
            L5CK,   32, 
            L5CL,   8, 
            L5PP,   8, 
            L5VR,   8, 
            L5FD,   8, 
            F0FM,   8, 
            F0MS,   8, 
            F0M0,   8, 
            F0M1,   8, 
            F0M2,   8, 
            F0M3,   8, 
            F0M4,   8, 
            F0M5,   8, 
            F0M6,   8, 
            F0M7,   8, 
            F0M8,   8, 
            F0M9,   8, 
            F0MA,   8, 
            F0MB,   8, 
            F0MC,   8, 
            F0MD,   8, 
            F0ME,   8, 
            F0MF,   8, 
            F0BS,   8, 
            F0AB,   16, 
            F0GP,   8, 
            F0GG,   16, 
            F0AV,   8, 
            F0IV,   8, 
            F0OM,   8, 
            F1FM,   8, 
            F1MS,   8, 
            F1M0,   8, 
            F1M1,   8, 
            F1M2,   8, 
            F1M3,   8, 
            F1M4,   8, 
            F1M5,   8, 
            F1M6,   8, 
            F1M7,   8, 
            F1M8,   8, 
            F1M9,   8, 
            F1MA,   8, 
            F1MB,   8, 
            F1MC,   8, 
            F1MD,   8, 
            F1ME,   8, 
            F1MF,   8, 
            F1BS,   8, 
            F1AB,   16, 
            F1GP,   8, 
            F1GG,   16, 
            F1AV,   8, 
            F1IV,   8, 
            F1OM,   8, 
            F2FM,   8, 
            F2MS,   8, 
            F2M0,   8, 
            F2M1,   8, 
            F2M2,   8, 
            F2M3,   8, 
            F2M4,   8, 
            F2M5,   8, 
            F2M6,   8, 
            F2M7,   8, 
            F2M8,   8, 
            F2M9,   8, 
            F2MA,   8, 
            F2MB,   8, 
            F2MC,   8, 
            F2MD,   8, 
            F2ME,   8, 
            F2MF,   8, 
            F2BS,   8, 
            F2AB,   16, 
            F2GP,   8, 
            F2GG,   16, 
            F2AV,   8, 
            F2IV,   8, 
            F2OM,   8, 
            F3FM,   8, 
            F3MS,   8, 
            F3M0,   8, 
            F3M1,   8, 
            F3M2,   8, 
            F3M3,   8, 
            F3M4,   8, 
            F3M5,   8, 
            F3M6,   8, 
            F3M7,   8, 
            F3M8,   8, 
            F3M9,   8, 
            F3MA,   8, 
            F3MB,   8, 
            F3MC,   8, 
            F3MD,   8, 
            F3ME,   8, 
            F3MF,   8, 
            F3BS,   8, 
            F3AB,   16, 
            F3GP,   8, 
            F3GG,   16, 
            F3AV,   8, 
            F3IV,   8, 
            F3OM,   8, 
            F4FM,   8, 
            F4MS,   8, 
            F4M0,   8, 
            F4M1,   8, 
            F4M2,   8, 
            F4M3,   8, 
            F4M4,   8, 
            F4M5,   8, 
            F4M6,   8, 
            F4M7,   8, 
            F4M8,   8, 
            F4M9,   8, 
            F4MA,   8, 
            F4MB,   8, 
            F4MC,   8, 
            F4MD,   8, 
            F4ME,   8, 
            F4MF,   8, 
            F4BS,   8, 
            F4AB,   16, 
            F4GP,   8, 
            F4GG,   16, 
            F4AV,   8, 
            F4IV,   8, 
            F4OM,   8, 
            F5FM,   8, 
            F5MS,   8, 
            F5M0,   8, 
            F5M1,   8, 
            F5M2,   8, 
            F5M3,   8, 
            F5M4,   8, 
            F5M5,   8, 
            F5M6,   8, 
            F5M7,   8, 
            F5M8,   8, 
            F5M9,   8, 
            F5MA,   8, 
            F5MB,   8, 
            F5MC,   8, 
            F5MD,   8, 
            F5ME,   8, 
            F5MF,   8, 
            F5BS,   8, 
            F5AB,   16, 
            F5GP,   8, 
            F5GG,   16, 
            F5AV,   8, 
            F5IV,   8, 
            F5OM,   8, 
            Offset (0x84D), 
            ECR1,   8, 
            I2SC,   8, 
            I2SI,   32, 
            I2SB,   8, 
            UBCB,   32, 
            PPOE,   8, 
            Offset (0x85E), 
            WIFC,   8, 
            Offset (0x865), 
            ADPM,   32, 
            AG1L,   64, 
            AG1H,   64, 
            AG2L,   64, 
            AG2H,   64, 
            AG3L,   64, 
            AG3H,   64, 
            HEFE,   8, 
            XDCE,   8, 
            STXE,   8, 
            ST10,   8, 
            ST11,   8, 
            ST12,   8, 
            ST13,   8, 
            ST14,   8, 
            ST15,   8, 
            ST16,   8, 
            ST17,   8, 
            ST18,   8, 
            ST19,   8, 
            ENVM,   8, 
            DHSP,   16, 
            DSSP,   16, 
            DSTP,   8, 
            STDE,   8, 
            STRS,   8, 
            ST20,   8, 
            ST21,   8, 
            ST22,   8, 
            ST23,   8, 
            ST24,   8, 
            ST25,   8, 
            ST26,   8, 
            ST27,   8, 
            ST28,   8, 
            ST29,   8, 
            ST30,   8, 
            ST31,   8, 
            ST32,   8, 
            ST33,   8, 
            ST34,   8, 
            ST35,   8, 
            ST36,   8, 
            ST37,   8, 
            ST38,   8, 
            ST39,   8, 
            ST40,   8, 
            ST41,   8, 
            ST42,   8, 
            ST43,   8, 
            ST44,   8, 
            ST45,   8, 
            ST46,   8, 
            ST47,   8, 
            ST48,   8, 
            ST49,   8, 
            SD11,   8, 
            SD12,   8, 
            SD13,   8, 
            SD14,   8, 
            SD15,   8, 
            SD16,   8, 
            SD21,   8, 
            SD22,   8, 
            SD23,   8, 
            SD24,   8, 
            SD25,   8, 
            SD26,   8, 
            SD31,   8, 
            SD32,   8, 
            SD33,   8, 
            SD34,   8, 
            SD35,   8, 
            SD36,   8, 
            Offset (0x907), 
            SDAA,   8, 
            SDAB,   8, 
            BTSE,   8, 
            BIPM,   8, 
            BSPL,   8, 
            BTBR,   8, 
            BED2,   8, 
            BED3,   8, 
            BTLE,   8, 
            BTL2,   8, 
            BTLL,   8, 
            ATDV,   8, 
            COEM,   8, 
            RTVM,   8, 
            USTC,   8, 
            HEB1,   32, 
            TSDB,   8, 
            Offset (0x91C), 
            CVFS,   8, 
            CVFT,   8, 
            CUPN,   8, 
            SCSS,   8, 
            NCTC,   8, 
            NCTI,   8, 
            NCTH,   8, 
            HSIO,   8, 
            HUAR,   8, 
            ZPOD,   8, 
            RGBC,   8, 
            DPTC,   8, 
            CEDS,   8, 
            VBST,   8, 
            AEAB,   8, 
            AHDB,   8, 
            UCMS,   8, 
            UCG1,   32, 
            UCG2,   32, 
            RPSG,   32, 
            TBD3,   8, 
            Offset (0x972), 
            UDGF,   8, 
            UDUP,   8, 
            DBGF,   8, 
            DBUP,   8, 
            TTUP,   8, 
            TP1T,   8, 
            TP1P,   8, 
            TP1D,   8, 
            TP2T,   8, 
            TP2P,   8, 
            TP2D,   8, 
            TP3T,   8, 
            TP3P,   8, 
            TP3D,   8, 
            TP4T,   8, 
            TP4P,   8, 
            TP4D,   8, 
            TP5T,   8, 
            TP5P,   8, 
            TP5D,   8, 
            TP6T,   8, 
            TP6P,   8, 
            TP6D,   8, 
            STAS,   8, 
            WRTO,   8, 
            PRST,   32, 
            WPRP,   8, 
            P1WG,   32, 
            P1RN,   8, 
            P1PG,   32, 
            P1EP,   8, 
            P1RG,   32, 
            P1RP,   8, 
            P2WG,   32, 
            P2RN,   8, 
            P2PG,   32, 
            P2EP,   8, 
            P2RG,   32, 
            P2RP,   8, 
            P3WG,   32, 
            P3RN,   8, 
            P3PG,   32, 
            P3EP,   8, 
            P3RG,   32, 
            P3RP,   8, 
            P4WG,   32, 
            P4RN,   8, 
            P4PG,   32, 
            P4EP,   8, 
            P4RG,   32, 
            P4RP,   8, 
            P5WG,   32, 
            P5RN,   8, 
            P5PG,   32, 
            P5EP,   8, 
            P5RG,   32, 
            P5RP,   8, 
            P6WG,   32, 
            P6RN,   8, 
            P6PG,   32, 
            P6EP,   8, 
            P6RG,   32, 
            P6RP,   8, 
            P7WG,   32, 
            P7RN,   8, 
            P7PG,   32, 
            P7EP,   8, 
            P7RG,   32, 
            P7RP,   8, 
            POME,   8, 
            WFCP,   32, 
            PFCP,   8, 
            WBRS,   32, 
            PBRS,   8, 
            WWKP,   32, 
            T0PE,   32, 
            T0PR,   32, 
            T0IP,   8, 
            T0EP,   8, 
            T0RP,   8, 
            T0GI,   32, 
            T1PE,   32, 
            T1PR,   32, 
            T1IP,   8, 
            T1EP,   8, 
            T1RP,   8, 
            T1GI,   32, 
            PPDI,   8, 
            WLWK,   32, 
            WLRP,   8, 
            SATP,   32, 
            STPP,   8, 
            S1PG,   32, 
            S1PP,   8, 
            S1RG,   32, 
            S1RP,   8, 
            S2PG,   32, 
            S2PP,   8, 
            S2RG,   32, 
            S2RP,   8, 
            S3PG,   32, 
            S3PP,   8, 
            S3RG,   32, 
            S3RP,   8, 
            S4PG,   32, 
            S4PP,   8, 
            S4RG,   32, 
            S4RP,   8, 
            S5PG,   32, 
            S5PP,   8, 
            S5RG,   32, 
            S5RP,   8, 
            SXI1,   8, 
            SXI2,   8, 
            SXP1,   8, 
            SXP2,   8, 
            TSD0,   8, 
            WCLK,   8, 
            CECV,   32, 
            WWRP,   8, 
            WAGM,   8, 
            AGA1,   8, 
            AGA2,   8, 
            AGA3,   8, 
            AGA4,   8, 
            AGA5,   8, 
            AGB1,   8, 
            AGB2,   8, 
            AGB3,   8, 
            AGB4,   8, 
            AGB5,   8, 
            ACSD,   8, 
            I5BS,   8, 
            DGVR,   32, 
            LPMR,   32, 
            GP1E,   8, 
            Offset (0xA88), 
            WPFA,   32, 
            WPFB,   32, 
            WPFC,   32, 
            WPFD,   32, 
            ST50,   8, 
            ST51,   8, 
            ST52,   8, 
            ST53,   8, 
            ST54,   8, 
            ST55,   8, 
            ST56,   8, 
            ST57,   8, 
            ST58,   8, 
            ST59,   8, 
            ST5A,   8, 
            ST5B,   8, 
            ST60,   8, 
            ST61,   8, 
            ST62,   8, 
            ST63,   8, 
            ST64,   8, 
            ST65,   8, 
            ST66,   8, 
            ST67,   8, 
            ST68,   8, 
            ST69,   8, 
            ST6A,   8, 
            ST6B,   8, 
            ST70,   8, 
            ST71,   8, 
            ST72,   8, 
            ST73,   8, 
            ST74,   8, 
            ST75,   8, 
            ST76,   8, 
            ST77,   8, 
            ST78,   8, 
            ST79,   8, 
            ST7A,   8, 
            ST7B,   8, 
            ST80,   8, 
            ST81,   8, 
            ST82,   8, 
            ST83,   8, 
            ST84,   8, 
            ST85,   8, 
            ST86,   8, 
            ST87,   8, 
            ST88,   8, 
            ST89,   8, 
            ST8A,   8, 
            ST8B,   8, 
            SD17,   8, 
            SD18,   8, 
            SD19,   8, 
            SD27,   8, 
            SD28,   8, 
            SD29,   8, 
            SD37,   8, 
            SD38,   8, 
            SD39,   8, 
            AGA6,   8, 
            AGA7,   8, 
            AGA8,   8, 
            AGA9,   8, 
            AGAA,   8, 
            AGAB,   8, 
            AGB6,   8, 
            AGB7,   8, 
            AGB8,   8, 
            AGB9,   8, 
            AGBA,   8, 
            AGBB,   8, 
            UHBS,   32, 
            AXSU,   8, 
            AXMU,   8, 
            AXSR,   8, 
            AXMR,   8, 
            CD10,   8, 
            CD11,   8, 
            CD12,   8, 
            CD13,   8, 
            CD14,   8, 
            CD15,   8, 
            CD16,   8, 
            CD17,   8, 
            CD18,   8, 
            CD19,   8, 
            CD1A,   8, 
            CD20,   8, 
            CD21,   8, 
            CD22,   8, 
            CD23,   8, 
            CD24,   8, 
            CD25,   8, 
            CD26,   8, 
            CD27,   8, 
            CD28,   8, 
            CD29,   8, 
            CD2A,   8, 
            CD30,   8, 
            CD31,   8, 
            CD32,   8, 
            CD33,   8, 
            CD34,   8, 
            CD35,   8, 
            CD36,   8, 
            CD37,   8, 
            CD38,   8, 
            CD39,   8, 
            CD3A,   8, 
            CD3B,   8, 
            CD3C,   8, 
            CD3D,   8, 
            CD3E,   8, 
            CD3F,   8, 
            CD40,   8, 
            CD41,   8, 
            CD42,   8, 
            CD43,   8, 
            CD44,   8, 
            CD45,   8, 
            CD46,   8, 
            CD47,   8, 
            CD48,   8, 
            CD49,   8, 
            CD4A,   8, 
            CD4B,   8, 
            CD4C,   8, 
            CD4D,   8, 
            CD4E,   8, 
            CD4F,   8, 
            CD50,   8, 
            CD51,   8, 
            CD52,   8, 
            CD53,   8, 
            CD54,   8, 
            CD55,   8, 
            CD56,   8, 
            CD57,   8, 
            CD58,   8, 
            CD59,   8, 
            CD5A,   8, 
            CD5B,   8, 
            CD5C,   8, 
            CD5D,   8, 
            CD5E,   8, 
            CD5F,   8, 
            CD60,   8, 
            CD61,   8, 
            CD62,   8, 
            CD63,   8, 
            CD64,   8, 
            CD65,   8, 
            CD66,   8, 
            CD67,   8, 
            CD68,   8, 
            CD69,   8, 
            CD6A,   8, 
            CD6B,   8, 
            CD6C,   8, 
            CD6D,   8, 
            CD6E,   8, 
            CD6F,   8, 
            CD70,   8, 
            CD71,   8, 
            WTSE,   32, 
            WTLE,   8, 
            BL01,   16, 
            BL02,   16, 
            BL03,   16, 
            BL04,   16, 
            BL05,   16, 
            BL06,   16, 
            BL07,   16, 
            BL08,   16, 
            BL09,   16, 
            BL10,   16, 
            BL11,   16, 
            BL12,   16, 
            BL13,   16, 
            BL14,   16, 
            BL15,   16, 
            BL16,   16, 
            TILE,   8, 
            TIS0,   8, 
            TS0X,   8, 
            TIS4,   8, 
            TIS5,   8, 
            BLEC,   8, 
            BLPD,   8, 
            BLPI,   8, 
            PXDC,   8, 
            PXAC,   8, 
            PXWC,   8, 
            PXUC,   8, 
            PXFD,   8, 
            PDOD,   16, 
            XSMI,   32, 
            WWEN,   8, 
            WFFD,   8, 
            TN2B,   16, 
            TB2R,   16, 
            TR2P,   16, 
            TR2B,   16, 
            TB2F,   16, 
            TFDI,   16, 
            TBTG,   16, 
            TBTP,   16, 
            EPTU,   8, 
            U4CM,   8, 
            CMSK,   8, 
            U4SE,   8, 
            U4CL,   8, 
            WSID,   16, 
            WSTO,   16, 
            DUWS,   8, 
            WFRC,   32, 
            WFUC,   32, 
            UNI4,   32, 
            WFIC,   32, 
            WFBS,   32, 
            UDRS,   8, 
            HGDT,   8, 
            WCEN,   8, 
            WLBI,   8, 
            WHBI,   8, 
            SDGN,   8, 
            SD41,   8, 
            SD42,   8, 
            SD43,   8, 
            SD44,   8, 
            SD45,   8, 
            SD46,   8, 
            SD47,   8, 
            SD48,   8, 
            SD49,   8, 
            SD51,   8, 
            SD52,   8, 
            SD53,   8, 
            SD54,   8, 
            SD55,   8, 
            SD56,   8, 
            SD57,   8, 
            SD58,   8, 
            SD59,   8, 
            SD61,   8, 
            SD62,   8, 
            SD63,   8, 
            SD64,   8, 
            SD65,   8, 
            SD66,   8, 
            SD67,   8, 
            SD68,   8, 
            SD69,   8, 
            SD71,   8, 
            SD72,   8, 
            SD73,   8, 
            SD74,   8, 
            SD75,   8, 
            SD76,   8, 
            SD77,   8, 
            SD78,   8, 
            SD79,   8, 
            SD81,   8, 
            SD82,   8, 
            SD83,   8, 
            SD84,   8, 
            SD85,   8, 
            SD86,   8, 
            SD87,   8, 
            SD88,   8, 
            SD89,   8, 
            SSH6,   16, 
            SSL6,   16, 
            SSD6,   16, 
            FMH6,   16, 
            FML6,   16, 
            FMD6,   16, 
            FPH6,   16, 
            FPL6,   16, 
            FPD6,   16, 
            HSH6,   16, 
            HSL6,   16, 
            HSD6,   16, 
            M0CC,   16, 
            M1CC,   16, 
            SSH7,   16, 
            SSL7,   16, 
            SSD7,   16, 
            FMH7,   16, 
            FML7,   16, 
            FMD7,   16, 
            FPH7,   16, 
            FPL7,   16, 
            FPD7,   16, 
            HSH7,   16, 
            HSL7,   16, 
            HSD7,   16, 
            M0CD,   16, 
            M1CD,   16, 
            L0FI,   8, 
            L1FI,   8, 
            L2FI,   8, 
            L3FI,   8, 
            L4FI,   8, 
            L5FI,   8, 
            C0C0,   16, 
            C0C1,   16, 
            C0C2,   16, 
            C0C3,   16, 
            C0C4,   16, 
            C0C5,   16, 
            C1C0,   16, 
            C1C1,   16, 
            C1C2,   16, 
            C1C3,   16, 
            C1C4,   16, 
            C1C5,   16, 
            C2C0,   16, 
            C2C1,   16, 
            C2C2,   16, 
            C2C3,   16, 
            C2C4,   16, 
            C2C5,   16, 
            C3C0,   16, 
            C3C1,   16, 
            C3C2,   16, 
            C3C3,   16, 
            C3C4,   16, 
            C3C5,   16, 
            C4C0,   16, 
            C4C1,   16, 
            C4C2,   16, 
            C4C3,   16, 
            C4C4,   16, 
            C4C5,   16, 
            C5C0,   16, 
            C5C1,   16, 
            C5C2,   16, 
            C5C3,   16, 
            C5C4,   16, 
            C5C5,   16, 
            F0CP,   16, 
            F1CP,   16, 
            F2CP,   16, 
            F3CP,   16, 
            F4CP,   16, 
            F5CP,   16, 
            TP7T,   8, 
            TP7P,   8, 
            TP7D,   8, 
            TP8T,   8, 
            TP8P,   8, 
            TP8D,   8, 
            TP9T,   8, 
            TP9P,   8, 
            TP9D,   8, 
            TPAT,   8, 
            TPAP,   8, 
            TPAD,   8, 
            TP1U,   8, 
            TP2U,   8, 
            TP3U,   8, 
            TP4U,   8, 
            TP5U,   8, 
            TP6U,   8, 
            TP7U,   8, 
            TP8U,   8, 
            TP9U,   8, 
            TPAU,   8, 
            DGBA,   64, 
            DGOP,   32, 
            DBRL,   8, 
            SVDC,   8, 
            IADG,   8, 
            SRLD,   8, 
            WEDT,   32, 
            WF7C,   32, 
            EDMX,   32, 
            DNID,   8, 
            DGD1,   32, 
            DGD2,   32, 
            DGD3,   32, 
            DGD4,   32, 
            DGD5,   32, 
            DGD6,   32, 
            DGD7,   32, 
            DGD8,   32, 
            DGD9,   32, 
            DGDA,   32, 
            DGDB,   32, 
            DGDC,   32, 
            DGDD,   32, 
            DGDE,   32, 
            DGDF,   32, 
            DGDX,   32, 
            DGDS,   8, 
            CIRM,   8, 
            LP5E,   8, 
            CLCN,   8, 
            CLSA,   8, 
            DWFK,   32, 
            WLRT,   32, 
            WVHO,   32, 
            WDCO,   32, 
            SBSB,   8, 
            SBSL,   8, 
            SIOB,   16, 
            SIOL,   16, 
            SMEB,   32, 
            SMEL,   32, 
            SPMB,   64, 
            SPML,   64, 
            PBSB,   8, 
            PBSL,   8, 
            PIOB,   16, 
            PIOL,   16, 
            PMEB,   32, 
            PMEL,   32, 
            PPMB,   64, 
            PPML,   64, 
            I2SE,   8, 
            ITCM,   8, 
            ITHW,   8, 
            ITSI,   8, 
            VTCM,   8, 
            ZPDA,   32, 
            ZDPR,   32, 
            ZDPW,   32, 
            ZDPP,   8, 
            ZPPB,   8, 
            ARLP,   8, 
            ARLS,   8, 
            FVWP,   32, 
            FVRE,   32, 
            FVRP,   8, 
            FVPE,   32, 
            FVPP,   8, 
            FVSP,   8, 
            RPFV,   8, 
            CBTA,   8, 
            ICS0,   32, 
            ICS1,   32, 
            ICS2,   32, 
            ICS3,   32, 
            ICS4,   32, 
            ICS5,   32, 
            L0PV,   8, 
            L0PU,   8, 
            L1PV,   8, 
            L1PU,   8, 
            L2PV,   8, 
            L2PU,   8, 
            L3PU,   8, 
            L3PV,   8, 
            L4PU,   8, 
            L4PV,   8, 
            L5PU,   8, 
            L5PV,   8, 
            A0H0,   8, 
            A0H1,   8, 
            A0H2,   8, 
            A0H3,   8, 
            A0H4,   8, 
            A0H5,   8, 
            A0H6,   8, 
            A0H7,   8, 
            A0H8,   8, 
            A1H0,   8, 
            A1H1,   8, 
            A1H2,   8, 
            A1H3,   8, 
            A1H4,   8, 
            A1H5,   8, 
            A1H6,   8, 
            A1H7,   8, 
            A1H8,   8, 
            CGLS,   8
        }

        Name (PNVB, 0x59F55018)
        Name (PNVL, 0x04AB)
        OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
        Field (PNVA, AnyAcc, Lock, Preserve)
        {
            PCHS,   16, 
            PCHG,   16, 
            PSTP,   16, 
            RPA1,   32, 
            RPA2,   32, 
            RPA3,   32, 
            RPA4,   32, 
            RPA5,   32, 
            RPA6,   32, 
            RPA7,   32, 
            RPA8,   32, 
            RPA9,   32, 
            RPAA,   32, 
            RPAB,   32, 
            RPAC,   32, 
            RPAD,   32, 
            RPAE,   32, 
            RPAF,   32, 
            RPAG,   32, 
            RPAH,   32, 
            RPAI,   32, 
            RPAJ,   32, 
            RPAK,   32, 
            RPAL,   32, 
            RPAM,   32, 
            RPAN,   32, 
            RPAO,   32, 
            RPAP,   32, 
            RPAQ,   32, 
            RPAR,   32, 
            RPAS,   32, 
            NHAA,   64, 
            NHLL,   32, 
            ADFM,   32, 
            SWQ0,   8, 
            SWQ1,   8, 
            SWQ2,   8, 
            SWQ3,   8, 
            ACS0,   8, 
            ACS1,   8, 
            ACS2,   8, 
            ACS3,   8, 
            DAI0,   8, 
            DAI1,   8, 
            DAI2,   8, 
            DAI3,   8, 
            DOD0,   8, 
            DOD1,   8, 
            DOD2,   8, 
            DOD3,   8, 
            HDBO,   16, 
            SWMC,   8, 
            XTAL,   32, 
            SBRG,   32, 
            GEI0,   8, 
            GEI1,   8, 
            GEI2,   8, 
            GED0,   8, 
            GED1,   8, 
            GED2,   8, 
            PML1,   16, 
            PML2,   16, 
            PML3,   16, 
            PML4,   16, 
            PML5,   16, 
            PML6,   16, 
            PML7,   16, 
            PML8,   16, 
            PML9,   16, 
            PMLA,   16, 
            PMLB,   16, 
            PMLC,   16, 
            PMLD,   16, 
            PMLE,   16, 
            PMLF,   16, 
            PMLG,   16, 
            PMLH,   16, 
            PMLI,   16, 
            PMLJ,   16, 
            PMLK,   16, 
            PMLL,   16, 
            PMLM,   16, 
            PMLN,   16, 
            PMLO,   16, 
            PMLP,   16, 
            PMLQ,   16, 
            PMLR,   16, 
            PMLS,   16, 
            PNL1,   16, 
            PNL2,   16, 
            PNL3,   16, 
            PNL4,   16, 
            PNL5,   16, 
            PNL6,   16, 
            PNL7,   16, 
            PNL8,   16, 
            PNL9,   16, 
            PNLA,   16, 
            PNLB,   16, 
            PNLC,   16, 
            PNLD,   16, 
            PNLE,   16, 
            PNLF,   16, 
            PNLG,   16, 
            PNLH,   16, 
            PNLI,   16, 
            PNLJ,   16, 
            PNLK,   16, 
            PNLL,   16, 
            PNLM,   16, 
            PNLN,   16, 
            PNLO,   16, 
            PNLP,   16, 
            PNLQ,   16, 
            PNLR,   16, 
            PNLS,   16, 
            XHPC,   8, 
            XRPC,   8, 
            XSPC,   8, 
            XSPA,   8, 
            HPTB,   32, 
            HPTE,   8, 
            SM00,   8, 
            SM01,   8, 
            SM02,   8, 
            SM03,   8, 
            SM04,   8, 
            SM05,   8, 
            SM06,   8, 
            SC00,   64, 
            SC01,   64, 
            SC02,   64, 
            SC03,   64, 
            SC04,   64, 
            SC05,   64, 
            SC06,   64, 
            IM00,   8, 
            IM01,   8, 
            IM02,   8, 
            IM03,   8, 
            IM04,   8, 
            IM05,   8, 
            IM06,   8, 
            IM07,   8, 
            IC00,   64, 
            IC01,   64, 
            IC02,   64, 
            IC03,   64, 
            IC04,   64, 
            IC05,   64, 
            IC06,   64, 
            IC07,   64, 
            UM00,   8, 
            UM01,   8, 
            UM02,   8, 
            UM03,   8, 
            UM04,   8, 
            UM05,   8, 
            UM06,   8, 
            UC00,   64, 
            UC01,   64, 
            UC02,   64, 
            UC03,   64, 
            UC04,   64, 
            UC05,   64, 
            UC06,   64, 
            UD00,   8, 
            UD01,   8, 
            UD02,   8, 
            UD03,   8, 
            UD04,   8, 
            UD05,   8, 
            UD06,   8, 
            UP00,   8, 
            UP01,   8, 
            UP02,   8, 
            UP03,   8, 
            UP04,   8, 
            UP05,   8, 
            UP06,   8, 
            UI00,   8, 
            UI01,   8, 
            UI02,   8, 
            UI03,   8, 
            UI04,   8, 
            UI05,   8, 
            UI06,   8, 
            SGIR,   8, 
            GPHD,   8, 
            NIT1,   8, 
            NIT2,   8, 
            NIT3,   8, 
            NPM1,   8, 
            NPM2,   8, 
            NPM3,   8, 
            NPC1,   8, 
            NPC2,   8, 
            NPC3,   8, 
            NL11,   16, 
            NL12,   16, 
            NL13,   16, 
            ND21,   8, 
            ND22,   8, 
            ND23,   8, 
            ND11,   32, 
            ND12,   32, 
            ND13,   32, 
            NLR1,   16, 
            NLR2,   16, 
            NLR3,   16, 
            NLD1,   32, 
            NLD2,   32, 
            NLD3,   32, 
            NEA1,   16, 
            NEA2,   16, 
            NEA3,   16, 
            NEB1,   16, 
            NEB2,   16, 
            NEB3,   16, 
            NEC1,   16, 
            NEC2,   16, 
            NEC3,   16, 
            NRA1,   16, 
            NRA2,   16, 
            NRA3,   16, 
            NMB1,   32, 
            NMB2,   32, 
            NMB3,   32, 
            NMV1,   32, 
            NMV2,   32, 
            NMV3,   32, 
            NPB1,   32, 
            NPB2,   32, 
            NPB3,   32, 
            NPV1,   32, 
            NPV2,   32, 
            NPV3,   32, 
            NRP1,   32, 
            NRP2,   32, 
            NRP3,   32, 
            EMH4,   8, 
            EMDS,   8, 
            CSKU,   8, 
            ITA0,   16, 
            ITA1,   16, 
            ITA2,   16, 
            ITA3,   16, 
            ITS0,   8, 
            ITS1,   8, 
            ITS2,   8, 
            ITS3,   8, 
            PMBS,   16, 
            PWRM,   32, 
            CRFP,   8, 
            PCNV,   16, 
            CWFC,   8, 
            CBTC,   8, 
            CBTI,   8, 
            GBTP,   32, 
            CVPR,   8, 
            CRFI,   8, 
            TVBS,   8, 
            TFWB,   32, 
            PSON,   8, 
            LTR1,   8, 
            LTR2,   8, 
            LTR3,   8, 
            LTR4,   8, 
            LTR5,   8, 
            LTR6,   8, 
            LTR7,   8, 
            LTR8,   8, 
            LTR9,   8, 
            LTRA,   8, 
            LTRB,   8, 
            LTRC,   8, 
            LTRD,   8, 
            LTRE,   8, 
            LTRF,   8, 
            LTRG,   8, 
            LTRH,   8, 
            LTRI,   8, 
            LTRJ,   8, 
            LTRK,   8, 
            LTRL,   8, 
            LTRM,   8, 
            LTRN,   8, 
            LTRO,   8, 
            LTRP,   8, 
            LTRQ,   8, 
            LTRR,   8, 
            LTRS,   8, 
            GBES,   8, 
            PPDS,   32, 
            EMCE,   8, 
            SDCE,   8, 
            TGEA,   8, 
            TGEB,   8, 
            CR00,   8, 
            CR01,   8, 
            CR02,   8, 
            CR03,   8, 
            CR04,   8, 
            CR05,   8, 
            CR06,   8, 
            CR07,   8, 
            CR08,   8, 
            CR09,   8, 
            CR10,   8, 
            CR11,   8, 
            CR12,   8, 
            CR13,   8, 
            CR14,   8, 
            CR15,   8, 
            CR16,   8, 
            CR17,   8, 
            TCOB,   16, 
            ICKP,   16, 
            PU2C,   8, 
            PU3C,   8, 
            SPPR,   8, 
            IPCC,   8, 
            CQ00,   8, 
            CQ01,   8, 
            CQ02,   8, 
            CQ03,   8, 
            CQ04,   8, 
            CQ05,   8, 
            CQ06,   8, 
            CQ07,   8, 
            CQ08,   8, 
            CQ09,   8, 
            CQ10,   8, 
            CQ11,   8, 
            CQ12,   8, 
            CQ13,   8, 
            CQ14,   8, 
            CQ15,   8, 
            CQ16,   8, 
            CQ17,   8, 
            TIN0,   32, 
            TIN1,   32, 
            TMD0,   16, 
            TMD1,   16, 
            UF0E,   8, 
            UF1E,   8, 
            UAOE,   8, 
            T010,   32, 
            T011,   32, 
            T020,   8, 
            T021,   8, 
            T030,   32, 
            T031,   32, 
            T040,   32, 
            T041,   32, 
            T050,   32, 
            T051,   32, 
            T060,   32, 
            T061,   32, 
            T070,   32, 
            T071,   32, 
            T080,   32, 
            T081,   32, 
            T090,   32, 
            T091,   32, 
            T0A0,   32, 
            T0A1,   32, 
            T0B0,   32, 
            T0B1,   32, 
            T0C0,   32, 
            T0C1,   32, 
            T0D0,   32, 
            T0D1,   32, 
            T0E0,   32, 
            T0E1,   32, 
            T0F0,   32, 
            T0F1,   32, 
            T0G0,   16, 
            T0G1,   16, 
            T0H0,   32, 
            T0H1,   32, 
            T0I0,   8, 
            T0I1,   8, 
            T0J0,   64, 
            T0J1,   64, 
            T0K0,   64, 
            T0K1,   64, 
            T0L0,   64, 
            T0L1,   64, 
            T0M0,   64, 
            T0M1,   64, 
            T0N0,   64, 
            T0N1,   64, 
            T0O0,   64, 
            T0O1,   64, 
            T0P0,   64, 
            T0P1,   64, 
            T0Q0,   64, 
            T0Q1,   64, 
            T0R0,   64, 
            T0R1,   64, 
            T0S0,   64, 
            T0S1,   64, 
            T0T0,   64, 
            T0T1,   64, 
            T0U0,   64, 
            T0U1,   64, 
            T0V0,   64, 
            T0V1,   64, 
            T0W0,   64, 
            T0W1,   64, 
            T0X0,   64, 
            T0X1,   64, 
            T0Y0,   64, 
            T0Y1,   64, 
            T0Z0,   64, 
            T0Z1,   64, 
            T000,   64, 
            T001,   64, 
            CPPE,   8, 
            PCHA,   8, 
            ARLM,   8
        }

        Scope (_SB)
        {
            Device (PC00)
            {
                Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
                Name (_SEG, Zero)  // _SEG: PCI Segment
                Name (_BBN, Zero)  // _BBN: BIOS Bus Number
                Name (_UID, Zero)  // _UID: Unique ID
                Device (MC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
                    Field (HBUS, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x40), 
                        EPEN,   1, 
                            ,   11, 
                        EPBR,   20, 
                        Offset (0x48), 
                        MHEN,   1, 
                            ,   14, 
                        MHBR,   17, 
                        Offset (0x50), 
                        GCLK,   1, 
                        Offset (0x54), 
                        D0EN,   1, 
                        D1F2,   1, 
                        D1F1,   1, 
                        D1F0,   1, 
                        Offset (0x56), 
                        D6F0,   1, 
                        Offset (0x60), 
                        PXEN,   1, 
                        PXSZ,   3, 
                            ,   22, 
                        PXBR,   6, 
                        Offset (0x68), 
                        DIEN,   1, 
                            ,   11, 
                        DIBR,   20, 
                        Offset (0x70), 
                            ,   20, 
                        MEBR,   12, 
                        Offset (0x80), 
                            ,   4, 
                        PM0H,   2, 
                        Offset (0x81), 
                        PM1L,   2, 
                            ,   2, 
                        PM1H,   2, 
                        Offset (0x82), 
                        PM2L,   2, 
                            ,   2, 
                        PM2H,   2, 
                        Offset (0x83), 
                        PM3L,   2, 
                            ,   2, 
                        PM3H,   2, 
                        Offset (0x84), 
                        PM4L,   2, 
                            ,   2, 
                        PM4H,   2, 
                        Offset (0x85), 
                        PM5L,   2, 
                            ,   2, 
                        PM5H,   2, 
                        Offset (0x86), 
                        PM6L,   2, 
                            ,   2, 
                        PM6H,   2, 
                        Offset (0x87), 
                        Offset (0xA8), 
                            ,   20, 
                        TUUD,   19, 
                        Offset (0xBC), 
                            ,   20, 
                        TLUD,   12, 
                        Offset (0xC8), 
                            ,   7, 
                        HTSE,   1
                    }
                }

                Name (BUF0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, _Y00)
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0x00000CF7,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000CF8,         // Length
                        ,, , TypeStatic, DenseTranslation)
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000D00,         // Range Minimum
                        0x0000FFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x0000F300,         // Length
                        ,, _Y0E, TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000C3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y01, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C4000,         // Range Minimum
                        0x000C7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y02, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C8000,         // Range Minimum
                        0x000CBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y03, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000CC000,         // Range Minimum
                        0x000CFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y04, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D0000,         // Range Minimum
                        0x000D3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y05, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D4000,         // Range Minimum
                        0x000D7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y06, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D8000,         // Range Minimum
                        0x000DBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y07, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000DC000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y08, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E0000,         // Range Minimum
                        0x000E3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y09, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E4000,         // Range Minimum
                        0x000E7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y0A, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E8000,         // Range Minimum
                        0x000EBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y0B, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000EC000,         // Range Minimum
                        0x000EFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, _Y0C, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000F0000,         // Range Minimum
                        0x000FFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00010000,         // Length
                        ,, _Y0D, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0xDFFFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xE0000000,         // Length
                        ,, _Y0F, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000010000, // Range Minimum
                        0x000000000001FFFF, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000010000, // Length
                        ,, _Y10, AddressRangeMemory, TypeStatic)
                })
                Name (EP_B, Zero)
                Name (MH_B, Zero)
                Name (PC_B, Zero)
                Name (PC_L, Zero)
                Name (DM_B, Zero)
                Method (GEPB, 0, Serialized)
                {
                    If ((EP_B == Zero))
                    {
                        EP_B = (^MC.EPBR << 0x0C)
                    }

                    Return (EP_B) /* \_SB_.PC00.EP_B */
                }

                Method (GMHB, 0, Serialized)
                {
                    If ((MH_B == Zero))
                    {
                        MH_B = (^MC.MHBR << 0x0F)
                    }

                    Return (MH_B) /* \_SB_.PC00.MH_B */
                }

                Method (GPCB, 0, Serialized)
                {
                    If ((PC_B == Zero))
                    {
                        PC_B = (^MC.PXBR << 0x1A)
                    }

                    Return (PC_B) /* \_SB_.PC00.PC_B */
                }

                Method (PC2M, 2, Serialized)
                {
                    Local0 = GPCB ()
                    Local0 += (Arg1 << 0x14)
                    Local0 += ((Arg0 & 0x001F0000) >> One)
                    Local0 += ((Arg0 & 0x07) << 0x0C)
                    Return (Local0)
                }

                Method (GPCL, 0, Serialized)
                {
                    If ((PC_L == Zero))
                    {
                        If ((^MC.PXSZ < 0x03))
                        {
                            PC_L = (0x10000000 >> ^MC.PXSZ) /* \_SB_.PC00.MC__.PXSZ */
                        }
                        Else
                        {
                            PC_L = 0x10000000
                        }
                    }

                    Return (PC_L) /* \_SB_.PC00.PC_L */
                }

                Method (GDMB, 0, Serialized)
                {
                    If ((DM_B == Zero))
                    {
                        DM_B = (^MC.DIBR << 0x0C)
                    }

                    Return (DM_B) /* \_SB_.PC00.DM_B */
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    CreateWordField (BUF0, \_SB.PC00._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                    CreateWordField (BUF0, \_SB.PC00._Y00._LEN, PBLN)  // _LEN: Length
                    CreateWordField (BUF0, \_SB.PC00._Y00._MIN, PBMN)  // _MIN: Minimum Base Address
                    Local0 = GPCL ()
                    PBMX = ((Local0 >> 0x14) - 0x02)
                    PBLN = ((Local0 >> 0x14) - One)
                    If (CondRefOf (\VMDE))
                    {
                        If (((VMDE == One) && (PBMX > 0xDF)))
                        {
                            PBMX = 0xDF
                            PBLN = 0xE0
                        }
                    }

                    If (^MC.PM1L)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y01._LEN, C0LN)  // _LEN: Length
                        C0LN = Zero
                    }

                    If ((^MC.PM1L == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y01._RW, C0RW)  // _RW_: Read-Write Status
                        C0RW = Zero
                    }

                    If (^MC.PM1H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y02._LEN, C4LN)  // _LEN: Length
                        C4LN = Zero
                    }

                    If ((^MC.PM1H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y02._RW, C4RW)  // _RW_: Read-Write Status
                        C4RW = Zero
                    }

                    If (^MC.PM2L)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y03._LEN, C8LN)  // _LEN: Length
                        C8LN = Zero
                    }

                    If ((^MC.PM2L == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y03._RW, C8RW)  // _RW_: Read-Write Status
                        C8RW = Zero
                    }

                    If (^MC.PM2H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y04._LEN, CCLN)  // _LEN: Length
                        CCLN = Zero
                    }

                    If ((^MC.PM2H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y04._RW, CCRW)  // _RW_: Read-Write Status
                        CCRW = Zero
                    }

                    If (^MC.PM3L)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y05._LEN, D0LN)  // _LEN: Length
                        D0LN = Zero
                    }

                    If ((^MC.PM3L == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y05._RW, D0RW)  // _RW_: Read-Write Status
                        D0RW = Zero
                    }

                    If (^MC.PM3H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y06._LEN, D4LN)  // _LEN: Length
                        D4LN = Zero
                    }

                    If ((^MC.PM3H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y06._RW, D4RW)  // _RW_: Read-Write Status
                        D4RW = Zero
                    }

                    If (^MC.PM4L)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y07._LEN, D8LN)  // _LEN: Length
                        D8LN = Zero
                    }

                    If ((^MC.PM4L == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y07._RW, D8RW)  // _RW_: Read-Write Status
                        D8RW = Zero
                    }

                    If (^MC.PM4H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y08._LEN, DCLN)  // _LEN: Length
                        DCLN = Zero
                    }

                    If ((^MC.PM4H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y08._RW, DCRW)  // _RW_: Read-Write Status
                        DCRW = Zero
                    }

                    If (^MC.PM5L)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y09._LEN, E0LN)  // _LEN: Length
                        E0LN = Zero
                    }

                    If ((^MC.PM5L == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y09._RW, E0RW)  // _RW_: Read-Write Status
                        E0RW = Zero
                    }

                    If (^MC.PM5H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y0A._LEN, E4LN)  // _LEN: Length
                        E4LN = Zero
                    }

                    If ((^MC.PM5H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                        E4RW = Zero
                    }

                    If (^MC.PM6L)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y0B._LEN, E8LN)  // _LEN: Length
                        E8LN = Zero
                    }

                    If ((^MC.PM6L == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                        E8RW = Zero
                    }

                    If (^MC.PM6H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y0C._LEN, ECLN)  // _LEN: Length
                        ECLN = Zero
                    }

                    If ((^MC.PM6H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                        ECRW = Zero
                    }

                    If (^MC.PM0H)
                    {
                        CreateDWordField (BUF0, \_SB.PC00._Y0D._LEN, F0LN)  // _LEN: Length
                        F0LN = Zero
                    }

                    If ((^MC.PM0H == One))
                    {
                        CreateBitField (BUF0, \_SB.PC00._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                        F0RW = Zero
                    }

                    CreateDWordField (BUF0, \_SB.PC00._Y0E._MIN, I1MN)  // _MIN: Minimum Base Address
                    CreateDWordField (BUF0, \_SB.PC00._Y0E._MAX, I1MX)  // _MAX: Maximum Base Address
                    CreateDWordField (BUF0, \_SB.PC00._Y0E._LEN, I1LN)  // _LEN: Length
                    CreateDWordField (BUF0, \_SB.PC00._Y0F._MIN, M1MN)  // _MIN: Minimum Base Address
                    CreateDWordField (BUF0, \_SB.PC00._Y0F._MAX, M1MX)  // _MAX: Maximum Base Address
                    CreateDWordField (BUF0, \_SB.PC00._Y0F._LEN, M1LN)  // _LEN: Length
                    M1LN = M32L /* External reference */
                    M1MN = M32B /* External reference */
                    M1MX = ((M1MN + M1LN) - One)
                    If ((M64L == Zero))
                    {
                        CreateQWordField (BUF0, \_SB.PC00._Y10._LEN, MSLN)  // _LEN: Length
                        MSLN = Zero
                    }
                    Else
                    {
                        CreateQWordField (BUF0, \_SB.PC00._Y10._LEN, M2LN)  // _LEN: Length
                        CreateQWordField (BUF0, \_SB.PC00._Y10._MIN, M2MN)  // _MIN: Minimum Base Address
                        CreateQWordField (BUF0, \_SB.PC00._Y10._MAX, M2MX)  // _MAX: Maximum Base Address
                        M2LN = M64L /* External reference */
                        M2MN = M64B /* External reference */
                        M2MX = ((M2MN + M2LN) - One)
                    }

                    If ((PCHA != Zero))
                    {
                        PBMN = SBSB /* \SBSB */
                        PBMX = SBSL /* \SBSL */
                        PBLN = (SBSL - SBSB) /* \SBSB */
                        PBLN += One
                        I1MN = SIOB /* \SIOB */
                        I1MX = SIOL /* \SIOL */
                        I1LN = (I1MX - I1MN) /* \_SB_.PC00._CRS.I1MN */
                        I1LN += One
                        M1MN = SMEB /* \SMEB */
                        M1MX = SMEL /* \SMEL */
                        M1LN = (M1MX - M1MN) /* \_SB_.PC00._CRS.M1MN */
                        M1LN += One
                        M2MN = SPMB /* \SPMB */
                        M2MX = SPML /* \SPML */
                        M2LN = (M2MX - M2MN) /* \_SB_.PC00._CRS.M2MN */
                        M2LN += One
                    }

                    Return (BUF0) /* \_SB_.PC00.BUF0 */
                }

                Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                Name (XCNT, Zero)
                Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
                {
                    Local0 = Arg3
                    CreateDWordField (Local0, Zero, CDW1)
                    CreateDWordField (Local0, 0x04, CDW2)
                    CreateDWordField (Local0, 0x08, CDW3)
                    If ((Arg0 == GUID))
                    {
                        SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                        CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                        If (!NEXP)
                        {
                            CTRL &= 0xFFFFFFF8
                        }

                        If (CondRefOf (ITSP))
                        {
                            If (ITSP)
                            {
                                CTRL &= 0xFFFFFFF7
                            }
                        }

                        If (~(CDW1 & One))
                        {
                            OSCC = CTRL /* \_SB_.PC00.CTRL */
                            If (CondRefOf (SWAK))
                            {
                                SWAK (0xFFFF, Zero)
                            }
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PC00.CTRL */
                        OSCC = CTRL /* \_SB_.PC00.CTRL */
                        Return (Local0)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        Return (Local0)
                    }
                }

                Scope (\_SB.PC00)
                {
                    Method (AR00, 0, NotSerialized)
                    {
                        Return (^^AR00) /* \_SB_.AR00 */
                    }

                    Method (PD00, 0, NotSerialized)
                    {
                        Return (^^PD00) /* \_SB_.PD00 */
                    }

                    Method (AR04, 0, NotSerialized)
                    {
                        Return (^^AR04) /* \_SB_.AR04 */
                    }

                    Method (PD04, 0, NotSerialized)
                    {
                        Return (^^PD04) /* \_SB_.PD04 */
                    }

                    Method (AR05, 0, NotSerialized)
                    {
                        Return (^^AR05) /* \_SB_.AR05 */
                    }

                    Method (PD05, 0, NotSerialized)
                    {
                        Return (^^PD05) /* \_SB_.PD05 */
                    }

                    Method (AR06, 0, NotSerialized)
                    {
                        Return (^^AR06) /* \_SB_.AR06 */
                    }

                    Method (PD06, 0, NotSerialized)
                    {
                        Return (^^PD06) /* \_SB_.PD06 */
                    }

                    Method (AR07, 0, NotSerialized)
                    {
                        Return (^^AR07) /* \_SB_.AR07 */
                    }

                    Method (PD07, 0, NotSerialized)
                    {
                        Return (^^PD07) /* \_SB_.PD07 */
                    }

                    Method (AR08, 0, NotSerialized)
                    {
                        Return (^^AR08) /* \_SB_.AR08 */
                    }

                    Method (PD08, 0, NotSerialized)
                    {
                        Return (^^PD08) /* \_SB_.PD08 */
                    }

                    Method (AR09, 0, NotSerialized)
                    {
                        Return (^^AR09) /* \_SB_.AR09 */
                    }

                    Method (PD09, 0, NotSerialized)
                    {
                        Return (^^PD09) /* \_SB_.PD09 */
                    }

                    Device (GFX0)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                    }

                    Device (TCPU)
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Name (_ADR, 0x00040000)  // _ADR: Address
                    }

                    Device (IPU0)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (GNA0)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                    }

                    Device (VPU0)
                    {
                        Name (_ADR, 0x000B0000)  // _ADR: Address
                    }
                }
            }

            If ((PCHA != Zero))
            {
                Device (PC02)
                {
                    Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
                    Name (_SEG, Zero)  // _SEG: PCI Segment
                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                    {
                        Return (PBSB) /* External reference */
                    }

                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                            0x0000,             // Granularity
                            0x0081,             // Range Minimum
                            0x00FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x007F,             // Length
                            ,, _Y11)
                        DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x00000000,         // Granularity
                            0x00008000,         // Range Minimum
                            0x0000FFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00008000,         // Length
                            ,, _Y12, TypeStatic, DenseTranslation)
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0xB0000000,         // Range Minimum
                            0xBFFFFFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x10000000,         // Length
                            ,, _Y13, AddressRangeMemory, TypeStatic)
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000004000000000, // Range Minimum
                            0x0000005FFFFFFFFF, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000002000000000, // Length
                            ,, _Y14, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (BUF0, \_SB.PC02._Y11._MAX, PBMX)  // _MAX: Maximum Base Address
                        CreateWordField (BUF0, \_SB.PC02._Y11._MIN, PBMN)  // _MIN: Minimum Base Address
                        CreateWordField (BUF0, \_SB.PC02._Y11._LEN, PBLN)  // _LEN: Length
                        PBMN = PBSB /* External reference */
                        PBMX = PBSL /* \PBSL */
                        PBLN = (PBMX - PBMN) /* \_SB_.PC02._CRS.PBMN */
                        PBLN += One
                        CreateDWordField (BUF0, \_SB.PC02._Y12._MIN, I1MN)  // _MIN: Minimum Base Address
                        CreateDWordField (BUF0, \_SB.PC02._Y12._MAX, I1MX)  // _MAX: Maximum Base Address
                        CreateDWordField (BUF0, \_SB.PC02._Y12._LEN, I1LN)  // _LEN: Length
                        I1MN = PIOB /* \PIOB */
                        I1MX = PIOL /* \PIOL */
                        I1LN = (I1MX - I1MN) /* \_SB_.PC02._CRS.I1MN */
                        I1LN += One
                        CreateDWordField (BUF0, \_SB.PC02._Y13._MIN, M1MN)  // _MIN: Minimum Base Address
                        CreateDWordField (BUF0, \_SB.PC02._Y13._MAX, M1MX)  // _MAX: Maximum Base Address
                        CreateDWordField (BUF0, \_SB.PC02._Y13._LEN, M1LN)  // _LEN: Length
                        M1MN = PMEB /* \PMEB */
                        M1MX = PMEL /* \PMEL */
                        M1LN = (M1MX - M1MN) /* \_SB_.PC02._CRS.M1MN */
                        M1LN += One
                        CreateQWordField (BUF0, \_SB.PC02._Y14._LEN, M2LN)  // _LEN: Length
                        CreateQWordField (BUF0, \_SB.PC02._Y14._MIN, M2MN)  // _MIN: Minimum Base Address
                        CreateQWordField (BUF0, \_SB.PC02._Y14._MAX, M2MX)  // _MAX: Maximum Base Address
                        M2MN = PPMB /* \PPMB */
                        M2MX = PPML /* \PPML */
                        M2LN = (M2MX - M2MN) /* \_SB_.PC02._CRS.M2MN */
                        M2LN += One
                        Return (BUF0) /* \_SB_.PC02.BUF0 */
                    }

                    Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
                    Name (SUPP, Zero)
                    Name (CTRL, Zero)
                    Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
                    {
                        Local0 = Arg3
                        CreateDWordField (Local0, Zero, CDW1)
                        CreateDWordField (Local0, 0x04, CDW2)
                        CreateDWordField (Local0, 0x08, CDW3)
                        If ((Arg0 != GUID))
                        {
                            CDW1 |= 0x04
                            Return (Local0)
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                            Return (Local0)
                        }

                        SUPP = CDW2 /* \_SB_.PC02._OSC.CDW2 */
                        CTRL = CDW3 /* \_SB_.PC02._OSC.CDW3 */
                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                            CDW3 = CTRL /* \_SB_.PC02.CTRL */
                        }

                        Return (Local0)
                    }
                }
            }
        }

        Scope (_SB)
        {
            Name (PD00, Package (0x2A)
            {
                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x000DFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR00, Package (0x32)
            {
                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    0x02, 
                    Zero, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    0x03, 
                    Zero, 
                    0x1C
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    Zero, 
                    0x1D
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    One, 
                    Zero, 
                    0x1E
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    0x02, 
                    Zero, 
                    0x1F
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    Zero, 
                    0x23
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x1A
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x25
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000DFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000DFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (PD04, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR04, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (PD05, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR05, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Name (PD06, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0A
                }
            })
            Name (AR06, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Name (PD07, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR07, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Name (PD08, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR08, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (PD09, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR09, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Name (PD0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0A
                }
            })
            Name (AR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Name (PD0F, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR0F, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Name (PD02, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR02, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (PD0A, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR0A, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Name (PD0B, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0A
                }
            })
            Name (AR0B, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Name (PD0C, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x0A
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x0B
                }
            })
            Name (AR0C, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Scope (PC00)
            {
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR00 ())
                    }

                    Return (PD00 ())
                }
            }

            If (CondRefOf (\_SB.PC02))
            {
                Scope (PC02)
                {
                    Name (ARP0, Package (0x2B)
                    {
                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x02, 
                            Zero, 
                            0x1B
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x03, 
                            Zero, 
                            0x1C
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            Zero, 
                            Zero, 
                            0x1D
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            One, 
                            Zero, 
                            0x1E
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x02, 
                            Zero, 
                            0x1F
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            Zero, 
                            Zero, 
                            0x20
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            One, 
                            Zero, 
                            0x21
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            Zero, 
                            0x22
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            Zero, 
                            0x23
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            Zero, 
                            Zero, 
                            0x24
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            One, 
                            Zero, 
                            0x25
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            Zero, 
                            Zero, 
                            0x1A
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            One, 
                            Zero, 
                            0x26
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x02, 
                            Zero, 
                            0x19
                        }, 

                        Package (0x04)
                        {
                            0x0010FFFF, 
                            Zero, 
                            Zero, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x0010FFFF, 
                            One, 
                            Zero, 
                            0x16
                        }
                    })
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (ARP0) /* \_SB_.PC02.ARP0 */
                        }

                        Return (PD00) /* \_SB_.PD00 */
                    }
                }
            }
        }

        If ((ECR1 == One))
        {
            Scope (_SB.PC00)
            {
                Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
                Method (PCID, 4, Serialized)
                {
                    If ((Arg0 == PCIG))
                    {
                        If ((Arg1 >= 0x03))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (0x02)
                                {
                                     0x01, 0x03                                       // ..
                                })
                            }

                            If ((Arg2 == 0x08))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x09))
                            {
                                Return (Package (0x05)
                                {
                                    0xC350, 
                                    Ones, 
                                    Ones, 
                                    0xC350, 
                                    Ones
                                })
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If (CondRefOf (\_SB.PC02))
            {
                Scope (_SB.PC02)
                {
                    Method (PCID, 4, Serialized)
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Method (PCIC, 1, Serialized)
            {
                If ((ECR1 == One))
                {
                    If ((Arg0 == PCIG))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            If ((PCHA == Zero))
            {
                Method (IICB, 2, Serialized)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Name (IIC0, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, _Y15, Exclusive,
                                    )
                            })
                            CreateWordField (IIC0, \_SB.PC00.IICB._Y15._ADR, DAD0)  // _ADR: Address
                            DAD0 = Arg0
                            Return (IIC0) /* \_SB_.PC00.IICB.IIC0 */
                        }
                        Case (One)
                        {
                            Name (IIC1, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                    0x00, ResourceConsumer, _Y16, Exclusive,
                                    )
                            })
                            CreateWordField (IIC1, \_SB.PC00.IICB._Y16._ADR, DAD1)  // _ADR: Address
                            DAD1 = Arg0
                            Return (IIC1) /* \_SB_.PC00.IICB.IIC1 */
                        }
                        Case (0x02)
                        {
                            Name (IIC2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                    0x00, ResourceConsumer, _Y17, Exclusive,
                                    )
                            })
                            CreateWordField (IIC2, \_SB.PC00.IICB._Y17._ADR, DAD2)  // _ADR: Address
                            DAD2 = Arg0
                            Return (IIC2) /* \_SB_.PC00.IICB.IIC2 */
                        }
                        Case (0x03)
                        {
                            Name (IIC3, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                    0x00, ResourceConsumer, _Y18, Exclusive,
                                    )
                            })
                            CreateWordField (IIC3, \_SB.PC00.IICB._Y18._ADR, DAD3)  // _ADR: Address
                            DAD3 = Arg0
                            Return (IIC3) /* \_SB_.PC00.IICB.IIC3 */
                        }
                        Case (0x04)
                        {
                            Name (IIC4, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                    0x00, ResourceConsumer, _Y19, Exclusive,
                                    )
                            })
                            CreateWordField (IIC4, \_SB.PC00.IICB._Y19._ADR, DAD4)  // _ADR: Address
                            DAD4 = Arg0
                            Return (IIC4) /* \_SB_.PC00.IICB.IIC4 */
                        }
                        Case (0x05)
                        {
                            Name (IIC5, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                    0x00, ResourceConsumer, _Y1A, Exclusive,
                                    )
                            })
                            CreateWordField (IIC5, \_SB.PC00.IICB._Y1A._ADR, DAD5)  // _ADR: Address
                            DAD5 = Arg0
                            Return (IIC5) /* \_SB_.PC00.IICB.IIC5 */
                        }
                        Case (0x06)
                        {
                            Name (IIC6, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C6",
                                    0x00, ResourceConsumer, _Y1B, Exclusive,
                                    )
                            })
                            CreateWordField (IIC6, \_SB.PC00.IICB._Y1B._ADR, DAD6)  // _ADR: Address
                            DAD6 = Arg0
                            Return (IIC6) /* \_SB_.PC00.IICB.IIC6 */
                        }
                        Case (0x07)
                        {
                            Name (IIC7, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C7",
                                    0x00, ResourceConsumer, _Y1C, Exclusive,
                                    )
                            })
                            CreateWordField (IIC7, \_SB.PC00.IICB._Y1C._ADR, DAD7)  // _ADR: Address
                            DAD7 = Arg0
                            Return (IIC7) /* \_SB_.PC00.IICB.IIC7 */
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
            }

            Method (VIIC, 2, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Name (VI00, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.VIC0",
                                0x00, ResourceConsumer, _Y1D, Exclusive,
                                )
                        })
                        CreateWordField (VI00, \_SB.PC00.VIIC._Y1D._ADR, DAR0)  // _ADR: Address
                        DAR0 = Arg0
                        Return (VI00) /* \_SB_.PC00.VIIC.VI00 */
                    }
                    Case (One)
                    {
                        Name (VI11, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.VIC1",
                                0x00, ResourceConsumer, _Y1E, Exclusive,
                                )
                        })
                        CreateWordField (VI11, \_SB.PC00.VIIC._Y1E._ADR, DAQ1)  // _ADR: Address
                        DAQ1 = Arg0
                        Return (VI11) /* \_SB_.PC00.VIIC.VI11 */
                    }
                    Default
                    {
                        Return (ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.VICX",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                    }

                }
            }

            Method (INTB, 3, Serialized)
            {
                Name (INTR, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y1F)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (INTR, \_SB.PC00.INTB._Y1F._INT, NUMI)  // _INT: Interrupts
                NUMI = INUM (Arg0)
                CreateBitField (INTR, \_SB.PC00.INTB._Y1F._HE, LEVI)  // _HE_: High-Edge
                LEVI = Arg1
                CreateBitField (INTR, \_SB.PC00.INTB._Y1F._LL, ACTI)  // _LL_: Low Level
                ACTI = Arg2
                Return (INTR) /* \_SB_.PC00.INTB.INTR */
            }
        }

        If (CondRefOf (\_SB.PC02))
        {
            Scope (_SB.PC02)
            {
                Method (PCIC, 1, Serialized)
                {
                    Return (^^PC00.PCIC (Arg0))
                }

                Method (IICB, 2, Serialized)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Name (IIC0, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                    0x00, ResourceConsumer, _Y20, Exclusive,
                                    )
                            })
                            CreateWordField (IIC0, \_SB.PC02.IICB._Y20._ADR, DAD0)  // _ADR: Address
                            DAD0 = Arg0
                            Return (IIC0) /* \_SB_.PC02.IICB.IIC0 */
                        }
                        Case (One)
                        {
                            Name (IIC1, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                    0x00, ResourceConsumer, _Y21, Exclusive,
                                    )
                            })
                            CreateWordField (IIC1, \_SB.PC02.IICB._Y21._ADR, DAD1)  // _ADR: Address
                            DAD1 = Arg0
                            Return (IIC1) /* \_SB_.PC02.IICB.IIC1 */
                        }
                        Case (0x02)
                        {
                            Name (IIC2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                    0x00, ResourceConsumer, _Y22, Exclusive,
                                    )
                            })
                            CreateWordField (IIC2, \_SB.PC02.IICB._Y22._ADR, DAD2)  // _ADR: Address
                            DAD2 = Arg0
                            Return (IIC2) /* \_SB_.PC02.IICB.IIC2 */
                        }
                        Case (0x03)
                        {
                            Name (IIC3, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                    0x00, ResourceConsumer, _Y23, Exclusive,
                                    )
                            })
                            CreateWordField (IIC3, \_SB.PC02.IICB._Y23._ADR, DAD3)  // _ADR: Address
                            DAD3 = Arg0
                            Return (IIC3) /* \_SB_.PC02.IICB.IIC3 */
                        }
                        Case (0x04)
                        {
                            Name (IIC4, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                    0x00, ResourceConsumer, _Y24, Exclusive,
                                    )
                            })
                            CreateWordField (IIC4, \_SB.PC02.IICB._Y24._ADR, DAD4)  // _ADR: Address
                            DAD4 = Arg0
                            Return (IIC4) /* \_SB_.PC02.IICB.IIC4 */
                        }
                        Case (0x05)
                        {
                            Name (IIC5, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                    0x00, ResourceConsumer, _Y25, Exclusive,
                                    )
                            })
                            CreateWordField (IIC5, \_SB.PC02.IICB._Y25._ADR, DAD5)  // _ADR: Address
                            DAD5 = Arg0
                            Return (IIC5) /* \_SB_.PC02.IICB.IIC5 */
                        }
                        Case (0x06)
                        {
                            Name (IIC6, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C6",
                                    0x00, ResourceConsumer, _Y26, Exclusive,
                                    )
                            })
                            CreateWordField (IIC6, \_SB.PC02.IICB._Y26._ADR, DAD6)  // _ADR: Address
                            DAD6 = Arg0
                            Return (IIC6) /* \_SB_.PC02.IICB.IIC6 */
                        }
                        Case (0x07)
                        {
                            Name (IIC7, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC02.I2C7",
                                    0x00, ResourceConsumer, _Y27, Exclusive,
                                    )
                            })
                            CreateWordField (IIC7, \_SB.PC02.IICB._Y27._ADR, DAD7)  // _ADR: Address
                            DAD7 = Arg0
                            Return (IIC7) /* \_SB_.PC02.IICB.IIC7 */
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }

                Method (INTB, 3, Serialized)
                {
                    Name (INTR, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y28)
                        {
                            0x00000000,
                        }
                    })
                    CreateDWordField (INTR, \_SB.PC02.INTB._Y28._INT, NUMI)  // _INT: Interrupts
                    NUMI = INUM (Arg0)
                    CreateBitField (INTR, \_SB.PC02.INTB._Y28._HE, LEVI)  // _HE_: High-Edge
                    LEVI = Arg1
                    CreateBitField (INTR, \_SB.PC02.INTB._Y28._LL, ACTI)  // _LL_: Low Level
                    ACTI = Arg2
                    Return (INTR) /* \_SB_.PC02.INTB.INTR */
                }
            }
        }

        Scope (_SB)
        {
            Method (PSD3, 1, Serialized)
            {
                Local0 = Zero
                If (((SIME == One) || !IMPS ()))
                {
                    Return (Zero)
                }

                Switch ((Zero + Arg0--))
                {
                    Case (Zero)
                    {
                        RAA0 = One
                        While (((APA0 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (One)
                    {
                        RAA1 = One
                        While (((APA1 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x02)
                    {
                        RAA2 = One
                        While (((APA2 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x03)
                    {
                        RAA3 = One
                        While (((APA3 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x04)
                    {
                        RPB0 = One
                        While (((APB0 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x05)
                    {
                        RPB1 = One
                        While (((APB1 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x06)
                    {
                        RPB2 = One
                        While (((APB2 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x07)
                    {
                        RPB3 = One
                        While (((APB3 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x08)
                    {
                        RPC0 = One
                        While (((APC0 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x09)
                    {
                        RPC1 = One
                        While (((APC1 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0A)
                    {
                        RPC2 = One
                        While (((APC2 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0B)
                    {
                        RPC3 = One
                        While (((APC3 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0C)
                    {
                        RPD0 = One
                        While (((APD0 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0D)
                    {
                        RPD1 = One
                        While (((APD1 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0E)
                    {
                        RPD2 = One
                        While (((APD2 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0F)
                    {
                        RPD3 = One
                        While (((APD3 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x10)
                    {
                        RPE0 = One
                        While (((APE0 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x11)
                    {
                        RPE1 = One
                        While (((APE1 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x12)
                    {
                        RPE2 = One
                        While (((APE2 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x13)
                    {
                        RPE3 = One
                        While (((APE3 == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }

                }

                If ((Local0 >= 0x2710)){}
            }

            Method (PSD0, 1, Serialized)
            {
                Local0 = Zero
                If (((SIME == One) || !IMPS ()))
                {
                    Return (Zero)
                }

                Switch ((Zero + Arg0--))
                {
                    Case (Zero)
                    {
                        RAA0 = Zero
                        While (((APA0 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (One)
                    {
                        RAA1 = Zero
                        While (((APA1 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x02)
                    {
                        RAA2 = Zero
                        While (((APA2 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x03)
                    {
                        RAA3 = Zero
                        While (((APA3 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x04)
                    {
                        RPB0 = Zero
                        While (((APB0 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x05)
                    {
                        RPB1 = Zero
                        While (((APB1 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x06)
                    {
                        RPB2 = Zero
                        While (((APB2 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x07)
                    {
                        RPB3 = Zero
                        While (((APB3 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x08)
                    {
                        RPC0 = Zero
                        While (((APC0 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x09)
                    {
                        RPC1 = Zero
                        While (((APC1 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0A)
                    {
                        RPC2 = Zero
                        While (((APC2 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0B)
                    {
                        RPC3 = Zero
                        While (((APC3 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0C)
                    {
                        RPD0 = Zero
                        While (((APD0 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0D)
                    {
                        RPD1 = Zero
                        While (((APD1 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0E)
                    {
                        RPD2 = Zero
                        While (((APD2 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x0F)
                    {
                        RPD3 = Zero
                        While (((APD3 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x10)
                    {
                        RPE0 = Zero
                        While (((APE0 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x11)
                    {
                        RPE1 = Zero
                        While (((APE1 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x12)
                    {
                        RPE2 = Zero
                        While (((APE2 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x13)
                    {
                        RPE3 = Zero
                        While (((APE3 == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }

                }

                If ((Local0 >= 0x2710)){}
            }

            Method (CSD3, 1, Serialized)
            {
                Local0 = Zero
                If (((SIME == One) || !IMPS ()))
                {
                    Return (Zero)
                }

                Switch (ToInteger (Arg0))
                {
                    Case (0x14)
                    {
                        RSAT = One
                        While (((ASAT == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x15)
                    {
                        RGBE = One
                        While (((AGBE == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x16)
                    {
                        RXHC = One
                        While (((AXHC == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x17)
                    {
                        RXDC = One
                        While (((AXDC == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x18)
                    {
                        RUFS = One
                        While (((AUFS == Zero) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }

                }

                If ((Local0 >= 0x2710)){}
            }

            Method (CSD0, 1, Serialized)
            {
                Local0 = Zero
                If (((SIME == One) || !IMPS ()))
                {
                    Return (Zero)
                }

                Switch (ToInteger (Arg0))
                {
                    Case (0x14)
                    {
                        RSAT = Zero
                        While (((ASAT == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x15)
                    {
                        RGBE = Zero
                        While (((AGBE == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x16)
                    {
                        RXHC = Zero
                        While (((AXHC == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x17)
                    {
                        RXDC = Zero
                        While (((AXDC == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }
                    Case (0x18)
                    {
                        RUFS = Zero
                        While (((AUFS == One) && (Local0 < 0x2710)))
                        {
                            Local0++
                            Sleep (One)
                        }
                    }

                }

                If ((Local0 >= 0x2710)){}
            }
        }

        Name (THMN, 0x48)
        Name (THCN, 0x0E)
        Name (CNPM, 0x80)
        Name (FMSN, 0x10)
        Scope (\)
        {
            Method (THDA, 2, Serialized)
            {
                Local0 = TFWB /* \TFWB */
                Local0 += (0x40 * (CNPM * (Arg0 - FMSN)))
                Local0 += (0x40 * Arg1)
                Return (Local0)
            }

            Method (STRD, 3, Serialized)
            {
                If (((Arg1 + Arg2) > SizeOf (Arg0)))
                {
                    Return (Zero)
                }

                ToBuffer (Arg0, Local3)
                Local0 = Zero
                Local1 = Zero
                While ((Local1 < Arg2))
                {
                    Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                    Local0 += (Local2 << (0x08 * Local1))
                    Local1++
                }

                Return (Local0)
            }

            Method (THDS, 1, Serialized)
            {
                If (!(TVBS & One))
                {
                    Return (Zero)
                }

                Concatenate (Arg0, "\n", Local2)
                Local0 = SizeOf (Local2)
                Local1 = THDA (THMN, THCN)
                OperationRegion (THBA, SystemMemory, Local1, 0x40)
                Field (THBA, QWordAcc, NoLock, WriteAsZeros)
                {
                    QO00,   64
                }

                Field (THBA, DWordAcc, NoLock, WriteAsZeros)
                {
                    DO00,   32, 
                    Offset (0x10), 
                    DO10,   32, 
                    Offset (0x30), 
                    DO30,   32
                }

                Field (THBA, WordAcc, NoLock, WriteAsZeros)
                {
                    WO00,   16
                }

                Field (THBA, ByteAcc, NoLock, WriteAsZeros)
                {
                    BO00,   8
                }

                DO10 = 0x01000242
                WO00 = Local0
                Local6 = Zero
                Local7 = Local0
                While ((Local7 >= 0x08))
                {
                    QO00 = STRD (Local2, Local6, 0x08)
                    Local6 += 0x08
                    Local7 -= 0x08
                }

                If ((Local7 >= 0x04))
                {
                    DO00 = STRD (Local2, Local6, 0x04)
                    Local6 += 0x04
                    Local7 -= 0x04
                }

                If ((Local7 >= 0x02))
                {
                    WO00 = STRD (Local2, Local6, 0x02)
                    Local6 += 0x02
                    Local7 -= 0x02
                }

                If ((Local7 >= One))
                {
                    BO00 = STRD (Local2, Local6, One)
                    Local6 += One
                    Local7 -= One
                }

                DO30 = Zero
            }

            Method (THDH, 1, Serialized)
            {
                THDS (ToHexString (Arg0))
            }

            Method (THDD, 1, Serialized)
            {
                THDS (ToDecimalString (Arg0))
            }
        }

        Name (PCHH, One)
        Name (PCHN, 0x03)
        Name (PCHL, 0x02)
        Name (PCHP, 0x05)
        Name (PCHM, 0x06)
        Name (PCHX, 0x04)
        Scope (_SB)
        {
            Method (PWAK, 1, NotSerialized)
            {
                If ((Arg0 == 0x03))
                {
                    S23W ()
                }
            }

            Name (HDAA, One)
            Name (DISA, One)
            Name (CIWF, One)
            Name (CIBT, One)
            Name (S23C, Zero)
            Method (S23W, 0, NotSerialized)
            {
                HDAA = One
                DISA = One
                CIWF = One
                CIBT = One
            }

            Method (DION, 0, NotSerialized)
            {
                S023 (One, One)
            }

            Method (DIOF, 0, NotSerialized)
            {
                S023 (One, Zero)
            }

            Method (S023, 2, Serialized)
            {
            }

            Device (PRRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "PCHRESV")  // _UID: Unique ID
                Name (_STA, 0x08)  // _STA: Status
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFE000000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE04C000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE050000,         // Address Base
                            0x00060000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE0D0000,         // Address Base
                            0x00030000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE200000,         // Address Base
                            0x00600000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y29)
                    })
                    CreateWordField (BUF0, \_SB.PRRE._CRS._Y29._MIN, AMIN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PRRE._CRS._Y29._MAX, AMAX)  // _MAX: Maximum Base Address
                    AMIN = PMBS /* \PMBS */
                    AMAX = PMBS /* \PMBS */
                    Name (SBR0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00D10000,         // Address Length
                            _Y2A)
                    })
                    CreateDWordField (SBR0, \_SB.PRRE._CRS._Y2A._BAS, BAS0)  // _BAS: Base Address
                    BAS0 = SBRG /* \SBRG */
                    ConcatenateResTemplate (BUF0, SBR0, Local0)
                    Name (SBRE, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y2B)
                    })
                    CreateDWordField (SBRE, \_SB.PRRE._CRS._Y2B._BAS, BAS3)  // _BAS: Base Address
                    CreateDWordField (SBRE, \_SB.PRRE._CRS._Y2B._LEN, LEN3)  // _LEN: Length
                    BAS3 = (SBRG + 0x00D60000)
                    LEN3 = ((SBRG + 0x10000000) - BAS3)
                    ConcatenateResTemplate (Local0, SBRE, Local2)
                    Return (Local2)
                }
            }

            Device (IOTR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "IoTraps")  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y2C)
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y2D)
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y2E)
                    })
                    Name (BUF3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y2F)
                    })
                    CreateWordField (BUF0, \_SB.IOTR._CRS._Y2C._MIN, AMI0)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.IOTR._CRS._Y2C._MAX, AMA0)  // _MAX: Maximum Base Address
                    CreateWordField (BUF1, \_SB.IOTR._CRS._Y2D._MIN, AMI1)  // _MIN: Minimum Base Address
                    CreateWordField (BUF1, \_SB.IOTR._CRS._Y2D._MAX, AMA1)  // _MAX: Maximum Base Address
                    CreateWordField (BUF2, \_SB.IOTR._CRS._Y2E._MIN, AMI2)  // _MIN: Minimum Base Address
                    CreateWordField (BUF2, \_SB.IOTR._CRS._Y2E._MAX, AMA2)  // _MAX: Maximum Base Address
                    CreateWordField (BUF3, \_SB.IOTR._CRS._Y2F._MIN, AMI3)  // _MIN: Minimum Base Address
                    CreateWordField (BUF3, \_SB.IOTR._CRS._Y2F._MAX, AMA3)  // _MAX: Maximum Base Address
                    Local2 = Zero
                    If ((ITS0 == One))
                    {
                        AMI0 = ITA0 /* \ITA0 */
                        AMA0 = ITA0 /* \ITA0 */
                        Local0 = BUF0 /* \_SB_.IOTR._CRS.BUF0 */
                        Local2 = One
                    }

                    If ((ITS1 == One))
                    {
                        AMI1 = ITA1 /* \ITA1 */
                        AMA1 = ITA1 /* \ITA1 */
                        If ((Local2 == One))
                        {
                            ConcatenateResTemplate (BUF1, Local0, Local1)
                            Local0 = Local1
                        }
                        Else
                        {
                            Local0 = BUF1 /* \_SB_.IOTR._CRS.BUF1 */
                            Local2 = One
                        }
                    }

                    If ((ITS2 == One))
                    {
                        AMI2 = ITA2 /* \ITA2 */
                        AMA2 = ITA2 /* \ITA2 */
                        If ((Local2 == One))
                        {
                            ConcatenateResTemplate (BUF2, Local0, Local1)
                            Local0 = Local1
                        }
                        Else
                        {
                            Local0 = BUF2 /* \_SB_.IOTR._CRS.BUF2 */
                            Local2 = One
                        }
                    }

                    If ((ITS3 == One))
                    {
                        AMI3 = ITA3 /* \ITA3 */
                        AMA3 = ITA3 /* \ITA3 */
                        If ((Local2 == One))
                        {
                            ConcatenateResTemplate (BUF3, Local0, Local1)
                            Local0 = Local1
                        }
                        Else
                        {
                            Local0 = BUF3 /* \_SB_.IOTR._CRS.BUF3 */
                            Local2 = One
                        }
                    }

                    If ((Local2 == One))
                    {
                        Return (Local0)
                    }
                    Else
                    {
                        Return (Buffer (0x02)
                        {
                             0x79, 0x00                                       // y.
                        })
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Name (TEMP, Zero)
            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                OperationRegion (LPC, PCI_Config, Zero, 0x0100)
                Field (LPC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    CDID,   16, 
                    Offset (0x08), 
                    CRID,   8, 
                    Offset (0x80), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xA0), 
                        ,   9, 
                    PRBL,   1, 
                    Offset (0xDC), 
                        ,   2, 
                    ESPI,   1
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0004)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Scope (\)
        {
            OperationRegion (PMIO, SystemIO, PMBS, 0x80)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PBSS,   1, 
                Offset (0x40), 
                    ,   17, 
                GPEC,   1, 
                Offset (0x6C), 
                Offset (0x7C), 
                    ,   18, 
                WAEN,   1
            }

            Method (IMPS, 0, NotSerialized)
            {
                If ((PCHS == 0x04))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (IPCS, 7, Serialized)
            {
                Name (RPKG, Package (0x05)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                If ((Arg2 > 0x10))
                {
                    RPKG [Zero] = One
                    Return (RPKG) /* \IPCS.RPKG */
                }

                IWB0 = Arg3
                IWB1 = Arg4
                IWB2 = Arg5
                IWB3 = Arg6
                Local0 = Zero
                Local0 += (Arg0 << Zero)
                Local0 += (Arg1 << 0x0C)
                Local0 += (Arg2 << 0x10)
                CMDR = Local0
                Local0 = Zero
                While (One)
                {
                    If ((!IBSY || (IERR == One)))
                    {
                        Break
                    }

                    If ((Local0 > 0x0A))
                    {
                        RPKG [Zero] = 0x03
                        Return (RPKG) /* \IPCS.RPKG */
                    }

                    Sleep (One)
                    Local0++
                }

                If ((IERR == One))
                {
                    RPKG [Zero] = 0x02
                    Return (RPKG) /* \IPCS.RPKG */
                }

                RPKG [One] = IRB0 /* \IRB0 */
                RPKG [0x02] = IRB1 /* \IRB1 */
                RPKG [0x03] = IRB2 /* \IRB2 */
                RPKG [0x04] = IRB3 /* \IRB3 */
                Return (RPKG) /* \IPCS.RPKG */
            }

            Method (ULTR, 1, Serialized)
            {
                LTRU = Arg0
            }

            OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
            Field (PWMR, DWordAcc, NoLock, Preserve)
            {
                CMDR,   32, 
                IBSY,   1, 
                IERR,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x05), 
                Offset (0x06), 
                IERC,   8, 
                Offset (0x08), 
                Offset (0x80), 
                IWB0,   32, 
                IWB1,   32, 
                IWB2,   32, 
                IWB3,   32, 
                IRB0,   32, 
                IRB1,   32, 
                IRB2,   32, 
                IRB3,   32, 
                Offset (0x10D0), 
                RAA0,   1, 
                RAA1,   1, 
                RAA2,   1, 
                RAA3,   1, 
                RPB0,   1, 
                RPB1,   1, 
                RPB2,   1, 
                RPB3,   1, 
                RPC0,   1, 
                RPC1,   1, 
                RPC2,   1, 
                RPC3,   1, 
                RSAT,   1, 
                RGBE,   1, 
                RXHC,   1, 
                RXDC,   1, 
                RUFS,   1, 
                RPD0,   1, 
                RPD1,   1, 
                RPD2,   1, 
                RPD3,   1, 
                RPE0,   1, 
                RPE1,   1, 
                RPE2,   1, 
                RPE3,   1, 
                Offset (0x10D4), 
                APA0,   1, 
                APA1,   1, 
                APA2,   1, 
                APA3,   1, 
                APB0,   1, 
                APB1,   1, 
                APB2,   1, 
                APB3,   1, 
                APC0,   1, 
                APC1,   1, 
                APC2,   1, 
                APC3,   1, 
                ASAT,   1, 
                AGBE,   1, 
                AXHC,   1, 
                AXDC,   1, 
                AUFS,   1, 
                APD0,   1, 
                APD1,   1, 
                APD2,   1, 
                APD3,   1, 
                APE0,   1, 
                APE1,   1, 
                APE2,   1, 
                APE3,   1, 
                Offset (0x1800), 
                ACWA,   32, 
                DCWA,   32, 
                ACET,   32, 
                DCET,   32, 
                Offset (0x18E8), 
                    ,   29, 
                APG3,   1, 
                    ,   1, 
                CECE,   1, 
                Offset (0x1B0C), 
                    ,   2, 
                ISAT,   1, 
                    ,   18, 
                LTRU,   1, 
                Offset (0x1B1C), 
                    ,   22, 
                XSQD,   1, 
                Offset (0x1BD0), 
                    ,   31, 
                CPPM,   1, 
                Offset (0x1E20), 
                GBED,   1, 
                Offset (0x1E28), 
                    ,   22, 
                SCFD,   1
            }

            Method (PG3C, 1, Serialized)
            {
                If (Arg0)
                {
                    APG3 = One
                }
                Else
                {
                    APG3 = Zero
                }
            }

            Method (PG3T, 0, NotSerialized)
            {
                If (APG3)
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PSOC, 1, Serialized)
            {
                If (PSON)
                {
                    If (Arg0)
                    {
                        CECE = One
                    }
                    Else
                    {
                        CECE = Zero
                    }
                }
            }

            Method (PSOS, 0, NotSerialized)
            {
                If (CECE)
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CFAE, 1, NotSerialized)
            {
                If (CondRefOf (CPPE))
                {
                    If ((CPPE == One))
                    {
                        If (DerefOf (Arg0 [Zero]))
                        {
                            CPPM = Zero
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Else
                        {
                            CPPM = One
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (_SB.PC00)
        {
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
        }

        If ((PCHS != 0x04))
        {
            Scope (_SB.PC00)
            {
                Device (XDCI)
                {
                    Name (_ADR, 0x00140001)  // _ADR: Address
                    OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
                    Field (OTGD, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   16, 
                        Offset (0x10), 
                        XDCB,   64
                    }

                    Field (OTGD, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        D0I3,   2
                    }

                    Method (XDBA, 0, NotSerialized)
                    {
                        Return ((XDCB & 0xFFFFFFFFFFFFFF00))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                        {
                            If ((Arg1 == One))
                            {
                                Method (SPPS, 2, Serialized)
                                {
                                    OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                                    Field (XDBW, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x10F810), 
                                        Offset (0x10F811), 
                                        U2CP,   2, 
                                        U3CP,   2, 
                                        Offset (0x10F818), 
                                        PUPS,   2, 
                                            ,   1, 
                                        PURC,   1, 
                                        Offset (0x10F81A), 
                                        Offset (0x10F81C), 
                                            ,   3, 
                                        UXPE,   2, 
                                        Offset (0x10F81E)
                                    }

                                    Local1 = Arg0
                                    Local2 = Arg1
                                    If ((Local1 == Zero))
                                    {
                                        UXPE = Zero
                                        Local0 = Zero
                                        While ((Local0 < 0x0A))
                                        {
                                            Stall (0x64)
                                            Local0++
                                        }

                                        PUPS = Zero
                                        Local0 = Zero
                                        While ((Local0 < 0x07D0))
                                        {
                                            Stall (0x64)
                                            If (((U2CP == Zero) && (U3CP == Zero)))
                                            {
                                                Break
                                            }

                                            Local0++
                                        }

                                        If ((U2CP != Zero)){}
                                        If ((U3CP != Zero)){}
                                        Return (Zero)
                                    }

                                    If ((Local1 == 0x03))
                                    {
                                        If ((U2CP != Zero)){}
                                        If ((U3CP != Zero)){}
                                        PUPS = 0x03
                                        Local0 = Zero
                                        While ((Local0 < 0x07D0))
                                        {
                                            Stall (0x64)
                                            If (((U2CP == 0x03) && (U3CP == 0x03)))
                                            {
                                                Break
                                            }

                                            Local0++
                                        }

                                        If ((U2CP != 0x03)){}
                                        If ((U3CP != 0x03)){}
                                        UXPE = Local2
                                        Return (Zero)
                                    }

                                    Return (Zero)
                                }

                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0xB3, 0x03                                       // ..
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (One)
                                    }
                                    Case (0x04)
                                    {
                                        Local1 = DerefOf (Arg3 [Zero])
                                        SPPS (Local1, Zero)
                                    }
                                    Case (0x05)
                                    {
                                        If (CondRefOf (XDAT))
                                        {
                                            If ((XDAT () == One))
                                            {
                                                Notify (XDCI, 0x80) // Status Change
                                            }
                                            Else
                                            {
                                                Notify (XDCI, 0x81) // Information Change
                                            }
                                        }

                                        Return (Zero)
                                    }
                                    Case (0x07)
                                    {
                                        OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                        Field (XD22, WordAcc, NoLock, Preserve)
                                        {
                                            Offset (0x10F818), 
                                            P2PS,   2, 
                                            Offset (0x10F81A)
                                        }

                                        Local0 = P2PS /* \_SB_.PC00.XDCI._DSM.P2PS */
                                        Return (Local0)
                                    }
                                    Case (0x08)
                                    {
                                        Return (One)
                                    }
                                    Case (0x09)
                                    {
                                        OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                        Field (XGCT, WordAcc, NoLock, Preserve)
                                        {
                                            Offset (0xC110), 
                                            GCTL,   32
                                        }

                                        Local1 = (PPDS & 0xFFF80000)
                                        Local1 >>= 0x13
                                        Return (Local1)
                                    }

                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_DDN, "PCH XDCI controller")  // _DDN: DOS Device Name
                    Name (_STR, Unicode ("PCH XDCI controller"))  // _STR: Description String
                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x8C, 0x04))
                            }
                        }

                        Return (GPRW (0x6D, 0x04))
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }
                }

                If ((GBES != Zero))
                {
                    Device (GLAN)
                    {
                        Name (_ADR, 0x001F0006)  // _ADR: Address
                        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x86, 0x04))
                                }
                            }

                            Return (GPRW (0x6D, 0x04))
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                        {
                        }
                    }
                }

                Device (XHCI)
                {
                    Name (_ADR, 0x00140000)  // _ADR: Address
                    Name (DUWS, Zero)
                    Name (PU2C, Zero)
                    Name (PU3C, Zero)
                    Name (AHWA, One)
                    Name (PPID, 0x3A)
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (DUWS))
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x89, DUWS))
                                }
                            }

                            Return (GPRW (0x6D, DUWS))
                        }
                        Else
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x89, 0x04))
                                }
                            }

                            Return (GPRW (0x6D, 0x04))
                        }
                    }

                    DUWS = \DUWS
                    PU2C = \PU2C
                    PU3C = \PU3C
                    OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                    Field (XPRT, AnyAcc, NoLock, Preserve)
                    {
                        DVID,   16, 
                        Offset (0x10), 
                        XADR,   64, 
                        Offset (0xA2), 
                            ,   2, 
                        D3HE,   1
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("203b203b-1f13-409a-9aae-1a0347525584") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    If (CondRefOf (AHWA))
                                    {
                                        Return ((AHWA && One))
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                    {
                        Return (0x03)
                    }

                    Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                    {
                        Return (0x03)
                    }

                    Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If (CondRefOf (^RHUB.INIR))
                        {
                            ^RHUB.INIR ()
                        }
                    }

                    Method (USRA, 1, Serialized)
                    {
                        Return ((PU2C + Arg0))
                    }

                    Method (SSPA, 1, Serialized)
                    {
                        Return ((PU2C + (0x02 + Arg0)))
                    }

                    Method (UPRU, 3, NotSerialized)
                    {
                        ^^SBSC.PCAO (PPID, Arg0, Arg1, Arg2)
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        UPRU (Zero, 0xFFFFFFF7, Zero)
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS0X))
                        {
                            PS0X ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        UPRU (Zero, 0xFFFFFFFF, 0x08)
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS3X))
                        {
                            PS3X ()
                        }
                    }

                    Method (CUID, 1, Serialized)
                    {
                        If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            If ((DVID == 0xFFFF))
                            {
                                Return (Zero)
                            }

                            If (CondRefOf (PS0X))
                            {
                                CSD0 (0x16)
                                PS0X ()
                            }
                        }

                        Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                        {
                            If ((DVID == 0xFFFF))
                            {
                                Return (Zero)
                            }

                            If (CondRefOf (PS2X))
                            {
                                PS2X ()
                                CSD3 (0x16)
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            If ((DVID == 0xFFFF))
                            {
                                Return (Zero)
                            }

                            If (CondRefOf (PS3X))
                            {
                                PS3X ()
                                CSD3 (0x16)
                            }
                        }

                        If (CondRefOf (PU2C))
                        {
                            If ((One <= PU2C))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                }
                            }

                            If ((0x02 <= PU2C))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                }
                            }

                            If ((0x03 <= PU2C))
                            {
                                Device (HS03)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    If ((CondRefOf (VTCM) && (VTCM == One)))
                                    {
                                        If (((SXP1 == 0x03) || (SXP2 == 0x03)))
                                        {
                                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                            {
                                                0xFF, 
                                                0xFF, 
                                                Zero, 
                                                Zero
                                            })
                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x0,
                                                    PLD_Panel              = "TOP",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "LEFT",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x1,
                                                    PLD_GroupPosition      = 0x1,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xFFFF,
                                                    PLD_HorizontalOffset   = 0xFFFF)

                                            })
                                            Device (CIR)
                                            {
                                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                                {
                                                    Return ((0x03 + SXI1))
                                                }

                                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                                {
                                                    ToPLD (
                                                        PLD_Revision           = 0x2,
                                                        PLD_IgnoreColor        = 0x1,
                                                        PLD_Red                = 0x0,
                                                        PLD_Green              = 0x0,
                                                        PLD_Blue               = 0x0,
                                                        PLD_Width              = 0x0,
                                                        PLD_Height             = 0x0,
                                                        PLD_UserVisible        = 0x0,
                                                        PLD_Dock               = 0x0,
                                                        PLD_Lid                = 0x1,
                                                        PLD_Panel              = "FRONT",
                                                        PLD_VerticalPosition   = "UPPER",
                                                        PLD_HorizontalPosition = "CENTER",
                                                        PLD_Shape              = "ROUND",
                                                        PLD_GroupOrientation   = 0x0,
                                                        PLD_GroupToken         = 0x0,
                                                        PLD_GroupPosition      = 0x0,
                                                        PLD_Bay                = 0x0,
                                                        PLD_Ejectable          = 0x0,
                                                        PLD_EjectRequired      = 0x0,
                                                        PLD_CabinetNumber      = 0x0,
                                                        PLD_CardCageNumber     = 0x0,
                                                        PLD_Reference          = 0x0,
                                                        PLD_Rotation           = 0x0,
                                                        PLD_Order              = 0x0,
                                                        PLD_VerticalOffset     = 0xC8,
                                                        PLD_HorizontalOffset   = 0xA0)

                                                })
                                            }
                                        }
                                    }
                                }
                            }

                            If ((0x04 <= PU2C))
                            {
                                Device (HS04)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                }
                            }

                            If ((0x05 <= PU2C))
                            {
                                Device (HS05)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    If ((CondRefOf (VTCM) && (VTCM == One)))
                                    {
                                        If (((SXP1 == 0x05) || (SXP2 == 0x05)))
                                        {
                                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                            {
                                                0xFF, 
                                                0xFF, 
                                                Zero, 
                                                Zero
                                            })
                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x0,
                                                    PLD_Panel              = "TOP",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "LEFT",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x1,
                                                    PLD_GroupPosition      = 0x1,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xFFFF,
                                                    PLD_HorizontalOffset   = 0xFFFF)

                                            })
                                            Device (CIR)
                                            {
                                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                                {
                                                    Return ((0x05 + SXI1))
                                                }

                                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                                {
                                                    ToPLD (
                                                        PLD_Revision           = 0x2,
                                                        PLD_IgnoreColor        = 0x1,
                                                        PLD_Red                = 0x0,
                                                        PLD_Green              = 0x0,
                                                        PLD_Blue               = 0x0,
                                                        PLD_Width              = 0x0,
                                                        PLD_Height             = 0x0,
                                                        PLD_UserVisible        = 0x0,
                                                        PLD_Dock               = 0x0,
                                                        PLD_Lid                = 0x1,
                                                        PLD_Panel              = "FRONT",
                                                        PLD_VerticalPosition   = "UPPER",
                                                        PLD_HorizontalPosition = "CENTER",
                                                        PLD_Shape              = "ROUND",
                                                        PLD_GroupOrientation   = 0x0,
                                                        PLD_GroupToken         = 0x0,
                                                        PLD_GroupPosition      = 0x0,
                                                        PLD_Bay                = 0x0,
                                                        PLD_Ejectable          = 0x0,
                                                        PLD_EjectRequired      = 0x0,
                                                        PLD_CabinetNumber      = 0x0,
                                                        PLD_CardCageNumber     = 0x0,
                                                        PLD_Reference          = 0x0,
                                                        PLD_Rotation           = 0x0,
                                                        PLD_Order              = 0x0,
                                                        PLD_VerticalOffset     = 0xC8,
                                                        PLD_HorizontalOffset   = 0xA0)

                                                })
                                            }
                                        }
                                    }
                                }
                            }

                            If ((0x06 <= PU2C))
                            {
                                Device (HS06)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                }
                            }

                            If ((0x07 <= PU2C))
                            {
                                Device (HS07)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                }
                            }

                            If ((0x08 <= PU2C))
                            {
                                Device (HS08)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                }
                            }

                            If ((0x09 <= PU2C))
                            {
                                Device (HS09)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                }
                            }

                            If ((0x0A <= PU2C))
                            {
                                Device (HS10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                }
                            }

                            If ((0x0B <= PU2C))
                            {
                                Device (HS11)
                                {
                                    Name (_ADR, 0x0B)  // _ADR: Address
                                }
                            }

                            If ((0x0C <= PU2C))
                            {
                                Device (HS12)
                                {
                                    Name (_ADR, 0x0C)  // _ADR: Address
                                }
                            }

                            If ((0x0D <= PU2C))
                            {
                                Device (HS13)
                                {
                                    Name (_ADR, 0x0D)  // _ADR: Address
                                }
                            }

                            If ((0x0E <= PU2C))
                            {
                                Device (HS14)
                                {
                                    Name (_ADR, 0x0E)  // _ADR: Address
                                }
                            }

                            Device (USR1)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (USRA (One))
                                }
                            }

                            Device (USR2)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (USRA (0x02))
                                }
                            }
                        }

                        If (CondRefOf (PU3C))
                        {
                            If ((One <= PU3C))
                            {
                                Device (SS01)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (One))
                                    }
                                }
                            }

                            If ((0x02 <= PU3C))
                            {
                                Device (SS02)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x02))
                                    }
                                }
                            }

                            If ((0x03 <= PU3C))
                            {
                                Device (SS03)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x03))
                                    }
                                }
                            }

                            If ((0x04 <= PU3C))
                            {
                                Device (SS04)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x04))
                                    }
                                }
                            }

                            If ((0x05 <= PU3C))
                            {
                                Device (SS05)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x05))
                                    }
                                }
                            }

                            If ((0x06 <= PU3C))
                            {
                                Device (SS06)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x06))
                                    }
                                }
                            }

                            If ((0x07 <= PU3C))
                            {
                                Device (SS07)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x07))
                                    }
                                }
                            }

                            If ((0x08 <= PU3C))
                            {
                                Device (SS08)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x08))
                                    }
                                }
                            }

                            If ((0x09 <= PU3C))
                            {
                                Device (SS09)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x09))
                                    }
                                }
                            }

                            If ((0x0A <= PU3C))
                            {
                                Device (SS10)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x0A))
                                    }
                                }
                            }
                        }
                    }
                }

                Device (HDAS)
                {
                    Name (_ADR, 0x001F0003)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        S023 (Zero, One)
                        If (CondRefOf (\_SB.PC00.HDAS.PS0X))
                        {
                            PS0X ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        S023 (Zero, Zero)
                        If (CondRefOf (\_SB.PC00.HDAS.PS3X))
                        {
                            PS3X ()
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x8A, 0x04))
                            }
                        }

                        Return (GPRW (0x6D, 0x04))
                    }

                    OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
                    Field (HDAR, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }

                    Name (NBU0, ResourceTemplate ()
                    {
                        QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                            0x0000000000000001, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y30, AddressRangeACPI, TypeStatic)
                    })
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        CreateQWordField (NBU0, \_SB.PC00.HDAS._Y30._MIN, NBA0)  // _MIN: Minimum Base Address
                        CreateQWordField (NBU0, \_SB.PC00.HDAS._Y30._MAX, NMA0)  // _MAX: Maximum Base Address
                        CreateQWordField (NBU0, \_SB.PC00.HDAS._Y30._LEN, NLE0)  // _LEN: Length
                        NBA0 = NHAA /* \NHAA */
                        NMA0 = (NHAA + (NHLL - One))
                        NLE0 = NHLL /* \NHLL */
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "nhlt-version", 
                                "1.8-0"
                            }
                        }
                    })
                    Device (IDA)
                    {
                        Name (_ADR, 0x10000000)  // _ADR: Address
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0xCF                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Switch (ToInteger (Arg3))
                                        {
                                            Case (Zero)
                                            {
                                                Return (NBU0) /* \_SB_.PC00.HDAS.NBU0 */
                                            }
                                            Default
                                            {
                                                Return (NBU0) /* \_SB_.PC00.HDAS.NBU0 */
                                            }

                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (ADFM) /* \ADFM */
                                    }
                                    Case (0x03)
                                    {
                                        If (CondRefOf (\_SB.PC00.HDAS.PPMS))
                                        {
                                            Return (PPMS (Arg3))
                                        }
                                        Else
                                        {
                                        }

                                        Return (Zero)
                                    }
                                    Case (0x06)
                                    {
                                        Return (XTAL) /* \XTAL */
                                    }
                                    Case (0x07)
                                    {
                                        Return (HDBO) /* \HDBO */
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If (CondRefOf (HIWC))
                            {
                                If (HIWC (Arg0))
                                {
                                    If (CondRefOf (HIDW))
                                    {
                                        Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                    }
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }

                Scope (HDAS.IDA)
                {
                    Device (SNDW)
                    {
                        Name (_ADR, 0x40000000)  // _ADR: Address
                        Name (_CID, Package (0x02)  // _CID: Compatible ID
                        {
                            "PRP00001", 
                            "PNP0A05" /* Generic Container Device */
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (QCFG, 3, NotSerialized)
                        {
                            DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                                 = Arg1
                            DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                                 = Arg2
                        }

                        Method (XCFG, 2, NotSerialized)
                        {
                            If ((Arg1 == 0x016E3600))
                            {
                                Local0 = 0x016E3600
                                Local1 = 0x005B8D80
                                Local2 = 0x7D
                                Local3 = 0x02
                            }
                            ElseIf ((Arg1 == 0x0249F000))
                            {
                                Local0 = 0x0249F000
                                Local1 = 0x00493E00
                                Local2 = 0x32
                                Local3 = 0x04
                            }
                            ElseIf ((Arg1 == 0x0124F800))
                            {
                                Local0 = 0x0124F800
                                Local1 = 0x00493E00
                                Local2 = 0x32
                                Local3 = 0x04
                            }
                            Else
                            {
                                Local0 = Zero
                                Local1 = Zero
                                Local2 = Zero
                                Local3 = Zero
                            }

                            DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                                 = Local0
                            DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                                ) [One]) [Zero] = Local1
                            DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                                 = Local2
                            DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                                 = Local3
                        }

                        Method (DCFG, 3, NotSerialized)
                        {
                            DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                                 = Arg1
                            DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                                 = Arg2
                        }

                        Method (SDWU, 1, NotSerialized)
                        {
                            DerefOf (DerefOf (_DSD [One]) [One]) [One]
                                 = Arg0
                        }

                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            SDWU (SWMC)
                            QCFG (LNK0, SWQ0, ACS0)
                            QCFG (LNK1, SWQ1, ACS1)
                            QCFG (LNK2, SWQ2, ACS2)
                            QCFG (LNK3, SWQ3, ACS3)
                            XCFG (LNK0, XTAL)
                            XCFG (LNK1, XTAL)
                            XCFG (LNK2, XTAL)
                            XCFG (LNK3, XTAL)
                            DCFG (LNK0, DAI0, DOD0)
                            DCFG (LNK1, DAI1, DOD0)
                            DCFG (LNK2, DAI2, DOD0)
                            DCFG (LNK3, DAI3, DOD0)
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "mipi-sdw-sw-interface-revision", 
                                    0x00010000
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-master-count", 
                                    0x04
                                }
                            }, 

                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            Package (0x04)
                            {
                                Package (0x02)
                                {
                                    "mipi-sdw-link-0-subproperties", 
                                    "LNK0"
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-link-1-subproperties", 
                                    "LNK1"
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-link-2-subproperties", 
                                    "LNK2"
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-link-3-subproperties", 
                                    "LNK3"
                                }
                            }
                        })
                        Name (LNK0, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                        Name (LNK1, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                        Name (LNK2, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                        Name (LNK3, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                    }

                    If ((UAOE != Zero))
                    {
                        Device (UAOL)
                        {
                            Name (_ADR, 0x50000000)  // _ADR: Address
                            Name (_CID, Package (0x02)  // _CID: Compatible ID
                            {
                                "PRP00001", 
                                "PNP0A05" /* Generic Container Device */
                            })
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0B)
                            }

                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x03                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (CFAE (Arg3))
                                        }

                                    }
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-ctrl-count", 
                                        0x02
                                    }
                                }, 

                                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-descriptor-0", 
                                        "UAO0"
                                    }, 

                                    Package (0x02)
                                    {
                                        "uaol-descriptor-1", 
                                        "UAO1"
                                    }
                                }
                            })
                            Name (UAO0, Package (0x02)
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                Package (0x03)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-instance-number", 
                                        Zero
                                    }, 

                                    Package (0x02)
                                    {
                                        "bdf-routing-enabled", 
                                        Zero
                                    }, 

                                    Package (0x02)
                                    {
                                        "peer-integrated-controller-identifier", 
                                        0x98ED
                                    }
                                }
                            })
                            Name (UAO1, Package (0x02)
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                Package (0x03)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-instance-number", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "bdf-routing-enabled", 
                                        Zero
                                    }, 

                                    Package (0x02)
                                    {
                                        "peer-integrated-controller-identifier", 
                                        0xABCD
                                    }
                                }
                            })
                        }
                    }
                }

                Device (HECI)
                {
                    Name (_ADR, 0x00160000)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (CondRefOf (HIWC))
                        {
                            If (HIWC (Arg0))
                            {
                                If (CondRefOf (HIDW))
                                {
                                    Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (HEC3)
                {
                    Name (_ADR, 0x00160004)  // _ADR: Address
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Scope (_SB.PC00)
            {
                Device (ISHD)
                {
                    Name (_ADR, 0x00120000)  // _ADR: Address
                }
            }
        }

        If ((PCHS != 0x04))
        {
            Scope (_SB.PC00)
            {
                Method (SOD3, 3, Serialized)
                {
                    OperationRegion (ICB1, SystemMemory, (GPCB () + Arg0), 0x88)
                    If (Arg1)
                    {
                        Field (ICB1, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x84), 
                            PMEC,   8
                        }

                        PMEC = 0x03
                        PMEC |= Zero
                    }

                    If ((Arg1 && Arg2))
                    {
                        Field (ICB1, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        BAR0 = Zero
                    }
                }

                Device (I2C0)
                {
                    If ((IM00 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC00, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150000)
                    }
                }

                Device (I2C1)
                {
                    If ((IM01 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC01, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150001)
                    }
                }

                Device (I2C2)
                {
                    If ((IM02 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC02, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150002)
                    }
                }

                Device (I2C3)
                {
                    If ((IM03 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC03, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150003)
                    }
                }

                Device (I2C4)
                {
                    If ((IM04 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC04, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00190000)
                    }
                }

                Device (I2C5)
                {
                    If ((IM05 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC05, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00190001)
                    }
                }

                Scope (\_SB.PC00)
                {
                    Device (I3C0)
                    {
                        Name (I3CR, Package (0x38)
                        {
                            0xD0, 
                            0x00200002, 
                            0xD4, 
                            0x01010404, 
                            0x0214, 
                            0x00FA00FA, 
                            0x0218, 
                            0x00080008, 
                            0x021C, 
                            0x00FA00FA, 
                            0x0220, 
                            0x00640064, 
                            0x0224, 
                            0x032003AC, 
                            0x0228, 
                            0x20202020, 
                            0x022C, 
                            0x00030000, 
                            0x0230, 
                            0x00010000, 
                            0x0234, 
                            0x08, 
                            0x02BC, 
                            0x0800, 
                            0x02C0, 
                            0x0800, 
                            0x02C8, 
                            Zero, 
                            0x02CC, 
                            0x08, 
                            0x02D0, 
                            0x52, 
                            0x02D4, 
                            0x20442044, 
                            0x04D0, 
                            0x00200002, 
                            0x04D4, 
                            0x01010404, 
                            0x0614, 
                            0x00FA00FA, 
                            0x0618, 
                            0x00080008, 
                            0x061C, 
                            0x00FA00FA, 
                            0x0620, 
                            0x00640064, 
                            0x0624, 
                            0x032003AC, 
                            0x0628, 
                            0x20202020, 
                            0x062C, 
                            0x00030000, 
                            0x0630, 
                            0x00010000, 
                            0x0634, 
                            0x08
                        })
                        Name (_ADR, 0x00150004)  // _ADR: Address
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((Arg0 == ToUUID ("e59152de-bd93-4164-8a5e-2828fbd8b959") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (I3CR) /* \_SB_.PC00.I3C0.I3CR */
                                    }

                                }

                                Return (Buffer (0x08)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }

                            Return (Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            })
                        }

                        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                        {
                            Return (0x03)
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x8E, 0x04))
                                }
                            }

                            Return (GPRW (0x6D, 0x04))
                        }
                    }
                }

                Device (SPI0)
                {
                    If ((SM00 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC00, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0002)
                    }
                }

                Device (SPI1)
                {
                    If ((SM01 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC01, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0003)
                    }
                }

                Device (SPI2)
                {
                    If ((SM02 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC02, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00120006)
                    }
                }

                Method (UDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (UDMA, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (0x08)
                            {
                                 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            })
                        }
                        Case (One)
                        {
                            Return (ToInteger (Arg1))
                        }

                    }

                    Return (Buffer (0x08)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    })
                }
            }

            Scope (_SB)
            {
                Device (URSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_STA, 0x03)  // _STA: Status
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (UARB, 2, Serialized)
                    {
                        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x20)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64, 
                                BAR1,   64
                            }

                            Name (BUF1, ResourceTemplate ()
                            {
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000FF8,         // Address Length
                                    _Y31)
                            })
                            Name (BUF2, ResourceTemplate ()
                            {
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00001000,         // Address Length
                                    _Y32)
                            })
                            CreateDWordField (BUF1, \_SB.URSC.UARB._Y31._BAS, ADR1)  // _BAS: Base Address
                            CreateDWordField (BUF2, \_SB.URSC.UARB._Y32._BAS, ADR2)  // _BAS: Base Address
                            Local1 = (BAR0 & 0xFFFFFFFFFFFFF000)
                            ADR1 = (Local1 + 0x08)
                            ADR2 = (BAR1 & 0xFFFFFFFFFFFFF000)
                            ConcatenateResTemplate (BUF1, BUF2, Local0)
                            Return (Local0)
                        }

                        Return (Buffer (0x02)
                        {
                             0x79, 0x00                                       // y.
                        })
                    }

                    Name (URDA, Package (0x0A)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            Zero, 
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                }

                Method (URSA, 2, Serialized)
                {
                    Local0 = Zero
                    While ((Local0 < SizeOf (^URSC.URDA)))
                    {
                        Local1 = DerefOf (DerefOf (^URSC.URDA [Local0]) [Zero])
                        If ((Local1 == Arg0))
                        {
                            DerefOf (^URSC.URDA [Local0]) [One] = Arg1
                            Return (Zero)
                        }

                        Local0 += One
                    }

                    Local0 = Zero
                    While ((Local0 < SizeOf (^URSC.URDA)))
                    {
                        Local1 = DerefOf (DerefOf (^URSC.URDA [Local0]) [Zero])
                        If ((Local1 == Zero))
                        {
                            DerefOf (^URSC.URDA [Local0]) [Zero] = Arg0
                            DerefOf (^URSC.URDA [Local0]) [One] = Arg1
                            Return (Zero)
                        }

                        Local0 += One
                    }
                }

                Method (URRS, 1, Serialized)
                {
                    Local0 = Zero
                    While ((Local0 < SizeOf (^URSC.URDA)))
                    {
                        Local1 = DerefOf (DerefOf (^URSC.URDA [Local0]) [Zero])
                        If ((Local1 == Arg0))
                        {
                            Return (DerefOf (DerefOf (^URSC.URDA [Local0]) [One]))
                        }

                        Local0 += One
                    }

                    Return (Package (0x08)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                }

                Method (UARH, 2, Serialized)
                {
                    OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000008,         // Address Length
                            _Y33)
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y34)
                        {
                            0x00000014,
                        }
                    })
                    CreateDWordField (BUF0, \_SB.UARH._Y33._BAS, ADR0)  // _BAS: Base Address
                    CreateDWordField (IBUF, \_SB.UARH._Y34._INT, IRQN)  // _INT: Interrupts
                    Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                    ADR0 = Local0
                    IRQN = Arg1
                    ConcatenateResTemplate (BUF0, IBUF, Local1)
                    Return (Local1)
                }

                Method (UAPG, 3, Serialized)
                {
                    If ((Arg1 != 0x02))
                    {
                        Return (Arg1)
                    }

                    OperationRegion (UACF, SystemMemory, Arg2, 0x18)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x10)
                    Field (UAB0, ByteAcc, Lock, Preserve)
                    {
                        DLL,    8, 
                        DLH,    8, 
                        FCR,    8, 
                        LCR,    8
                    }

                    Local0 = LCR /* \_SB_.UAPG.LCR_ */
                    If ((Local0 && 0x7F))
                    {
                        Return (Zero)
                    }

                    Return (One)
                }

                Method (UHID, 1, Serialized)
                {
                    If ((Arg0 == 0x03))
                    {
                        Return (0x0105D041)
                    }

                    Return (0x020CD041)
                }

                Method (UPS3, 2, Serialized)
                {
                    Name (REGS, Package (0x08)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    If ((Arg0 == One))
                    {
                        OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        Field (UACF, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x84), 
                            PMEC,   8
                        }

                        OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                        Field (UAB0, ByteAcc, Lock, Preserve)
                        {
                            DLL,    8, 
                            DLH,    8, 
                            FCR,    8, 
                            LCR,    8, 
                            MCR,    8, 
                            Offset (0x81), 
                            PPRR,   8
                        }

                        Field (UAB0, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x80), 
                            PCLK,   32
                        }

                        Local1 = LCR /* \_SB_.UPS3.LCR_ */
                        LCR |= 0x80
                        REGS [Zero] = DLL /* \_SB_.UPS3.DLL_ */
                        REGS [One] = DLH /* \_SB_.UPS3.DLH_ */
                        LCR = Local1
                        REGS [0x02] = FCR /* \_SB_.UPS3.FCR_ */
                        REGS [0x03] = Local1
                        REGS [0x04] = MCR /* \_SB_.UPS3.MCR_ */
                        REGS [0x05] = PCLK /* \_SB_.UPS3.PCLK */
                        If (((DerefOf (REGS [0x05]) != Zero) && (
                            DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                        {
                            URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                        }

                        PPRR = Zero
                        PPRR |= Zero
                        PMEC = 0x03
                        PMEC |= Zero
                    }
                }

                Method (UPS0, 2, Serialized)
                {
                    If ((Arg0 == One))
                    {
                        OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        Field (UACF, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x84), 
                            PMEC,   8
                        }

                        OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                        Field (UAB0, ByteAcc, Lock, Preserve)
                        {
                            DLL,    8, 
                            DLH,    8, 
                            FCR,    8, 
                            LCR,    8, 
                            MCR,    8, 
                            Offset (0x81), 
                            PPRR,   8
                        }

                        Field (UAB0, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x80), 
                            PCLK,   32
                        }

                        PMEC = Zero
                        PMEC |= Zero
                        PPRR = 0x07
                        Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                        If (((DerefOf (Local0 [0x05]) != Zero) && (
                            DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                        {
                            LCR |= 0x80
                            DLL = DerefOf (Local0 [Zero])
                            DLH = DerefOf (Local0 [One])
                            LCR = DerefOf (Local0 [0x03])
                            FCR = DerefOf (Local0 [0x02])
                            MCR = DerefOf (Local0 [0x04])
                            Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                            PCLK = Local2
                            Local2 = (DerefOf (Local0 [0x05]) | One)
                            PCLK = Local2
                        }
                    }
                }

                Method (UPSC, 1, Serialized)
                {
                    OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                    Field (UACF, ByteAcc, NoLock, Preserve)
                    {
                        PMEC,   8
                    }

                    Return ((PMEC & 0x03))
                }
            }

            Scope (_SB.URSC)
            {
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Local0 = UARB (UM00, UC00)
                    ConcatenateResTemplate (Local0, UARB (UM01, UC01), Local1)
                    Local0 = Local1
                    ConcatenateResTemplate (Local0, UARB (UM02, UC02), Local1)
                    Local0 = Local1
                    Return (Local0)
                }
            }

            Scope (_SB.PC00)
            {
                Device (UA00)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD00))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0000)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC00, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }

            Scope (_SB)
            {
                If (((UM00 == 0x02) || (UM00 == 0x03)))
                {
                    Device (UAH0)
                    {
                        Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                        Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (UM00))
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (UC00, UI00))
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((UM00 == 0x03))
                            {
                                If ((UP00 == 0x02))
                                {
                                    UP00 = UAPG (UM00, UP00, UC00)
                                }

                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        If ((UM00 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (UC00))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (UP00, UC00)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (UP00, UC00)
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC00)
            {
                Device (UA01)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD01))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0001)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC01, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }

            Scope (_SB)
            {
                If (((UM01 == 0x02) || (UM01 == 0x03)))
                {
                    Device (UAH1)
                    {
                        Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                        Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (UM01))
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (UC01, UI01))
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((UM01 == 0x03))
                            {
                                If ((UP01 == 0x02))
                                {
                                    UP01 = UAPG (UM01, UP01, UC01)
                                }

                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        If ((UM01 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (UC01))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (UP01, UC01)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (UP01, UC01)
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC00)
            {
                Device (UA02)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD02))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00190002)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC02, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }

            Scope (_SB)
            {
                If (((UM02 == 0x02) || (UM02 == 0x03)))
                {
                    Device (UAH2)
                    {
                        Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                        Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (UM02))
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (UC02, UI02))
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((UM02 == 0x03))
                            {
                                If ((UP02 == 0x02))
                                {
                                    UP02 = UAPG (UM02, UP02, UC02)
                                }

                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        If ((UM02 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (UC02))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (UP02, UC02)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (UP02, UC02)
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC00)
            {
                If ((CRFP == One))
                {
                    If ((CWFC == One))
                    {
                        Device (CNVW)
                        {
                            Name (_ADR, 0x00140003)  // _ADR: Address
                            Name (PU2C, Zero)
                            PU2C = \PU2C
                            Method (BASE, 0, NotSerialized)
                            {
                                Local0 = PC2M (_ADR, Zero)
                                Return (Local0)
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                S023 (0x02, One)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                Local0 = PCRR (PCNV, 0x8100)
                                If (((Local0 & 0x7F) == 0x4C))
                                {
                                    S023 (0x02, Zero)
                                }
                            }

                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                If (CondRefOf (GP1E))
                                {
                                    If ((GP1E != Zero))
                                    {
                                        Return (GPRW (0x85, 0x04))
                                    }
                                }

                                Return (GPRW (0x6D, 0x04))
                            }

                            Name (RSTT, Zero)
                            Name (PRRS, Zero)
                            OperationRegion (CWAR, SystemMemory, BASE (), 0x0100)
                            Field (CWAR, WordAcc, NoLock, Preserve)
                            {
                                VDID,   32, 
                                Offset (0x44), 
                                    ,   28, 
                                WFLR,   1, 
                                Offset (0x48), 
                                    ,   15, 
                                WIFR,   1
                            }

                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                Return (0x03)
                            }

                            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                            {
                            }

                            PowerResource (WRST, 0x05, 0x0000)
                            {
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (One)
                                }

                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                }

                                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                                {
                                    Local0 = Acquire (CNMT, 0x03E8)
                                    If ((Local0 == Zero))
                                    {
                                        CFLR ()
                                        PRRS = One
                                        If ((CondRefOf (RSTT) && (RSTT == One)))
                                        {
                                            Local5 = ^^^SBSC.PCRR (PCNV, 0x80)
                                            If (((^^^SBSC.PCRR (PCNV, 0x80) & 0x02) == Zero))
                                            {
                                                If ((GBTR () == One))
                                                {
                                                    BTRK (Zero)
                                                    Sleep (0xA0)
                                                    Local2 = One
                                                }

                                                ^^^SBSC.PCRO (PCNV, 0x80, 0x03)
                                                Sleep (0x0A)
                                                Local1 = ^^^SBSC.PCRR (PCNV, 0x80)
                                                If ((((Local1 & 0x02) == Zero) && (Local1 & 0x04)))
                                                {
                                                    PRRS = 0x02
                                                    If ((Local2 == One))
                                                    {
                                                        BTRK (One)
                                                        Sleep (0xA0)
                                                    }
                                                }
                                                Else
                                                {
                                                    PRRS = 0x04
                                                    BTRK (One)
                                                }
                                            }
                                            Else
                                            {
                                                PRRS = 0x03
                                            }
                                        }

                                        Release (CNMT)
                                    }
                                }
                            }

                            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                            {
                                WRST
                            })
                            Method (CFLR, 0, NotSerialized)
                            {
                                If ((WFLR == One))
                                {
                                    WIFR = One
                                }
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC00)
            {
                Device (SAT0)
                {
                    Name (_ADR, 0x00170000)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If ((PCHS == PCHP))
                        {
                            If (!SCFD)
                            {
                                CSD0 (0x14)
                            }
                        }

                        ISAT = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        ISAT = One
                        If ((PCHS == PCHP))
                        {
                            CSD3 (0x14)
                        }
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((CondRefOf (SATC) && CondRefOf (SATD)))
                        {
                            If (SATC (Arg0))
                            {
                                Return (SATD (Arg0, Arg1, Arg2, Arg3))
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Device (PRT0)
                    {
                        Name (_ADR, 0xFFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & One))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT1)
                    {
                        Name (_ADR, 0x0001FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x02))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x0002FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x04))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x0003FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x08))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x0004FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x10))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x0005FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x20))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT6)
                    {
                        Name (_ADR, 0x0006FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x40))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT7)
                    {
                        Name (_ADR, 0x0007FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x80))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC00)
            {
                Method (TINT, 1, Serialized)
                {
                    Name (TINR, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (TINR, 0x17, INT1)
                    INT1 = GNUM (Arg0)
                    Return (TINR) /* \_SB_.PC00.TINT.TINR */
                }

                Device (THC0)
                {
                    Name (_ADR, 0x00100000)  // _ADR: Address
                    Name (RSTL, Zero)
                    OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                    Field (THCR, ByteAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    If ((VDID != 0xFFFFFFFF))
                    {
                        Name (ICRS, Buffer (0x0C){})
                        CreateWordField (ICRS, Zero, DADR)
                        CreateQWordField (ICRS, 0x02, DSPD)
                        CreateByteField (ICRS, 0x0A, DADM)
                        Name (ISUB, Buffer (0x91){})
                        CreateQWordField (ISUB, Zero, SMHX)
                        CreateQWordField (ISUB, 0x08, SMLX)
                        CreateQWordField (ISUB, 0x10, SMTD)
                        CreateQWordField (ISUB, 0x18, SMRD)
                        CreateQWordField (ISUB, 0x20, FMHX)
                        CreateQWordField (ISUB, 0x28, FMLX)
                        CreateQWordField (ISUB, 0x30, FMTD)
                        CreateQWordField (ISUB, 0x38, FMRD)
                        CreateQWordField (ISUB, 0x40, FMSL)
                        CreateQWordField (ISUB, 0x48, FPHX)
                        CreateQWordField (ISUB, 0x50, FPLX)
                        CreateQWordField (ISUB, 0x58, FPTD)
                        CreateQWordField (ISUB, 0x60, FPRD)
                        CreateQWordField (ISUB, 0x68, HMHX)
                        CreateQWordField (ISUB, 0x70, HMLX)
                        CreateQWordField (ISUB, 0x78, HMTD)
                        CreateQWordField (ISUB, 0x80, HMRD)
                        CreateQWordField (ISUB, 0x88, HMSL)
                        DADR = Zero
                        DSPD = Zero
                        DADM = Zero
                        SMHX = Zero
                        SMLX = Zero
                        SMTD = Zero
                        SMRD = Zero
                        FMHX = Zero
                        FMLX = Zero
                        FMTD = Zero
                        FMRD = Zero
                        FMSL = Zero
                        FPHX = Zero
                        FPLX = Zero
                        FPTD = Zero
                        FPRD = Zero
                        HMHX = Zero
                        HMLX = Zero
                        HMTD = Zero
                        HMRD = Zero
                        HMSL = Zero
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((TMD0 == One))
                            {
                                If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Switch (ToInteger (Arg1))
                                            {
                                                Case (0x02)
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x7F                                             // .
                                                    })
                                                }
                                                Default
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x00                                             // .
                                                    })
                                                }

                                            }
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T040))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T050))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T060))
                                        }
                                        Case (0x04)
                                        {
                                            Name (BUF4, Buffer (One){})
                                            Local0 = ToBuffer (T070)
                                            BUF4 [Zero] = DerefOf (Local0 [Zero])
                                            Return (BUF4) /* \_SB_.PC00.THC0._DSM.BUF4 */
                                        }
                                        Case (0x05)
                                        {
                                            Name (BUF5, Buffer (One){})
                                            Local1 = ToBuffer (T080)
                                            BUF5 [Zero] = DerefOf (Local1 [Zero])
                                            Return (BUF5) /* \_SB_.PC00.THC0._DSM.BUF5 */
                                        }
                                        Case (0x06)
                                        {
                                            Return (ToInteger (T090))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }

                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                                If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T030))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T0C0))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T0D0))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }
                                }
                            }

                            If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (ToInteger (T0A0))
                                    }
                                    Case (0x02)
                                    {
                                        Return (ToInteger (T0B0))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Zero)
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Zero)
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            Return (Buffer (Zero){})
                        }

                        If ((TIN0 != Zero))
                        {
                            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                If (CondRefOf (PINT))
                                {
                                    Return (PINT ())
                                }
                                Else
                                {
                                    Return (TINT (TIN0))
                                }
                            }
                        }

                        If ((TMD0 != Zero))
                        {
                            Method (_INI, 0, NotSerialized)  // _INI: Initialize
                            {
                                SHPO (T010, One)
                                SPMV (T010, Zero)
                                SPC0 (T010, (0x42000200 | (~(T020 & One) & One
                                    )))
                                If (CondRefOf (^CINI))
                                {
                                    CINI (T010, T0F0)
                                }
                            }

                            Method (_RST, 0, Serialized)  // _RST: Device Reset
                            {
                                While ((RSTL == One))
                                {
                                    Sleep (0x0A)
                                }

                                RSTL = One
                                SGOV (T010, (T020 & One))
                                Sleep (T0F0)
                                SGOV (T010, (~(T020 & One) & One))
                                RSTL = Zero
                            }

                            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                ICRS, 
                                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                                ISUB
                            })
                        }
                    }
                }

                Device (THC1)
                {
                    Name (_ADR, 0x00100001)  // _ADR: Address
                    Name (RSTL, Zero)
                    OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                    Field (THCR, ByteAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    If ((VDID != 0xFFFFFFFF))
                    {
                        Name (ICRS, Buffer (0x0C){})
                        CreateWordField (ICRS, Zero, DADR)
                        CreateQWordField (ICRS, 0x02, DSPD)
                        CreateByteField (ICRS, 0x0A, DADM)
                        Name (ISUB, Buffer (0x91){})
                        CreateQWordField (ISUB, Zero, SMHX)
                        CreateQWordField (ISUB, 0x08, SMLX)
                        CreateQWordField (ISUB, 0x10, SMTD)
                        CreateQWordField (ISUB, 0x18, SMRD)
                        CreateQWordField (ISUB, 0x20, FMHX)
                        CreateQWordField (ISUB, 0x28, FMLX)
                        CreateQWordField (ISUB, 0x30, FMTD)
                        CreateQWordField (ISUB, 0x38, FMRD)
                        CreateQWordField (ISUB, 0x40, FMSL)
                        CreateQWordField (ISUB, 0x48, FPHX)
                        CreateQWordField (ISUB, 0x50, FPLX)
                        CreateQWordField (ISUB, 0x58, FPTD)
                        CreateQWordField (ISUB, 0x60, FPRD)
                        CreateQWordField (ISUB, 0x68, HMHX)
                        CreateQWordField (ISUB, 0x70, HMLX)
                        CreateQWordField (ISUB, 0x78, HMTD)
                        CreateQWordField (ISUB, 0x80, HMRD)
                        CreateQWordField (ISUB, 0x88, HMSL)
                        DADR = Zero
                        DSPD = Zero
                        DADM = Zero
                        SMHX = Zero
                        SMLX = Zero
                        SMTD = Zero
                        SMRD = Zero
                        FMHX = Zero
                        FMLX = Zero
                        FMTD = Zero
                        FMRD = Zero
                        FMSL = Zero
                        FPHX = Zero
                        FPLX = Zero
                        FPTD = Zero
                        FPRD = Zero
                        HMHX = Zero
                        HMLX = Zero
                        HMTD = Zero
                        HMRD = Zero
                        HMSL = Zero
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((TMD1 == One))
                            {
                                If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Switch (ToInteger (Arg1))
                                            {
                                                Case (0x02)
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x7F                                             // .
                                                    })
                                                }
                                                Default
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x00                                             // .
                                                    })
                                                }

                                            }
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T041))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T051))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T061))
                                        }
                                        Case (0x04)
                                        {
                                            Name (BUF4, Buffer (One){})
                                            Local0 = ToBuffer (T071)
                                            BUF4 [Zero] = DerefOf (Local0 [Zero])
                                            Return (BUF4) /* \_SB_.PC00.THC1._DSM.BUF4 */
                                        }
                                        Case (0x05)
                                        {
                                            Name (BUF5, Buffer (One){})
                                            Local1 = ToBuffer (T081)
                                            BUF5 [Zero] = DerefOf (Local1 [Zero])
                                            Return (BUF5) /* \_SB_.PC00.THC1._DSM.BUF5 */
                                        }
                                        Case (0x06)
                                        {
                                            Return (ToInteger (T091))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }

                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                                If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T031))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T0C1))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T0D1))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }
                                }
                            }

                            If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (ToInteger (T0A1))
                                    }
                                    Case (0x02)
                                    {
                                        Return (ToInteger (T0B1))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Zero)
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Zero)
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            Return (Buffer (Zero){})
                        }

                        If ((TIN1 != Zero))
                        {
                            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                If (CondRefOf (PINT))
                                {
                                    Return (PINT ())
                                }
                                Else
                                {
                                    Return (TINT (TIN1))
                                }
                            }
                        }

                        If ((TMD1 != Zero))
                        {
                            Method (_INI, 0, NotSerialized)  // _INI: Initialize
                            {
                                SHPO (T011, One)
                                SPMV (T011, Zero)
                                SPC0 (T011, (0x42000200 | (~(T021 & One) & One
                                    )))
                                If (CondRefOf (^CINI))
                                {
                                    CINI (T011, T0F1)
                                }
                            }

                            Method (_RST, 0, Serialized)  // _RST: Device Reset
                            {
                                While ((RSTL == One))
                                {
                                    Sleep (0x0A)
                                }

                                RSTL = One
                                SGOV (T011, (T021 & One))
                                Sleep (T0F1)
                                SGOV (T011, (~(T021 & One) & One))
                                RSTL = Zero
                            }

                            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                ICRS, 
                                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                                ISUB
                            })
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Scope (\_SB.PC00)
            {
                If ((UF0E == One))
                {
                    Device (PUF0)
                    {
                        Name (_ADR, 0x00120007)  // _ADR: Address
                        Name (_DDN, "Intel(R) UFS Controller")  // _DDN: DOS Device Name
                    }
                }
            }
        }

        Scope (_SB)
        {
            Device (ICLK)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "SOCCLK")  // _UID: Unique ID
                OperationRegion (CKOR, SystemMemory, (SBRG + ((ICKP << 0x10) + 0x8000)), 0x40)
                Field (CKOR, AnyAcc, Lock, Preserve)
                {
                    CLK0,   8, 
                    Offset (0x0C), 
                    CLK1,   8, 
                    Offset (0x18), 
                    CLK2,   8, 
                    Offset (0x24), 
                    CLK3,   8, 
                    Offset (0x30), 
                    CLK4,   8, 
                    Offset (0x3C), 
                    CLK5,   8
                }

                Method (NCLK, 0, NotSerialized)
                {
                    Return (0x06)
                }

                Method (CLKC, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Local0 = CLK0 /* \_SB_.ICLK.CLK0 */
                            CLK0 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                        }
                        Case (One)
                        {
                            Local0 = CLK1 /* \_SB_.ICLK.CLK1 */
                            CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                        }
                        Case (0x02)
                        {
                            Local0 = CLK2 /* \_SB_.ICLK.CLK2 */
                            CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                        }
                        Case (0x03)
                        {
                            Local0 = CLK3 /* \_SB_.ICLK.CLK3 */
                            CLK3 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                        }
                        Case (0x04)
                        {
                            Local0 = CLK4 /* \_SB_.ICLK.CLK4 */
                            CLK4 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                        }
                        Case (0x05)
                        {
                            Local0 = CLK5 /* \_SB_.ICLK.CLK5 */
                            CLK5 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                        }

                    }
                }

                Method (CLKF, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Local0 = CLK0 /* \_SB_.ICLK.CLK0 */
                            CLK0 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                        }
                        Case (One)
                        {
                            Local0 = CLK1 /* \_SB_.ICLK.CLK1 */
                            CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                        }
                        Case (0x02)
                        {
                            Local0 = CLK2 /* \_SB_.ICLK.CLK2 */
                            CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                        }
                        Case (0x03)
                        {
                            Local0 = CLK3 /* \_SB_.ICLK.CLK3 */
                            CLK3 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                        }
                        Case (0x04)
                        {
                            Local0 = CLK4 /* \_SB_.ICLK.CLK4 */
                            CLK4 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                        }
                        Case (0x05)
                        {
                            Local0 = CLK5 /* \_SB_.ICLK.CLK5 */
                            CLK5 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                        }

                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x03)
                }

                Name (PID, 0x64)
                Method (CLKD, 1, NotSerialized)
                {
                    ^^PC00.SBSC.PCRA (PID, 0x8080, ~(One << Arg0))
                }

                Method (CLKE, 1, NotSerialized)
                {
                    ^^PC00.SBSC.PCRO (PID, 0x8080, (One << Arg0))
                }
            }

            Device (ECLK)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "IOECLK")  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x03)
                }

                Name (PID, 0x64)
                Method (CLKD, 1, NotSerialized)
                {
                    ^^PC00.SBIE.PCRA (PID, 0x8080, ~(One << Arg0))
                }

                Method (CLKE, 1, NotSerialized)
                {
                    ^^PC00.SBIE.PCRO (PID, 0x8080, (One << Arg0))
                }
            }
        }

        Scope (\)
        {
            Method (SPCO, 2, Serialized)
            {
                If ((PCHS == 0x04))
                {
                    If ((Arg1 == One))
                    {
                        If ((Arg0 > 0x03))
                        {
                            \_SB.ECLK.CLKE ((Arg0 - 0x04))
                        }
                        Else
                        {
                            \_SB.ICLK.CLKE (Arg0)
                        }
                    }
                    ElseIf ((Arg0 > 0x03))
                    {
                        \_SB.ECLK.CLKD ((Arg0 - 0x04))
                    }
                    Else
                    {
                        \_SB.ICLK.CLKD (Arg0)
                    }
                }
                ElseIf ((Arg1 == One))
                {
                    If ((Arg0 > 0x05))
                    {
                        \_SB.ECLK.CLKE ((Arg0 - 0x06))
                    }
                    Else
                    {
                        \_SB.ICLK.CLKE (Arg0)
                    }
                }
                ElseIf ((Arg0 > 0x05))
                {
                    \_SB.ECLK.CLKD ((Arg0 - 0x06))
                }
                Else
                {
                    \_SB.ICLK.CLKD (Arg0)
                }
            }

            Method (HBCM, 2, Serialized)
            {
            }
        }

        Scope (_SB)
        {
            Device (GPI0)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((GPHD == One))
                    {
                        Return ("PNP0C02")
                    }

                    If ((PCHS == 0x04))
                    {
                        Return ("INTC1082")
                    }
                    ElseIf ((ARLM == One))
                    {
                        Return ("INTC105E")
                    }
                    Else
                    {
                        Return ("INTC1083")
                    }
                }

                Name (LINK, "\\_SB.GPI0")
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBPS, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y35)
                        {
                            0x0000000E,
                        }
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y36)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y37)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y38)
                    })
                    CreateDWordField (RBPS, \_SB.GPI0._CRS._Y35._INT, INTH)  // _INT: Interrupts
                    INTH = SGIR /* \SGIR */
                    CreateDWordField (RBPS, \_SB.GPI0._CRS._Y36._BAS, CMH0)  // _BAS: Base Address
                    CMH0 = (SBRG + 0x00D10000)
                    CreateDWordField (RBPS, \_SB.GPI0._CRS._Y37._BAS, CMH1)  // _BAS: Base Address
                    CMH1 = (SBRG + 0x00D20000)
                    CreateDWordField (RBPS, \_SB.GPI0._CRS._Y38._BAS, CMH3)  // _BAS: Base Address
                    CMH3 = (SBRG + 0x00D30000)
                    If ((PCHS != 0x04))
                    {
                        Name (RBFS, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00010000,         // Address Length
                                _Y39)
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00010000,         // Address Length
                                _Y3A)
                        })
                        CreateDWordField (RBFS, \_SB.GPI0._CRS._Y39._BAS, CMH4)  // _BAS: Base Address
                        CMH4 = (SBRG + 0x00D40000)
                        CreateDWordField (RBFS, \_SB.GPI0._CRS._Y3A._BAS, CMH5)  // _BAS: Base Address
                        CMH5 = (SBRG + 0x00D50000)
                        ConcatenateResTemplate (RBPS, RBFS, Local0)
                        Return (Local0)
                    }

                    Return (RBPS) /* \_SB_.GPI0._CRS.RBPS */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((GPHD == One))
                    {
                        Return (0x08)
                    }

                    Return (0x0F)
                }
            }
        }

        Scope (_SB)
        {
            Name (GPCM, Package (0x05)
            {
                Package (0x02)
                {
                    0x00D10000, 
                    Package (0x03)
                    {
                        Package (0x09)
                        {
                            0x05, 
                            0x0600, 
                            0x0140, 
                            0xB0, 
                            0x0230, 
                            0x0110, 
                            0x0114, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x09)
                        {
                            0x18, 
                            0x0650, 
                            0x0144, 
                            0xB4, 
                            0x0234, 
                            0x0118, 
                            0x011C, 
                            0x20, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x18, 
                            0x07D0, 
                            0x0148, 
                            0xC0, 
                            0x0238, 
                            0x0120, 
                            0x0124, 
                            0x40, 
                            0x02
                        }
                    }
                }, 

                Package (0x02)
                {
                    0x00D20000, 
                    Package (0x02)
                    {
                        Package (0x09)
                        {
                            0x19, 
                            0x0600, 
                            0x0140, 
                            0xB0, 
                            0x0230, 
                            0x0110, 
                            0x0114, 
                            0x60, 
                            0x03
                        }, 

                        Package (0x09)
                        {
                            0x19, 
                            0x0790, 
                            0x0144, 
                            0xC0, 
                            0x0234, 
                            0x0118, 
                            0x011C, 
                            0x80, 
                            0x04
                        }
                    }
                }, 

                Package (0x02)
                {
                    0x00D30000, 
                    Package (0x04)
                    {
                        Package (0x09)
                        {
                            0x1A, 
                            0x0600, 
                            0x0140, 
                            0xB0, 
                            0x0230, 
                            0x0110, 
                            0x0114, 
                            0xA0, 
                            0x05
                        }, 

                        Package (0x09)
                        {
                            0x1A, 
                            0x07A0, 
                            0x0144, 
                            0xC0, 
                            0x0234, 
                            0x0118, 
                            0x011C, 
                            0xC0, 
                            0x06
                        }, 

                        Package (0x09)
                        {
                            0x0F, 
                            0x0940, 
                            0x0148, 
                            0xD0, 
                            0x0238, 
                            0x0120, 
                            0x0124, 
                            0xE0, 
                            0x07
                        }, 

                        Package (0x09)
                        {
                            0x0E, 
                            0x0A30, 
                            0x014C, 
                            0xD8, 
                            0x023C, 
                            0x0128, 
                            0x012C, 
                            0x0100, 
                            0x08
                        }
                    }
                }, 

                Package (0x02)
                {
                    0x00D40000, 
                    Package (0x02)
                    {
                        Package (0x09)
                        {
                            0x08, 
                            0x0600, 
                            0x0140, 
                            0xB0, 
                            0x0230, 
                            0x0110, 
                            0x0114, 
                            0x0120, 
                            0x09
                        }, 

                        Package (0x09)
                        {
                            0x0C, 
                            0x0680, 
                            0x0144, 
                            0xB4, 
                            0x0234, 
                            0x0118, 
                            0x011C, 
                            0x0140, 
                            0x0A
                        }
                    }
                }, 

                Package (0x02)
                {
                    0x00D50000, 
                    Package (0x03)
                    {
                        Package (0x09)
                        {
                            0x19, 
                            0x0600, 
                            0x0140, 
                            0xB0, 
                            0x0230, 
                            0x0110, 
                            0x0114, 
                            0x0160, 
                            0x0B
                        }, 

                        Package (0x09)
                        {
                            0x19, 
                            0x0790, 
                            0x0144, 
                            0xC0, 
                            0x0234, 
                            0x0118, 
                            0x011C, 
                            0x0180, 
                            0x0C
                        }, 

                        Package (0x09)
                        {
                            0x23, 
                            0x0920, 
                            0x0148, 
                            0xD0, 
                            0x0238, 
                            0x0120, 
                            0x0124, 
                            0x01A0, 
                            0x0D
                        }
                    }
                }
            })
            Name (GPCS, Package (0x03)
            {
                Package (0x02)
                {
                    0x00D10000, 
                    Package (0x03)
                    {
                        Package (0x09)
                        {
                            0x1C, 
                            0x0600, 
                            0x0110, 
                            0xB0, 
                            0x0220, 
                            0xF0, 
                            0xF4, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x09)
                        {
                            0x06, 
                            0x07C0, 
                            0x0114, 
                            0xC0, 
                            0x0224, 
                            0xF8, 
                            0xFC, 
                            0x20, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x1B, 
                            0x08E0, 
                            0x0118, 
                            0xCC, 
                            0x0228, 
                            0x0100, 
                            0x0104, 
                            0x40, 
                            0x02
                        }
                    }
                }, 

                Package (0x02)
                {
                    0x00D20000, 
                    Package (0x03)
                    {
                        Package (0x09)
                        {
                            0x14, 
                            0x0600, 
                            0x0110, 
                            0xB0, 
                            0x0220, 
                            0xF0, 
                            0xF4, 
                            0x60, 
                            0x03
                        }, 

                        Package (0x09)
                        {
                            0x07, 
                            0x0740, 
                            0x0114, 
                            0xBC, 
                            0x0224, 
                            0xF8, 
                            0xFC, 
                            0x80, 
                            0x04
                        }, 

                        Package (0x09)
                        {
                            0x18, 
                            0x0760, 
                            0x0118, 
                            0xC0, 
                            0x0228, 
                            0x0100, 
                            0x0104, 
                            0xA0, 
                            0x05
                        }
                    }
                }, 

                Package (0x02)
                {
                    0x00D30000, 
                    Package (0x02)
                    {
                        Package (0x09)
                        {
                            0x10, 
                            0x0600, 
                            0x0110, 
                            0xB0, 
                            0x0220, 
                            0xF0, 
                            0xF4, 
                            0xC0, 
                            0x06
                        }, 

                        Package (0x09)
                        {
                            0x02, 
                            0x0700, 
                            0x0114, 
                            0xB8, 
                            0x0224, 
                            0xF8, 
                            0xFC, 
                            0xE0, 
                            0x07
                        }
                    }
                }
            })
        }

        Scope (_SB)
        {
            Method (GDSC, 0, NotSerialized)
            {
                If ((PCHS == 0x04))
                {
                    Return (GPCS) /* \_SB_.GPCS */
                }
                Else
                {
                    Return (GPCM) /* \_SB_.GPCM */
                }
            }

            Method (GMXG, 0, NotSerialized)
            {
                If ((PCHS == 0x04))
                {
                    Return (0x08)
                }
                Else
                {
                    Return (0x0E)
                }
            }

            Method (GCMP, 1, NotSerialized)
            {
                Local0 = GDSC ()
                Return (DerefOf (DerefOf (Local0 [Arg0]) [Zero]))
            }

            Method (GINF, 3, NotSerialized)
            {
                Local0 = GDSC ()
                Return (DerefOf (DerefOf (DerefOf (DerefOf (Local0 [Arg0]) [
                    One]) [Arg1]) [Arg2]))
            }

            Method (GCOM, 1, Serialized)
            {
                Local0 = ((Arg0 >> 0x0A) & 0x07)
                Return (Local0)
            }

            Method (GGRP, 1, Serialized)
            {
                Local0 = ((Arg0 >> 0x07) & 0x07)
                Return (Local0)
            }

            Method (GNMB, 1, Serialized)
            {
                Return ((Arg0 & 0x7F))
            }

            Method (GADR, 2, NotSerialized)
            {
                Local2 = GGRP (Arg0)
                Local3 = GCOM (Arg0)
                Local0 = (GCMP (Local3) + SBRG)
                Local1 = GINF (Local3, Local2, Arg1)
                Return ((Local0 + Local1))
            }

            Method (GNUM, 1, NotSerialized)
            {
                Local0 = GNMB (Arg0)
                Local1 = GGRP (Arg0)
                Local2 = GCOM (Arg0)
                Return ((GINF (Local2, Local1, 0x07) + Local0))
            }

            Method (GGGP, 1, NotSerialized)
            {
                Local0 = GGRP (Arg0)
                Local1 = GCOM (Arg0)
                Return (GINF (Local1, Local0, 0x08))
            }

            Method (INUM, 1, NotSerialized)
            {
                Return ((GPC1 (Arg0) & 0x7F))
            }

            Method (GGPE, 1, NotSerialized)
            {
                Local0 = GGGP (Arg0)
                Local1 = GNMB (Arg0)
                Local2 = (Local1 >> 0x05)
                If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                    (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                    Local2))))
                {
                    Return (0x6F)
                }
                Else
                {
                    If (((GEI0 == Local0) && (GED0 == Local2)))
                    {
                        Local3 = Zero
                    }
                    ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                    {
                        Local3 = One
                    }
                    ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                    {
                        Local3 = 0x02
                    }
                    Else
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    Return ((((Local3 - Local2) * 0x20) + Local1))
                }
            }

            Method (GPC0, 1, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                Return (TEMP) /* \_SB_.GPC0.TEMP */
            }

            Method (SPC0, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                TEMP = Arg1
            }

            Method (GPC1, 1, Serialized)
            {
                Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                    ) + 0x04)
                OperationRegion (PDW1, SystemMemory, Local2, 0x04)
                Field (PDW1, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                Return (TEMP) /* \_SB_.GPC1.TEMP */
            }

            Method (SPC1, 2, Serialized)
            {
                Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                    ) + 0x04)
                OperationRegion (PDW1, SystemMemory, Local2, 0x04)
                Field (PDW1, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                TEMP = Arg1
            }

            Method (SRXO, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   28, 
                    TEMP,   1, 
                    Offset (0x04)
                }

                TEMP = Arg1
            }

            Method (GGIV, 1, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   1, 
                    TEMP,   1, 
                    Offset (0x04)
                }

                Return (TEMP) /* \_SB_.GGIV.TEMP */
            }

            Method (GGOV, 1, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   1, 
                    Offset (0x04)
                }

                Return (TEMP) /* \_SB_.GGOV.TEMP */
            }

            Method (SGOV, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   1, 
                    Offset (0x04)
                }

                TEMP = Arg1
            }

            Method (GGII, 1, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   23, 
                    TEMP,   1, 
                    Offset (0x04)
                }

                Return (TEMP) /* \_SB_.GGII.TEMP */
            }

            Method (SGII, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   23, 
                    TEMP,   1, 
                    Offset (0x04)
                }

                TEMP = Arg1
            }

            Method (GPMV, 1, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   10, 
                    TEMP,   3, 
                    Offset (0x04)
                }

                Return (TEMP) /* \_SB_.GPMV.TEMP */
            }

            Method (SPMV, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   10, 
                    TEMP,   3, 
                    Offset (0x04)
                }

                TEMP = Arg1
            }

            Method (GHPO, 1, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
                Local4 = (Local1 & 0x1F)
                OperationRegion (PREG, SystemMemory, Local3, 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                Return (((TEMP >> Local4) & One))
            }

            Method (SHPO, 2, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
                Local4 = (Local1 & 0x1F)
                OperationRegion (PREG, SystemMemory, Local3, 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                If (Arg1)
                {
                    TEMP |= (One << Local4)
                }
                Else
                {
                    TEMP &= ~(One << Local4)
                }
            }

            Method (GGPO, 1, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local2 = (GADR (Arg0, 0x03) + ((Local1 >> 0x03) * 0x04
                    ))
                OperationRegion (PREG, SystemMemory, Local2, 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                    0x03))
            }

            Method (SGRA, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   20, 
                    TEMP,   1, 
                    Offset (0x04)
                }

                TEMP = Arg1
            }

            Method (SGWP, 2, Serialized)
            {
                Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                    ) + 0x04)
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   10, 
                    TEMP,   4, 
                    Offset (0x04)
                }

                TEMP = Arg1
            }

            Method (CGPI, 1, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local4 = (Local1 >> 0x05)
                Local3 = GADR (Arg0, 0x04)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }

            Method (CAGS, 1, Serialized)
            {
                Local0 = GGGP (Arg0)
                Local1 = GNMB (Arg0)
                Local4 = (Local1 >> 0x05)
                If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                    (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                    Local4))))
                {
                    Local3 = GADR (Arg0, 0x04)
                    If (((Local3 & 0xFFFF) != 0xFFFF))
                    {
                        OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                        Field (GPPX, AnyAcc, NoLock, Preserve)
                        {
                            STSX,   32
                        }

                        Local2 = (One << (Local1 % 0x20))
                        STSX = Local2
                    }
                }
            }

            Method (IGPI, 1, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local4 = (Local1 >> 0x05)
                If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
                Local3 = (Local1 & 0x1F)
                OperationRegion (GPPX, SystemMemory, Local2, 0x24)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32, 
                    Offset (0x20), 
                    GENX,   32
                }

                Return ((((STSX & GENX) >> Local3) & One))
            }

            Method (ISME, 1, Serialized)
            {
                Local0 = GGGP (Arg0)
                Local1 = GNMB (Arg0)
                Local4 = (Local1 >> 0x05)
                If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                    ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                    GED2 == Local4))))
                {
                    Return (Zero)
                }

                If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
                Local3 = (Local1 & 0x1F)
                OperationRegion (GPPX, SystemMemory, Local2, 0x24)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32, 
                    Offset (0x20), 
                    GENX,   32
                }

                Return ((((STSX & GENX) >> Local3) & One))
            }

            Method (GRXE, 2, Serialized)
            {
                Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                Field (PDW0, AnyAcc, NoLock, Preserve)
                {
                        ,   25, 
                    RCFG,   2, 
                    Offset (0x04)
                }

                RCFG = Arg1
            }

            Method (GLOC, 2, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local2 = GADR (Arg0, 0x05)
                OperationRegion (PREG, SystemMemory, Local2, 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                Return (((TEMP >> Local1) & One))
            }

            Method (GLOT, 2, Serialized)
            {
                Local1 = GNMB (Arg0)
                Local2 = GADR (Arg0, 0x06)
                OperationRegion (PREG, SystemMemory, Local2, 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   32
                }

                Return (((TEMP >> Local1) & One))
            }
        }

        Scope (_SB.PC00)
        {
            Device (SBSC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "SOCP2SB")  // _UID: Unique ID
                Name (_STA, 0x08)  // _STA: Status
                Name (SBRG, Zero)
                SBRG = \SBRG
                Method (PCRR, 2, Serialized)
                {
                    Local1 = (Arg1 & 0xFFFF)
                    Local2 = ((Arg1 & 0x000F0000) << 0x08)
                    Local0 = ((Arg0 << 0x10) + Local1)
                    Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBSC.SBRG */
                    OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                    Field (PCR0, DWordAcc, Lock, Preserve)
                    {
                        DAT0,   32
                    }

                    Return (DAT0) /* \_SB_.PC00.SBSC.PCRR.DAT0 */
                }

                Method (PCRW, 3, Serialized)
                {
                    Local1 = (Arg1 & 0xFFFF)
                    Local2 = ((Arg1 & 0x000F0000) << 0x08)
                    Local0 = ((Arg0 << 0x10) + Local1)
                    Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBSC.SBRG */
                    OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                    Field (PCR0, DWordAcc, Lock, Preserve)
                    {
                        DAT0,   32
                    }

                    DAT0 = Arg2
                }

                Method (PCRO, 3, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = (Local0 | Arg2)
                    PCRW (Arg0, Arg1, Local1)
                }

                Method (PCRA, 3, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = (Local0 & Arg2)
                    PCRW (Arg0, Arg1, Local1)
                }

                Method (PCAO, 4, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = ((Local0 & Arg2) | Arg3)
                    PCRW (Arg0, Arg1, Local1)
                }
            }

            Device (SBIE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "IOEP2SB")  // _UID: Unique ID
                Name (_STA, 0x08)  // _STA: Status
                Name (SBRG, 0x000003FFF0000000)
                Method (PCRR, 2, Serialized)
                {
                    Local1 = (Arg1 & 0xFFFF)
                    Local2 = ((Arg1 & 0x000F0000) << 0x08)
                    Local0 = ((Arg0 << 0x10) + Local1)
                    Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBIE.SBRG */
                    OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                    Field (PCR0, DWordAcc, Lock, Preserve)
                    {
                        DAT0,   32
                    }

                    Return (DAT0) /* \_SB_.PC00.SBIE.PCRR.DAT0 */
                }

                Method (PCRW, 3, Serialized)
                {
                    Local1 = (Arg1 & 0xFFFF)
                    Local2 = ((Arg1 & 0x000F0000) << 0x08)
                    Local0 = ((Arg0 << 0x10) + Local1)
                    Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBIE.SBRG */
                    OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                    Field (PCR0, DWordAcc, Lock, Preserve)
                    {
                        DAT0,   32
                    }

                    DAT0 = Arg2
                }

                Method (PCRO, 3, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = (Local0 | Arg2)
                    PCRW (Arg0, Arg1, Local1)
                }

                Method (PCRA, 3, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = (Local0 & Arg2)
                    PCRW (Arg0, Arg1, Local1)
                }

                Method (PCAO, 4, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = ((Local0 & Arg2) | Arg3)
                    PCRW (Arg0, Arg1, Local1)
                }
            }
        }

        Scope (\)
        {
            Method (PCRR, 2, Serialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local2 = ((Arg1 & 0x000F0000) << 0x08)
                Local0 = ((Arg0 << 0x10) + Local1)
                Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
                OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                Field (PCR0, DWordAcc, Lock, Preserve)
                {
                    DAT0,   32
                }

                Return (DAT0) /* \PCRR.DAT0 */
            }

            Method (PCRW, 3, Serialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local2 = ((Arg1 & 0x000F0000) << 0x08)
                Local0 = ((Arg0 << 0x10) + Local1)
                Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
                OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                Field (PCR0, DWordAcc, Lock, Preserve)
                {
                    DAT0,   32
                }

                DAT0 = Arg2
            }

            Method (PCRO, 3, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = (Local0 | Arg2)
                PCRW (Arg0, Arg1, Local1)
            }

            Method (PCRA, 3, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = (Local0 & Arg2)
                PCRW (Arg0, Arg1, Local1)
            }

            Method (PCAO, 4, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = ((Local0 & Arg2) | Arg3)
                PCRW (Arg0, Arg1, Local1)
            }
        }

        If ((PCHA != Zero))
        {
            Name (MNVB, 0xFFFF0000)
            Name (MNVL, 0xAA55)
            Scope (_SB.PC02)
            {
                OperationRegion (MTNV, SystemMemory, MNVB, MNVL)
                Field (MTNV, AnyAcc, Lock, Preserve)
                {
                    PWRM,   32, 
                    ABAS,   16, 
                    SBRG,   64, 
                    PU2C,   8, 
                    PU3C,   8, 
                    GBES,   8, 
                    NHAA,   64, 
                    NHLL,   32, 
                    ADFM,   32, 
                    SWQ0,   8, 
                    SWQ1,   8, 
                    SWQ2,   8, 
                    SWQ3,   8, 
                    ACS0,   8, 
                    ACS1,   8, 
                    ACS2,   8, 
                    ACS3,   8, 
                    DAI0,   8, 
                    DAI1,   8, 
                    DAI2,   8, 
                    DAI3,   8, 
                    DOD0,   8, 
                    DOD1,   8, 
                    DOD2,   8, 
                    DOD3,   8, 
                    HDBO,   16, 
                    SWMC,   8, 
                    XTAL,   32, 
                    RPA1,   32, 
                    RPA2,   32, 
                    RPA3,   32, 
                    RPA4,   32, 
                    RPA5,   32, 
                    RPA6,   32, 
                    RPA7,   32, 
                    RPA8,   32, 
                    RPA9,   32, 
                    RPAA,   32, 
                    RPAB,   32, 
                    RPAC,   32, 
                    RPAD,   32, 
                    RPAE,   32, 
                    RPAF,   32, 
                    RPAG,   32, 
                    RPAH,   32, 
                    RPAI,   32, 
                    RPAJ,   32, 
                    RPAK,   32, 
                    RPAL,   32, 
                    RPAM,   32, 
                    RPAN,   32, 
                    RPAO,   32, 
                    PML1,   16, 
                    PML2,   16, 
                    PML3,   16, 
                    PML4,   16, 
                    PML5,   16, 
                    PML6,   16, 
                    PML7,   16, 
                    PML8,   16, 
                    PML9,   16, 
                    PMLA,   16, 
                    PMLB,   16, 
                    PMLC,   16, 
                    PMLD,   16, 
                    PMLE,   16, 
                    PMLF,   16, 
                    PMLG,   16, 
                    PMLH,   16, 
                    PMLI,   16, 
                    PMLJ,   16, 
                    PMLK,   16, 
                    PMLL,   16, 
                    PMLM,   16, 
                    PMLN,   16, 
                    PMLO,   16, 
                    PNL1,   16, 
                    PNL2,   16, 
                    PNL3,   16, 
                    PNL4,   16, 
                    PNL5,   16, 
                    PNL6,   16, 
                    PNL7,   16, 
                    PNL8,   16, 
                    PNL9,   16, 
                    PNLA,   16, 
                    PNLB,   16, 
                    PNLC,   16, 
                    PNLD,   16, 
                    PNLE,   16, 
                    PNLF,   16, 
                    PNLG,   16, 
                    PNLH,   16, 
                    PNLI,   16, 
                    PNLJ,   16, 
                    PNLK,   16, 
                    PNLL,   16, 
                    PNLM,   16, 
                    PNLN,   16, 
                    PNLO,   16, 
                    TIN0,   32, 
                    TIN1,   32, 
                    TMD0,   16, 
                    TMD1,   16, 
                    UF0E,   8, 
                    UF1E,   8, 
                    UAOE,   8, 
                    T010,   32, 
                    T011,   32, 
                    T020,   8, 
                    T021,   8, 
                    T030,   32, 
                    T031,   32, 
                    T040,   32, 
                    T041,   32, 
                    T050,   32, 
                    T051,   32, 
                    T060,   32, 
                    T061,   32, 
                    T070,   32, 
                    T071,   32, 
                    T080,   32, 
                    T081,   32, 
                    T090,   32, 
                    T091,   32, 
                    T0A0,   32, 
                    T0A1,   32, 
                    T0B0,   32, 
                    T0B1,   32, 
                    T0C0,   32, 
                    T0C1,   32, 
                    T0D0,   32, 
                    T0D1,   32, 
                    T0E0,   32, 
                    T0E1,   32, 
                    T0F0,   32, 
                    T0F1,   32, 
                    SM00,   8, 
                    SM01,   8, 
                    SM02,   8, 
                    SM03,   8, 
                    SC00,   64, 
                    SC01,   64, 
                    SC02,   64, 
                    SC03,   64, 
                    IM00,   8, 
                    IM01,   8, 
                    IM02,   8, 
                    IM03,   8, 
                    IM04,   8, 
                    IM05,   8, 
                    IC00,   64, 
                    IC01,   64, 
                    IC02,   64, 
                    IC03,   64, 
                    IC04,   64, 
                    IC05,   64, 
                    UM00,   8, 
                    UM01,   8, 
                    UM02,   8, 
                    UM03,   8, 
                    UC00,   64, 
                    UC01,   64, 
                    UC02,   64, 
                    UC03,   64, 
                    UD00,   8, 
                    UD01,   8, 
                    UD02,   8, 
                    UD03,   8, 
                    UP00,   8, 
                    UP01,   8, 
                    UP02,   8, 
                    UP03,   8, 
                    UI00,   8, 
                    UI01,   8, 
                    UI02,   8, 
                    UI03,   8, 
                    PCNV,   16, 
                    GEI0,   8, 
                    GEI1,   8, 
                    GEI2,   8, 
                    GED0,   8, 
                    GED1,   8, 
                    GED2,   8
                }

                Device (SBPC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, "PCHP2SB")  // _UID: Unique ID
                    Name (_STA, 0x08)  // _STA: Status
                    Name (SBRG, Zero)
                    SBRG = ^SBRG /* \_SB_.PC02.SBRG */
                    Method (PCRR, 2, Serialized)
                    {
                        Local1 = (Arg1 & 0xFFFF)
                        Local2 = ((Arg1 & 0x000F0000) << 0x08)
                        Local0 = ((Arg0 << 0x10) + Local1)
                        Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC02.SBPC.SBRG */
                        OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                        Field (PCR0, DWordAcc, Lock, Preserve)
                        {
                            DAT0,   32
                        }

                        Return (DAT0) /* \_SB_.PC02.SBPC.PCRR.DAT0 */
                    }

                    Method (PCRW, 3, Serialized)
                    {
                        Local1 = (Arg1 & 0xFFFF)
                        Local2 = ((Arg1 & 0x000F0000) << 0x08)
                        Local0 = ((Arg0 << 0x10) + Local1)
                        Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC02.SBPC.SBRG */
                        OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                        Field (PCR0, DWordAcc, Lock, Preserve)
                        {
                            DAT0,   32
                        }

                        DAT0 = Arg2
                    }

                    Method (PCRO, 3, Serialized)
                    {
                        Local0 = PCRR (Arg0, Arg1)
                        Local1 = (Local0 | Arg2)
                        PCRW (Arg0, Arg1, Local1)
                    }

                    Method (PCRA, 3, Serialized)
                    {
                        Local0 = PCRR (Arg0, Arg1)
                        Local1 = (Local0 & Arg2)
                        PCRW (Arg0, Arg1, Local1)
                    }

                    Method (PCAO, 4, Serialized)
                    {
                        Local0 = PCRR (Arg0, Arg1)
                        Local1 = ((Local0 & Arg2) | Arg3)
                        PCRW (Arg0, Arg1, Local1)
                    }
                }

                Device (PPMC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, "MTPPMC")  // _UID: Unique ID
                    Name (_STA, 0x08)  // _STA: Status
                    Method (IPCS, 7, Serialized)
                    {
                        Name (RPKG, Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If ((Arg2 > 0x10))
                        {
                            RPKG [Zero] = One
                            Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                        }

                        IWB0 = Arg3
                        IWB1 = Arg4
                        IWB2 = Arg5
                        IWB3 = Arg6
                        Local0 = Zero
                        Local0 += (Arg0 << Zero)
                        Local0 += (Arg1 << 0x0C)
                        Local0 += (Arg2 << 0x10)
                        CMDR = Local0
                        Local0 = Zero
                        While (One)
                        {
                            If ((!IBSY || (IERR == One)))
                            {
                                Break
                            }

                            If ((Local0 > 0x0A))
                            {
                                RPKG [Zero] = 0x03
                                Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                            }

                            Sleep (One)
                            Local0++
                        }

                        If ((IERR == One))
                        {
                            RPKG [Zero] = 0x02
                            Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                        }

                        RPKG [One] = IRB0 /* \_SB_.PC02.PPMC.IRB0 */
                        RPKG [0x02] = IRB1 /* \_SB_.PC02.PPMC.IRB1 */
                        RPKG [0x03] = IRB2 /* \_SB_.PC02.PPMC.IRB2 */
                        RPKG [0x04] = IRB3 /* \_SB_.PC02.PPMC.IRB3 */
                        Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                    }

                    Method (ULTR, 1, Serialized)
                    {
                        LTRU = Arg0
                    }

                    OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
                    Field (PWMR, DWordAcc, NoLock, Preserve)
                    {
                        CMDR,   32, 
                        IBSY,   1, 
                        IERR,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x05), 
                        Offset (0x06), 
                        IERC,   8, 
                        Offset (0x08), 
                        Offset (0x80), 
                        IWB0,   32, 
                        IWB1,   32, 
                        IWB2,   32, 
                        IWB3,   32, 
                        IRB0,   32, 
                        IRB1,   32, 
                        IRB2,   32, 
                        IRB3,   32, 
                        Offset (0x10D0), 
                        RAA0,   1, 
                        RAA1,   1, 
                        RAA2,   1, 
                        RAA3,   1, 
                        RPB0,   1, 
                        RPB1,   1, 
                        RPB2,   1, 
                        RPB3,   1, 
                        RPC0,   1, 
                        RPC1,   1, 
                        RPC2,   1, 
                        RPC3,   1, 
                        RSAT,   1, 
                        RGBE,   1, 
                        RXHC,   1, 
                        RXDC,   1, 
                        RUFS,   1, 
                        RPD0,   1, 
                        RPD1,   1, 
                        RPD2,   1, 
                        RPD3,   1, 
                        RPE0,   1, 
                        RPE1,   1, 
                        RPE2,   1, 
                        RPE3,   1, 
                        Offset (0x10D4), 
                        APA0,   1, 
                        APA1,   1, 
                        APA2,   1, 
                        APA3,   1, 
                        APB0,   1, 
                        APB1,   1, 
                        APB2,   1, 
                        APB3,   1, 
                        APC0,   1, 
                        APC1,   1, 
                        APC2,   1, 
                        APC3,   1, 
                        ASAT,   1, 
                        AGBE,   1, 
                        AXHC,   1, 
                        AXDC,   1, 
                        AUFS,   1, 
                        APD0,   1, 
                        APD1,   1, 
                        APD2,   1, 
                        APD3,   1, 
                        APE0,   1, 
                        APE1,   1, 
                        APE2,   1, 
                        APE3,   1, 
                        Offset (0x1800), 
                        ACWA,   32, 
                        DCWA,   32, 
                        ACET,   32, 
                        DCET,   32, 
                        Offset (0x18E8), 
                            ,   29, 
                        APG3,   1, 
                            ,   1, 
                        CECE,   1, 
                        Offset (0x1B0C), 
                            ,   2, 
                        ISAT,   1, 
                            ,   18, 
                        LTRU,   1, 
                        Offset (0x1B1C), 
                            ,   22, 
                        XSQD,   1, 
                        Offset (0x1BD0), 
                            ,   31, 
                        CPPM,   1, 
                        Offset (0x1E20), 
                        GBED,   1, 
                        Offset (0x1E28), 
                            ,   22, 
                        SCFD,   1
                    }

                    Method (PG3C, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            APG3 = One
                        }
                        Else
                        {
                            APG3 = Zero
                        }
                    }

                    Method (PG3T, 0, NotSerialized)
                    {
                        If (APG3)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (PSOC, 1, Serialized)
                    {
                        If (PSON)
                        {
                            If (Arg0)
                            {
                                CECE = One
                            }
                            Else
                            {
                                CECE = Zero
                            }
                        }
                    }

                    Method (PSOS, 0, NotSerialized)
                    {
                        If (CECE)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (CFAE, 1, NotSerialized)
                    {
                        If (CondRefOf (CPPE))
                        {
                            If ((CPPE == One))
                            {
                                If (DerefOf (Arg0 [Zero]))
                                {
                                    CPPM = Zero
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                                Else
                                {
                                    CPPM = One
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SAT0)
                {
                    Name (_ADR, 0x00170000)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        ^^PPMC.ISAT = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        ^^PPMC.ISAT = One
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((CondRefOf (SATC) && CondRefOf (SATD)))
                        {
                            If (SATC (Arg0))
                            {
                                Return (SATD (Arg0, Arg1, Arg2, Arg3))
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Device (PRT0)
                    {
                        Name (_ADR, 0xFFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & One))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT1)
                    {
                        Name (_ADR, 0x0001FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x02))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x0002FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x04))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x0003FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x08))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x0004FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x10))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x0005FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x20))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT6)
                    {
                        Name (_ADR, 0x0006FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x40))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (PRT7)
                    {
                        Name (_ADR, 0x0007FFFF)  // _ADR: Address
                        Method (PRES, 0, NotSerialized)
                        {
                            If ((SPPR & 0x80))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                }

                Device (XHCI)
                {
                    Name (_ADR, 0x00140000)  // _ADR: Address
                    Name (DUWS, Zero)
                    Name (PU2C, Zero)
                    Name (PU3C, Zero)
                    Name (AHWA, One)
                    Name (PPID, 0x4F)
                    DUWS = \DUWS
                    PU2C = ^PU2C /* \_SB_.PC02.PU2C */
                    PU3C = ^PU3C /* \_SB_.PC02.PU3C */
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (DUWS))
                        {
                            Return (GPRW (0x6B, DUWS))
                        }
                        Else
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                    }

                    OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                    Field (XPRT, AnyAcc, NoLock, Preserve)
                    {
                        DVID,   16, 
                        Offset (0x10), 
                        XADR,   64, 
                        Offset (0xA2), 
                            ,   2, 
                        D3HE,   1
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("203b203b-1f13-409a-9aae-1a0347525584") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    If (CondRefOf (AHWA))
                                    {
                                        Return ((AHWA && One))
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                    {
                        Return (0x03)
                    }

                    Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                    {
                        Return (0x03)
                    }

                    Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If (CondRefOf (^RHUB.INIR))
                        {
                            ^RHUB.INIR ()
                        }
                    }

                    Method (USRA, 1, Serialized)
                    {
                        Return ((PU2C + Arg0))
                    }

                    Method (SSPA, 1, Serialized)
                    {
                        Return ((PU2C + (0x02 + Arg0)))
                    }

                    Method (UPRU, 3, NotSerialized)
                    {
                        ^^SBPC.PCAO (PPID, Arg0, Arg1, Arg2)
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        UPRU (Zero, 0xFFFFFFF7, Zero)
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS0X))
                        {
                            PS0X ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        UPRU (Zero, 0xFFFFFFFF, 0x08)
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS3X))
                        {
                            PS3X ()
                        }
                    }

                    Method (CUID, 1, Serialized)
                    {
                        If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            If ((DVID == 0xFFFF))
                            {
                                Return (Zero)
                            }

                            If (CondRefOf (PS0X))
                            {
                                CSD0 (0x16)
                                PS0X ()
                            }
                        }

                        Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                        {
                            If ((DVID == 0xFFFF))
                            {
                                Return (Zero)
                            }

                            If (CondRefOf (PS2X))
                            {
                                PS2X ()
                                CSD3 (0x16)
                            }
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            If ((DVID == 0xFFFF))
                            {
                                Return (Zero)
                            }

                            If (CondRefOf (PS3X))
                            {
                                PS3X ()
                                CSD3 (0x16)
                            }
                        }

                        If (CondRefOf (PU2C))
                        {
                            If ((One <= PU2C))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                }
                            }

                            If ((0x02 <= PU2C))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                }
                            }

                            If ((0x03 <= PU2C))
                            {
                                Device (HS03)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    If ((CondRefOf (VTCM) && (VTCM == One)))
                                    {
                                        If (((SXP1 == 0x03) || (SXP2 == 0x03)))
                                        {
                                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                            {
                                                0xFF, 
                                                0xFF, 
                                                Zero, 
                                                Zero
                                            })
                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x0,
                                                    PLD_Panel              = "TOP",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "LEFT",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x1,
                                                    PLD_GroupPosition      = 0x1,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xFFFF,
                                                    PLD_HorizontalOffset   = 0xFFFF)

                                            })
                                            Device (CIR)
                                            {
                                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                                {
                                                    Return ((0x03 + SXI1))
                                                }

                                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                                {
                                                    ToPLD (
                                                        PLD_Revision           = 0x2,
                                                        PLD_IgnoreColor        = 0x1,
                                                        PLD_Red                = 0x0,
                                                        PLD_Green              = 0x0,
                                                        PLD_Blue               = 0x0,
                                                        PLD_Width              = 0x0,
                                                        PLD_Height             = 0x0,
                                                        PLD_UserVisible        = 0x0,
                                                        PLD_Dock               = 0x0,
                                                        PLD_Lid                = 0x1,
                                                        PLD_Panel              = "FRONT",
                                                        PLD_VerticalPosition   = "UPPER",
                                                        PLD_HorizontalPosition = "CENTER",
                                                        PLD_Shape              = "ROUND",
                                                        PLD_GroupOrientation   = 0x0,
                                                        PLD_GroupToken         = 0x0,
                                                        PLD_GroupPosition      = 0x0,
                                                        PLD_Bay                = 0x0,
                                                        PLD_Ejectable          = 0x0,
                                                        PLD_EjectRequired      = 0x0,
                                                        PLD_CabinetNumber      = 0x0,
                                                        PLD_CardCageNumber     = 0x0,
                                                        PLD_Reference          = 0x0,
                                                        PLD_Rotation           = 0x0,
                                                        PLD_Order              = 0x0,
                                                        PLD_VerticalOffset     = 0xC8,
                                                        PLD_HorizontalOffset   = 0xA0)

                                                })
                                            }
                                        }
                                    }
                                }
                            }

                            If ((0x04 <= PU2C))
                            {
                                Device (HS04)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                }
                            }

                            If ((0x05 <= PU2C))
                            {
                                Device (HS05)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    If ((CondRefOf (VTCM) && (VTCM == One)))
                                    {
                                        If (((SXP1 == 0x05) || (SXP2 == 0x05)))
                                        {
                                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                            {
                                                0xFF, 
                                                0xFF, 
                                                Zero, 
                                                Zero
                                            })
                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x0,
                                                    PLD_Panel              = "TOP",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "LEFT",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x1,
                                                    PLD_GroupPosition      = 0x1,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xFFFF,
                                                    PLD_HorizontalOffset   = 0xFFFF)

                                            })
                                            Device (CIR)
                                            {
                                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                                {
                                                    Return ((0x05 + SXI1))
                                                }

                                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                                {
                                                    ToPLD (
                                                        PLD_Revision           = 0x2,
                                                        PLD_IgnoreColor        = 0x1,
                                                        PLD_Red                = 0x0,
                                                        PLD_Green              = 0x0,
                                                        PLD_Blue               = 0x0,
                                                        PLD_Width              = 0x0,
                                                        PLD_Height             = 0x0,
                                                        PLD_UserVisible        = 0x0,
                                                        PLD_Dock               = 0x0,
                                                        PLD_Lid                = 0x1,
                                                        PLD_Panel              = "FRONT",
                                                        PLD_VerticalPosition   = "UPPER",
                                                        PLD_HorizontalPosition = "CENTER",
                                                        PLD_Shape              = "ROUND",
                                                        PLD_GroupOrientation   = 0x0,
                                                        PLD_GroupToken         = 0x0,
                                                        PLD_GroupPosition      = 0x0,
                                                        PLD_Bay                = 0x0,
                                                        PLD_Ejectable          = 0x0,
                                                        PLD_EjectRequired      = 0x0,
                                                        PLD_CabinetNumber      = 0x0,
                                                        PLD_CardCageNumber     = 0x0,
                                                        PLD_Reference          = 0x0,
                                                        PLD_Rotation           = 0x0,
                                                        PLD_Order              = 0x0,
                                                        PLD_VerticalOffset     = 0xC8,
                                                        PLD_HorizontalOffset   = 0xA0)

                                                })
                                            }
                                        }
                                    }
                                }
                            }

                            If ((0x06 <= PU2C))
                            {
                                Device (HS06)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                }
                            }

                            If ((0x07 <= PU2C))
                            {
                                Device (HS07)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                }
                            }

                            If ((0x08 <= PU2C))
                            {
                                Device (HS08)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                }
                            }

                            If ((0x09 <= PU2C))
                            {
                                Device (HS09)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                }
                            }

                            If ((0x0A <= PU2C))
                            {
                                Device (HS10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                }
                            }

                            If ((0x0B <= PU2C))
                            {
                                Device (HS11)
                                {
                                    Name (_ADR, 0x0B)  // _ADR: Address
                                }
                            }

                            If ((0x0C <= PU2C))
                            {
                                Device (HS12)
                                {
                                    Name (_ADR, 0x0C)  // _ADR: Address
                                }
                            }

                            If ((0x0D <= PU2C))
                            {
                                Device (HS13)
                                {
                                    Name (_ADR, 0x0D)  // _ADR: Address
                                }
                            }

                            If ((0x0E <= PU2C))
                            {
                                Device (HS14)
                                {
                                    Name (_ADR, 0x0E)  // _ADR: Address
                                }
                            }

                            Device (USR1)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (USRA (One))
                                }
                            }

                            Device (USR2)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (USRA (0x02))
                                }
                            }
                        }

                        If (CondRefOf (PU3C))
                        {
                            If ((One <= PU3C))
                            {
                                Device (SS01)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (One))
                                    }
                                }
                            }

                            If ((0x02 <= PU3C))
                            {
                                Device (SS02)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x02))
                                    }
                                }
                            }

                            If ((0x03 <= PU3C))
                            {
                                Device (SS03)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x03))
                                    }
                                }
                            }

                            If ((0x04 <= PU3C))
                            {
                                Device (SS04)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x04))
                                    }
                                }
                            }

                            If ((0x05 <= PU3C))
                            {
                                Device (SS05)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x05))
                                    }
                                }
                            }

                            If ((0x06 <= PU3C))
                            {
                                Device (SS06)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x06))
                                    }
                                }
                            }

                            If ((0x07 <= PU3C))
                            {
                                Device (SS07)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x07))
                                    }
                                }
                            }

                            If ((0x08 <= PU3C))
                            {
                                Device (SS08)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x08))
                                    }
                                }
                            }

                            If ((0x09 <= PU3C))
                            {
                                Device (SS09)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x09))
                                    }
                                }
                            }

                            If ((0x0A <= PU3C))
                            {
                                Device (SS10)
                                {
                                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                    {
                                        Return (SSPA (0x0A))
                                    }
                                }
                            }
                        }
                    }
                }

                Device (GLAN)
                {
                    Name (_ADR, 0x001F0006)  // _ADR: Address
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x6B, 0x04))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }
                }

                Device (HDAS)
                {
                    Name (_ADR, 0x001F0003)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        S023 (Zero, One)
                        If (CondRefOf (\_SB.PC02.HDAS.PS0X))
                        {
                            PS0X ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        S023 (Zero, Zero)
                        If (CondRefOf (\_SB.PC02.HDAS.PS3X))
                        {
                            PS3X ()
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x6B, 0x04))
                    }

                    OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
                    Field (HDAR, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }

                    Name (NBU0, ResourceTemplate ()
                    {
                        QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                            0x0000000000000001, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y3B, AddressRangeACPI, TypeStatic)
                    })
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        CreateQWordField (NBU0, \_SB.PC02.HDAS._Y3B._MIN, NBA0)  // _MIN: Minimum Base Address
                        CreateQWordField (NBU0, \_SB.PC02.HDAS._Y3B._MAX, NMA0)  // _MAX: Maximum Base Address
                        CreateQWordField (NBU0, \_SB.PC02.HDAS._Y3B._LEN, NLE0)  // _LEN: Length
                        NBA0 = NHAA /* \_SB_.PC02.NHAA */
                        NMA0 = (NHAA + (NHLL - One))
                        NLE0 = NHLL /* \_SB_.PC02.NHLL */
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "nhlt-version", 
                                "1.8-0"
                            }
                        }
                    })
                    Device (IDA)
                    {
                        Name (_ADR, 0x10000000)  // _ADR: Address
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0xCF                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Switch (ToInteger (Arg3))
                                        {
                                            Case (Zero)
                                            {
                                                Return (NBU0) /* \_SB_.PC02.HDAS.NBU0 */
                                            }
                                            Default
                                            {
                                                Return (NBU0) /* \_SB_.PC02.HDAS.NBU0 */
                                            }

                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (ADFM) /* \_SB_.PC02.ADFM */
                                    }
                                    Case (0x03)
                                    {
                                        If (CondRefOf (\_SB.PC02.HDAS.PPMS))
                                        {
                                            Return (PPMS (Arg3))
                                        }
                                        Else
                                        {
                                        }

                                        Return (Zero)
                                    }
                                    Case (0x06)
                                    {
                                        Return (XTAL) /* \_SB_.PC02.XTAL */
                                    }
                                    Case (0x07)
                                    {
                                        Return (HDBO) /* \_SB_.PC02.HDBO */
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If (CondRefOf (HIWC))
                            {
                                If (HIWC (Arg0))
                                {
                                    If (CondRefOf (HIDW))
                                    {
                                        Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                    }
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }

                Scope (HDAS.IDA)
                {
                    Device (SNDW)
                    {
                        Name (_ADR, 0x40000000)  // _ADR: Address
                        Name (_CID, Package (0x02)  // _CID: Compatible ID
                        {
                            "PRP00001", 
                            "PNP0A05" /* Generic Container Device */
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (QCFG, 3, NotSerialized)
                        {
                            DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                                 = Arg1
                            DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                                 = Arg2
                        }

                        Method (XCFG, 2, NotSerialized)
                        {
                            If ((Arg1 == 0x016E3600))
                            {
                                Local0 = 0x016E3600
                                Local1 = 0x005B8D80
                                Local2 = 0x7D
                                Local3 = 0x02
                            }
                            ElseIf ((Arg1 == 0x0249F000))
                            {
                                Local0 = 0x0249F000
                                Local1 = 0x00493E00
                                Local2 = 0x32
                                Local3 = 0x04
                            }
                            ElseIf ((Arg1 == 0x0124F800))
                            {
                                Local0 = 0x0124F800
                                Local1 = 0x00493E00
                                Local2 = 0x32
                                Local3 = 0x04
                            }
                            Else
                            {
                                Local0 = Zero
                                Local1 = Zero
                                Local2 = Zero
                                Local3 = Zero
                            }

                            DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                                 = Local0
                            DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                                ) [One]) [Zero] = Local1
                            DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                                 = Local2
                            DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                                 = Local3
                        }

                        Method (DCFG, 3, NotSerialized)
                        {
                            DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                                 = Arg1
                            DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                                 = Arg2
                        }

                        Method (SDWU, 1, NotSerialized)
                        {
                            DerefOf (DerefOf (_DSD [One]) [One]) [One]
                                 = Arg0
                        }

                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            SDWU (SWMC)
                            QCFG (LNK0, SWQ0, ACS0)
                            QCFG (LNK1, SWQ1, ACS1)
                            QCFG (LNK2, SWQ2, ACS2)
                            QCFG (LNK3, SWQ3, ACS3)
                            XCFG (LNK0, XTAL)
                            XCFG (LNK1, XTAL)
                            XCFG (LNK2, XTAL)
                            XCFG (LNK3, XTAL)
                            DCFG (LNK0, DAI0, DOD0)
                            DCFG (LNK1, DAI1, DOD0)
                            DCFG (LNK2, DAI2, DOD0)
                            DCFG (LNK3, DAI3, DOD0)
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "mipi-sdw-sw-interface-revision", 
                                    0x00010000
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-master-count", 
                                    0x04
                                }
                            }, 

                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            Package (0x04)
                            {
                                Package (0x02)
                                {
                                    "mipi-sdw-link-0-subproperties", 
                                    "LNK0"
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-link-1-subproperties", 
                                    "LNK1"
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-link-2-subproperties", 
                                    "LNK2"
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-link-3-subproperties", 
                                    "LNK3"
                                }
                            }
                        })
                        Name (LNK0, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                        Name (LNK1, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                        Name (LNK2, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                        Name (LNK3, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x0D)
                            {
                                Package (0x02)
                                {
                                    "intel-quirk-mask", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-ip-clock", 
                                    0x0249F000
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-doais", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-sdw-dods", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "intel-autonomous-clock-stop", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode0-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-stop-mode1-supported", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-clock-frequencies-supported", 
                                    Package (0x01)
                                    {
                                        0x00493E00
                                    }
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-rate", 
                                    0xBB80
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-row-size", 
                                    0x32
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-default-frame-col-size", 
                                    0x04
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-dynamic-frame-shape", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "mipi-sdw-command-error-threshold", 
                                    0x10
                                }
                            }
                        })
                    }

                    If ((UAOE != Zero))
                    {
                        Device (UAOL)
                        {
                            Name (_ADR, 0x50000000)  // _ADR: Address
                            Name (_CID, Package (0x02)  // _CID: Compatible ID
                            {
                                "PRP00001", 
                                "PNP0A05" /* Generic Container Device */
                            })
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0B)
                            }

                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x03                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (CFAE (Arg3))
                                        }

                                    }
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-ctrl-count", 
                                        0x02
                                    }
                                }, 

                                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-descriptor-0", 
                                        "UAO0"
                                    }, 

                                    Package (0x02)
                                    {
                                        "uaol-descriptor-1", 
                                        "UAO1"
                                    }
                                }
                            })
                            Name (UAO0, Package (0x02)
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                Package (0x03)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-instance-number", 
                                        Zero
                                    }, 

                                    Package (0x02)
                                    {
                                        "bdf-routing-enabled", 
                                        Zero
                                    }, 

                                    Package (0x02)
                                    {
                                        "peer-integrated-controller-identifier", 
                                        0x98ED
                                    }
                                }
                            })
                            Name (UAO1, Package (0x02)
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                Package (0x03)
                                {
                                    Package (0x02)
                                    {
                                        "uaol-instance-number", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "bdf-routing-enabled", 
                                        Zero
                                    }, 

                                    Package (0x02)
                                    {
                                        "peer-integrated-controller-identifier", 
                                        0xABCD
                                    }
                                }
                            })
                        }
                    }
                }

                Device (RP01)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA1 != Zero))
                        {
                            Return (RPA1) /* \_SB_.PC02.RPA1 */
                        }
                        Else
                        {
                            Return (0x001C0000)
                        }
                    }

                    Name (SLOT, One)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR1 /* \LTR1 */
                        LMSL = PML1 /* \_SB_.PC02.PML1 */
                        LNSL = PNL1 /* \_SB_.PC02.PNL1 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & One) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP01))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP01.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP01._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP01.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR04) /* \_SB_.AR04 */
                            }
                        }

                        Return (PD04) /* \_SB_.PD04 */
                    }
                }

                Device (RP02)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA2 != Zero))
                        {
                            Return (RPA2) /* \_SB_.PC02.RPA2 */
                        }
                        Else
                        {
                            Return (0x001C0001)
                        }
                    }

                    Name (SLOT, 0x02)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR2 /* \LTR2 */
                        LMSL = PML2 /* \_SB_.PC02.PML2 */
                        LNSL = PNL2 /* \_SB_.PC02.PNL2 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x02) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP02))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP02.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP02._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP02.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR05) /* \_SB_.AR05 */
                            }
                        }

                        Return (PD05) /* \_SB_.PD05 */
                    }
                }

                Device (RP03)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA3 != Zero))
                        {
                            Return (RPA3) /* \_SB_.PC02.RPA3 */
                        }
                        Else
                        {
                            Return (0x001C0002)
                        }
                    }

                    Name (SLOT, 0x03)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR3 /* \LTR3 */
                        LMSL = PML3 /* \_SB_.PC02.PML3 */
                        LNSL = PNL3 /* \_SB_.PC02.PNL3 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x04) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP03))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP03.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP03._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP03.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR06) /* \_SB_.AR06 */
                            }
                        }

                        Return (PD06) /* \_SB_.PD06 */
                    }
                }

                Device (RP04)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA4 != Zero))
                        {
                            Return (RPA4) /* \_SB_.PC02.RPA4 */
                        }
                        Else
                        {
                            Return (0x001C0003)
                        }
                    }

                    Name (SLOT, 0x04)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR4 /* \LTR4 */
                        LMSL = PML4 /* \_SB_.PC02.PML4 */
                        LNSL = PNL4 /* \_SB_.PC02.PNL4 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x08) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP04))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP04.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP04._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP04.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR07) /* \_SB_.AR07 */
                            }
                        }

                        Return (PD07) /* \_SB_.PD07 */
                    }
                }

                Device (RP05)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA5 != Zero))
                        {
                            Return (RPA5) /* \_SB_.PC02.RPA5 */
                        }
                        Else
                        {
                            Return (0x001C0004)
                        }
                    }

                    Name (SLOT, 0x05)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR5 /* \LTR5 */
                        LMSL = PML5 /* \_SB_.PC02.PML5 */
                        LNSL = PNL4 /* \_SB_.PC02.PNL4 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x10) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP05))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP05.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP05._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP05.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR04) /* \_SB_.AR04 */
                            }
                        }

                        Return (PD04) /* \_SB_.PD04 */
                    }
                }

                Device (RP06)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA6 != Zero))
                        {
                            Return (RPA6) /* \_SB_.PC02.RPA6 */
                        }
                        Else
                        {
                            Return (0x001C0005)
                        }
                    }

                    Name (SLOT, 0x06)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR6 /* \LTR6 */
                        LMSL = PML6 /* \_SB_.PC02.PML6 */
                        LNSL = PNL6 /* \_SB_.PC02.PNL6 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x20) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP06))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP06.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP06._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP06.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR05) /* \_SB_.AR05 */
                            }
                        }

                        Return (PD05) /* \_SB_.PD05 */
                    }
                }

                Device (RP07)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA7 != Zero))
                        {
                            Return (RPA7) /* \_SB_.PC02.RPA7 */
                        }
                        Else
                        {
                            Return (0x001C0006)
                        }
                    }

                    Name (SLOT, 0x07)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR7 /* \LTR7 */
                        LMSL = PML7 /* \_SB_.PC02.PML7 */
                        LNSL = PNL7 /* \_SB_.PC02.PNL7 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x40) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP07))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP07.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP07._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP07.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR06) /* \_SB_.AR06 */
                            }
                        }

                        Return (PD06) /* \_SB_.PD06 */
                    }
                }

                Device (RP08)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA8 != Zero))
                        {
                            Return (RPA8) /* \_SB_.PC02.RPA8 */
                        }
                        Else
                        {
                            Return (0x001C0007)
                        }
                    }

                    Name (SLOT, 0x08)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR8 /* \LTR8 */
                        LMSL = PML8 /* \_SB_.PC02.PML8 */
                        LNSL = PNL8 /* \_SB_.PC02.PNL8 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x80) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP08))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP08.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP08._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP08.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR07) /* \_SB_.AR07 */
                            }
                        }

                        Return (PD07) /* \_SB_.PD07 */
                    }
                }

                Device (RP09)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPA9 != Zero))
                        {
                            Return (RPA9) /* \_SB_.PC02.RPA9 */
                        }
                        Else
                        {
                            Return (0x001D0000)
                        }
                    }

                    Name (SLOT, 0x09)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTR9 /* \LTR9 */
                        LMSL = PML9 /* \_SB_.PC02.PML9 */
                        LNSL = PNL9 /* \_SB_.PC02.PNL9 */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x0100) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP09))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP09.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP09._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP09.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR04) /* \_SB_.AR04 */
                            }
                        }

                        Return (PD04) /* \_SB_.PD04 */
                    }
                }

                Device (RP10)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAA != Zero))
                        {
                            Return (RPAA) /* \_SB_.PC02.RPAA */
                        }
                        Else
                        {
                            Return (0x001D0001)
                        }
                    }

                    Name (SLOT, 0x0A)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRA /* \LTRA */
                        LMSL = PMLA /* \_SB_.PC02.PMLA */
                        LNSL = PNLA /* \_SB_.PC02.PNLA */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x0200) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP10))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP10.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP10._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP10.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR05) /* \_SB_.AR05 */
                            }
                        }

                        Return (PD05) /* \_SB_.PD05 */
                    }
                }

                Device (RP11)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAB != Zero))
                        {
                            Return (RPAB) /* \_SB_.PC02.RPAB */
                        }
                        Else
                        {
                            Return (0x001D0002)
                        }
                    }

                    Name (SLOT, 0x0B)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRB /* \LTRB */
                        LMSL = PMLB /* \_SB_.PC02.PMLB */
                        LNSL = PNLB /* \_SB_.PC02.PNLB */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x0400) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP11))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP11.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP11._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP11.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR06) /* \_SB_.AR06 */
                            }
                        }

                        Return (PD06) /* \_SB_.PD06 */
                    }
                }

                Device (RP12)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAC != Zero))
                        {
                            Return (RPAC) /* \_SB_.PC02.RPAC */
                        }
                        Else
                        {
                            Return (0x001D0003)
                        }
                    }

                    Name (SLOT, 0x0C)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRC /* \LTRC */
                        LMSL = PMLC /* \_SB_.PC02.PMLC */
                        LNSL = PNLC /* \_SB_.PC02.PNLC */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x0800) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP12))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP12.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP12._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP12.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR07) /* \_SB_.AR07 */
                            }
                        }

                        Return (PD07) /* \_SB_.PD07 */
                    }
                }

                Device (RP13)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAD != Zero))
                        {
                            Return (RPAD) /* \_SB_.PC02.RPAD */
                        }
                        Else
                        {
                            Return (0x001D0004)
                        }
                    }

                    Name (SLOT, 0x0D)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRD /* \LTRD */
                        LMSL = PMLD /* \_SB_.PC02.PMLD */
                        LNSL = PNLD /* \_SB_.PC02.PNLD */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x1000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP13))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP13.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP13._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP13.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR04) /* \_SB_.AR04 */
                            }
                        }

                        Return (PD04) /* \_SB_.PD04 */
                    }
                }

                Device (RP14)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAE != Zero))
                        {
                            Return (RPAE) /* \_SB_.PC02.RPAE */
                        }
                        Else
                        {
                            Return (0x001D0005)
                        }
                    }

                    Name (SLOT, 0x0E)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRE /* \LTRE */
                        LMSL = PMLE /* \_SB_.PC02.PMLE */
                        LNSL = PNLE /* \_SB_.PC02.PNLE */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x2000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP14))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP14.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP14._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP14.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR05) /* \_SB_.AR05 */
                            }
                        }

                        Return (PD05) /* \_SB_.PD05 */
                    }
                }

                Device (RP15)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAF != Zero))
                        {
                            Return (RPAF) /* \_SB_.PC02.RPAF */
                        }
                        Else
                        {
                            Return (0x001D0006)
                        }
                    }

                    Name (SLOT, 0x0F)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRF /* \LTRF */
                        LMSL = PMLF /* \_SB_.PC02.PMLF */
                        LNSL = PNLF /* \_SB_.PC02.PNLF */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x4000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP15))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP15.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP15._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP15.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR06) /* \_SB_.AR06 */
                            }
                        }

                        Return (PD06) /* \_SB_.PD06 */
                    }
                }

                Device (RP16)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAG != Zero))
                        {
                            Return (RPAG) /* \_SB_.PC02.RPAG */
                        }
                        Else
                        {
                            Return (0x001D0007)
                        }
                    }

                    Name (SLOT, 0x10)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRG /* \LTRG */
                        LMSL = PMLG /* \_SB_.PC02.PMLG */
                        LNSL = PNLG /* \_SB_.PC02.PNLG */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x8000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP16))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP16.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP16._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP16.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR07) /* \_SB_.AR07 */
                            }
                        }

                        Return (PD07) /* \_SB_.PD07 */
                    }
                }

                Device (RP17)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAH != Zero))
                        {
                            Return (RPAH) /* \_SB_.PC02.RPAH */
                        }
                        Else
                        {
                            Return (0x001B0000)
                        }
                    }

                    Name (SLOT, 0x11)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRH /* \LTRH */
                        LMSL = PMLH /* \_SB_.PC02.PMLH */
                        LNSL = PNLH /* \_SB_.PC02.PNLH */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00010000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP17))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP17.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP17._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP17.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR04) /* \_SB_.AR04 */
                            }
                        }

                        Return (PD04) /* \_SB_.PD04 */
                    }
                }

                Device (RP18)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAI != Zero))
                        {
                            Return (RPAI) /* \_SB_.PC02.RPAI */
                        }
                        Else
                        {
                            Return (0x001B0001)
                        }
                    }

                    Name (SLOT, 0x12)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRI /* \LTRI */
                        LMSL = PMLI /* \_SB_.PC02.PMLI */
                        LNSL = PNLI /* \_SB_.PC02.PNLI */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00020000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP18))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP18.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP18._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP18.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR05) /* \_SB_.AR05 */
                            }
                        }

                        Return (PD05) /* \_SB_.PD05 */
                    }
                }

                Device (RP19)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAJ != Zero))
                        {
                            Return (RPAJ) /* \_SB_.PC02.RPAJ */
                        }
                        Else
                        {
                            Return (0x001B0002)
                        }
                    }

                    Name (SLOT, 0x13)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRJ /* \LTRJ */
                        LMSL = PMLJ /* \_SB_.PC02.PMLJ */
                        LNSL = PNLJ /* \_SB_.PC02.PNLJ */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00040000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP19))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP19.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP19._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP19.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR06) /* \_SB_.AR06 */
                            }
                        }

                        Return (PD06) /* \_SB_.PD06 */
                    }
                }

                Device (RP20)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAK != Zero))
                        {
                            Return (RPAK) /* \_SB_.PC02.RPAK */
                        }
                        Else
                        {
                            Return (0x001B0003)
                        }
                    }

                    Name (SLOT, 0x14)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRK /* \LTRK */
                        LMSL = PMLK /* \_SB_.PC02.PMLK */
                        LNSL = PNLK /* \_SB_.PC02.PNLK */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00080000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP20))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP20.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP20._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP20.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR07) /* \_SB_.AR07 */
                            }
                        }

                        Return (PD07) /* \_SB_.PD07 */
                    }
                }

                Device (RP21)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAL != Zero))
                        {
                            Return (RPAL) /* \_SB_.PC02.RPAL */
                        }
                        Else
                        {
                            Return (0x001B0004)
                        }
                    }

                    Name (SLOT, 0x15)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRL /* \LTRL */
                        LMSL = PMLL /* \_SB_.PC02.PMLL */
                        LNSL = PNLL /* \_SB_.PC02.PNLL */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00100000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP21))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP21.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP21._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP21.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR04) /* \_SB_.AR04 */
                            }
                        }

                        Return (PD04) /* \_SB_.PD04 */
                    }
                }

                Device (RP22)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAM != Zero))
                        {
                            Return (RPAM) /* \_SB_.PC02.RPAM */
                        }
                        Else
                        {
                            Return (0x001B0005)
                        }
                    }

                    Name (SLOT, 0x16)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRM /* \LTRM */
                        LMSL = PMLM /* \_SB_.PC02.PMLM */
                        LNSL = PNLM /* \_SB_.PC02.PNLM */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00200000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP22))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP22.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP22._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP22.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR05) /* \_SB_.AR05 */
                            }
                        }

                        Return (PD05) /* \_SB_.PD05 */
                    }
                }

                Device (RP23)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAN != Zero))
                        {
                            Return (RPAN) /* \_SB_.PC02.RPAN */
                        }
                        Else
                        {
                            Return (0x001B0006)
                        }
                    }

                    Name (SLOT, 0x17)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRN /* \LTRN */
                        LMSL = PMLN /* \_SB_.PC02.PMLN */
                        LNSL = PNLN /* \_SB_.PC02.PNLN */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00400000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP23))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP23.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP23._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP23.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR06) /* \_SB_.AR06 */
                            }
                        }

                        Return (PD06) /* \_SB_.PD06 */
                    }
                }

                Device (RP24)
                {
                    Name (PBNU, Zero)
                    PBNU = PBSB /* External reference */
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((RPAO != Zero))
                        {
                            Return (RPAO) /* \_SB_.PC02.RPAO */
                        }
                        Else
                        {
                            Return (0x001B0007)
                        }
                    }

                    Name (SLOT, 0x18)
                    Name (PRTP, 0x02)
                    Name (LTEN, Zero)
                    Name (LMSL, Zero)
                    Name (LNSL, Zero)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTEN = LTRO /* \LTRO */
                        LMSL = PMLO /* \_SB_.PC02.PMLO */
                        LNSL = PNLO /* \_SB_.PC02.PNLO */
                        If ((CondRefOf (VMPP) && CondRefOf (VMDE)))
                        {
                            If (((VMDE == One) && ((VMPP & 0x00800000) != Zero)))
                            {
                                PRMV = One
                            }
                        }

                        If (PRES ())
                        {
                            If (CondRefOf (PINI))
                            {
                                PINI ()
                            }
                        }

                        If (CondRefOf (\_SB.PC02.RP24))
                        {
                            If ((VDID != 0xFFFFFFFF))
                            {
                                If (CondRefOf (\STD3))
                                {
                                    If (CondRefOf (\_SB.PC02.RP24.PRMV))
                                    {
                                        If ((PRMV == One))
                                        {
                                            RD3C = STD3 /* \STD3 */
                                        }
                                    }

                                    If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }
                            }
                        }
                    }

                    OperationRegion (PXCS, SystemMemory, ^^PC00.PC2M (_ADR (), PBNU), 0x0480)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0x68), 
                            ,   10, 
                        LNRE,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                        SCB0,   1, 
                            ,   6, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x328), 
                        Offset (0x32B), 
                        LTSM,   8, 
                        Offset (0x404), 
                        LSOE,   1, 
                        LNSE,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (L23D, 0, Serialized)
                    {
                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (DL23, 0, Serialized)
                    {
                        If (((LASX == One) && (LNRE == Zero)))
                        {
                            If (((LSOE == One) || (LNSE == One)))
                            {
                                LNRE = One
                                Sleep (One)
                                LNRE = Zero
                            }
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (PRMV, Zero)
                    Name (RD3C, 0x02)
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Name (OPTS, Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    })
                                    CreateBitField (OPTS, Zero, FUN0)
                                    CreateBitField (OPTS, 0x06, FUN6)
                                    CreateBitField (OPTS, 0x08, FUN8)
                                    CreateBitField (OPTS, 0x09, FUN9)
                                    CreateBitField (OPTS, 0x0A, FUNA)
                                    CreateBitField (OPTS, 0x0B, FUNB)
                                    If ((Arg1 >= 0x02))
                                    {
                                        FUN0 = One
                                        If ((LTEN != Zero))
                                        {
                                            FUN6 = One
                                        }

                                        If (CondRefOf (ECR1))
                                        {
                                            If ((ECR1 == One))
                                            {
                                                If ((Arg1 >= 0x03))
                                                {
                                                    FUN8 = One
                                                    FUN9 = One
                                                }
                                            }
                                        }
                                    }

                                    If ((Arg1 >= 0x04))
                                    {
                                        If (CondRefOf (PPBA))
                                        {
                                            FUNA = One
                                        }

                                        If (CondRefOf (UPRD))
                                        {
                                            FUNB = One
                                        }
                                    }

                                    Return (OPTS) /* \_SB_.PC02.RP24._DSM.OPTS */
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 >= 0x02))
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PC02.RP24.LTRV */
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (One)
                                            }
                                        }
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                Return (Package (0x05)
                                                {
                                                    0xC350, 
                                                    Ones, 
                                                    Ones, 
                                                    0xC350, 
                                                    Ones
                                                })
                                            }
                                        }
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Return (PPBA (Arg3))
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (UPRD))
                                    {
                                        Return (UPRD (Arg3))
                                    }
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                        Field (PCCX, ByteAcc, NoLock, Preserve)
                        {
                            DVID,   32, 
                            Offset (0x09), 
                            PIXX,   8, 
                            SCCX,   8, 
                            BCCX,   8
                        }

                        Method (PAHC, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x06))
                                {
                                    If ((PIXX == One))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PNVM, 0, Serialized)
                        {
                            If ((BCCX == One))
                            {
                                If ((SCCX == 0x08))
                                {
                                    If ((PIXX == 0x02))
                                    {
                                        Return (One)
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (PRES, 0, Serialized)
                        {
                            If ((DVID == 0xFFFFFFFF))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Method (ISGX, 0, Serialized)
                        {
                            If ((BCCX == 0x03))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        If (CondRefOf (\STD3))
                        {
                            If ((STD3 != Zero))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    If ((PAHC () || PNVM ()))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                            Package (0x01)
                                            {
                                                Package (0x02)
                                                {
                                                    "StorageD3Enable", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x6B, 0x04))
                                }
                            }

                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (CondRefOf (PPS0))
                        {
                            PPS0 ()
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (CondRefOf (PPS3))
                        {
                            PPS3 ()
                        }
                    }

                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If (CondRefOf (ADSD))
                        {
                            Return (ADSD ())
                        }

                        If (CondRefOf (PINI))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }, 

                                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                                Package (0x00){}
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                        One
                                    }
                                }
                            })
                        }
                    }

                    Method (HPME, 0, Serialized)
                    {
                        If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                        {
                            Notify (PXSX, 0x02) // Device Wake
                            PMSX = One
                            PSPX = One
                        }
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (CondRefOf (PICM))
                        {
                            If (PICM)
                            {
                                Return (AR07) /* \_SB_.AR07 */
                            }
                        }

                        Return (PD07) /* \_SB_.PD07 */
                    }
                }

                Device (XDCI)
                {
                    Name (_ADR, 0x00140001)  // _ADR: Address
                    OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
                    Field (OTGD, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   16, 
                        Offset (0x10), 
                        XDCB,   64
                    }

                    Field (OTGD, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        D0I3,   2
                    }

                    Method (XDBA, 0, NotSerialized)
                    {
                        Return ((XDCB & 0xFFFFFFFFFFFFFF00))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                        {
                            If ((Arg1 == One))
                            {
                                Method (SPPS, 2, Serialized)
                                {
                                    OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                                    Field (XDBW, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x10F810), 
                                        Offset (0x10F811), 
                                        U2CP,   2, 
                                        U3CP,   2, 
                                        Offset (0x10F818), 
                                        PUPS,   2, 
                                            ,   1, 
                                        PURC,   1, 
                                        Offset (0x10F81A), 
                                        Offset (0x10F81C), 
                                            ,   3, 
                                        UXPE,   2, 
                                        Offset (0x10F81E)
                                    }

                                    Local1 = Arg0
                                    Local2 = Arg1
                                    If ((Local1 == Zero))
                                    {
                                        UXPE = Zero
                                        Local0 = Zero
                                        While ((Local0 < 0x0A))
                                        {
                                            Stall (0x64)
                                            Local0++
                                        }

                                        PUPS = Zero
                                        Local0 = Zero
                                        While ((Local0 < 0x07D0))
                                        {
                                            Stall (0x64)
                                            If (((U2CP == Zero) && (U3CP == Zero)))
                                            {
                                                Break
                                            }

                                            Local0++
                                        }

                                        If ((U2CP != Zero)){}
                                        If ((U3CP != Zero)){}
                                        Return (Zero)
                                    }

                                    If ((Local1 == 0x03))
                                    {
                                        If ((U2CP != Zero)){}
                                        If ((U3CP != Zero)){}
                                        PUPS = 0x03
                                        Local0 = Zero
                                        While ((Local0 < 0x07D0))
                                        {
                                            Stall (0x64)
                                            If (((U2CP == 0x03) && (U3CP == 0x03)))
                                            {
                                                Break
                                            }

                                            Local0++
                                        }

                                        If ((U2CP != 0x03)){}
                                        If ((U3CP != 0x03)){}
                                        UXPE = Local2
                                        Return (Zero)
                                    }

                                    Return (Zero)
                                }

                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0xB3, 0x03                                       // ..
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (One)
                                    }
                                    Case (0x04)
                                    {
                                        Local1 = DerefOf (Arg3 [Zero])
                                        SPPS (Local1, Zero)
                                    }
                                    Case (0x05)
                                    {
                                        If (CondRefOf (XDAT))
                                        {
                                            If ((XDAT () == One))
                                            {
                                                Notify (^^^PC00.XDCI, 0x80) // Status Change
                                            }
                                            Else
                                            {
                                                Notify (^^^PC00.XDCI, 0x81) // Information Change
                                            }
                                        }

                                        Return (Zero)
                                    }
                                    Case (0x07)
                                    {
                                        OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                        Field (XD22, WordAcc, NoLock, Preserve)
                                        {
                                            Offset (0x10F818), 
                                            P2PS,   2, 
                                            Offset (0x10F81A)
                                        }

                                        Local0 = P2PS /* \_SB_.PC02.XDCI._DSM.P2PS */
                                        Return (Local0)
                                    }
                                    Case (0x08)
                                    {
                                        Return (One)
                                    }
                                    Case (0x09)
                                    {
                                        OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                        Field (XGCT, WordAcc, NoLock, Preserve)
                                        {
                                            Offset (0xC110), 
                                            GCTL,   32
                                        }

                                        Local1 = (PPDS & 0xFFF80000)
                                        Local1 >>= 0x13
                                        Return (Local1)
                                    }

                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_DDN, "PCH XDCI controller")  // _DDN: DOS Device Name
                    Name (_STR, Unicode ("PCH XDCI controller"))  // _STR: Description String
                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x8C, 0x04))
                            }
                        }

                        Return (GPRW (0x6D, 0x04))
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }
                }

                Device (HECI)
                {
                    Name (_ADR, 0x00160000)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (CondRefOf (HIWC))
                        {
                            If (HIWC (Arg0))
                            {
                                If (CondRefOf (HIDW))
                                {
                                    Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (HEC3)
                {
                    Name (_ADR, 0x00160004)  // _ADR: Address
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (SOD3, 3, Serialized)
                {
                    OperationRegion (ICB1, SystemMemory, (^^PC00.GPCB () + Arg0), 0x88)
                    If (Arg1)
                    {
                        Field (ICB1, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x84), 
                            PMEC,   8
                        }

                        PMEC = 0x03
                        PMEC |= Zero
                    }

                    If ((Arg1 && Arg2))
                    {
                        Field (ICB1, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        BAR0 = Zero
                    }
                }

                Device (I2C0)
                {
                    If ((IM00 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC00, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150000)
                    }
                }

                Device (I2C1)
                {
                    If ((IM01 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC01, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150001)
                    }
                }

                Device (I2C2)
                {
                    If ((IM02 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC02, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150002)
                    }
                }

                Device (I2C3)
                {
                    If ((IM03 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC03, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00150003)
                    }
                }

                Device (I2C4)
                {
                    If ((IM04 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC04, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00190000)
                    }
                }

                Device (I2C5)
                {
                    If ((IM05 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (IC05, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00190001)
                    }
                }

                Device (I3C0)
                {
                    Name (_ADR, 0x00150004)  // _ADR: Address
                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x6B, 0x04))
                    }
                }

                Device (SPI0)
                {
                    If ((SM00 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC00, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0002)
                    }
                }

                Device (SPI1)
                {
                    If ((SM01 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC01, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0003)
                    }
                }

                Device (SPI2)
                {
                    If ((SM02 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC02, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00120006)
                    }
                }

                Device (SPI3)
                {
                    If ((SM03 == One))
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (SC03, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00130000)
                    }
                }

                Method (UDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (UDMA, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (0x08)
                            {
                                 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            })
                        }
                        Case (One)
                        {
                            Return (ToInteger (Arg1))
                        }

                    }

                    Return (Buffer (0x08)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    })
                }

                Device (ISHD)
                {
                    Name (_ADR, 0x00120000)  // _ADR: Address
                }
            }

            If ((\_SB.PC02.UM00 == One))
            {
                Scope (_SB.PC02)
                {
                    Device (UA00)
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (UDSM (Arg0))
                            {
                                Return (UDMA (Arg2, UD00))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x001E0000)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (UC00, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }
                }
            }

            Scope (_SB)
            {
                If (((PC02.UM00 == 0x02) || (PC02.UM00 == 0x03)))
                {
                    Device (PUA0)
                    {
                        Name (_DDN, "MtlPchSerialIoUart0")  // _DDN: DOS Device Name
                        Name (_UID, "MtlPchSerialIoUart0")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (^^PC02.UM00))
                        }

                        Method (UHID, 1, Serialized)
                        {
                            If ((Arg0 == 0x03))
                            {
                                Return (0x0105D041)
                            }

                            Return (0x020CD041)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (^^PC02.UC00, ^^PC02.UI00))
                        }

                        Method (UARH, 2, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Name (BUF0, ResourceTemplate ()
                            {
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000008,         // Address Length
                                    _Y3C)
                            })
                            Name (IBUF, ResourceTemplate ()
                            {
                                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3D)
                                {
                                    0x00000014,
                                }
                            })
                            CreateDWordField (BUF0, \_SB.PUA0.UARH._Y3C._BAS, ADR0)  // _BAS: Base Address
                            CreateDWordField (IBUF, \_SB.PUA0.UARH._Y3D._INT, IRQN)  // _INT: Interrupts
                            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                            ADR0 = Local0
                            IRQN = Arg1
                            ConcatenateResTemplate (BUF0, IBUF, Local1)
                            Return (Local1)
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((^^PC02.UM00 == 0x03))
                            {
                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        Method (UPS3, 2, Serialized)
                        {
                            Name (REGS, Package (0x08)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                Local1 = LCR /* \_SB_.PUA0.UPS3.LCR_ */
                                LCR |= 0x80
                                REGS [Zero] = DLL /* \_SB_.PUA0.UPS3.DLL_ */
                                REGS [One] = DLH /* \_SB_.PUA0.UPS3.DLH_ */
                                LCR = Local1
                                REGS [0x02] = FCR /* \_SB_.PUA0.UPS3.FCR_ */
                                REGS [0x03] = Local1
                                REGS [0x04] = MCR /* \_SB_.PUA0.UPS3.MCR_ */
                                REGS [0x05] = PCLK /* \_SB_.PUA0.UPS3.PCLK */
                                If (((DerefOf (REGS [0x05]) != Zero) && (
                                    DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                                {
                                    URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                                }

                                PPRR = Zero
                                PPRR |= Zero
                                PMEC = 0x03
                                PMEC |= Zero
                            }
                        }

                        Method (UPS0, 2, Serialized)
                        {
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                PMEC = Zero
                                PMEC |= Zero
                                PPRR = 0x07
                                Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                                If (((DerefOf (Local0 [0x05]) != Zero) && (
                                    DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                                {
                                    LCR |= 0x80
                                    DLL = DerefOf (Local0 [Zero])
                                    DLH = DerefOf (Local0 [One])
                                    LCR = DerefOf (Local0 [0x03])
                                    FCR = DerefOf (Local0 [0x02])
                                    MCR = DerefOf (Local0 [0x04])
                                    Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                    PCLK = Local2
                                    Local2 = (DerefOf (Local0 [0x05]) | One)
                                    PCLK = Local2
                                }
                            }
                        }

                        Method (UPSC, 1, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                PMEC,   8
                            }

                            Return ((PMEC & 0x03))
                        }

                        If ((^PC02.UM00 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (^^PC02.UC00))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (^^PC02.UP00, ^^PC02.UC00)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (^^PC02.UP00, ^^PC02.UC00)
                            }
                        }
                    }
                }
            }

            If ((\_SB.PC02.UM01 == One))
            {
                Scope (_SB.PC02)
                {
                    Device (UA01)
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (UDSM (Arg0))
                            {
                                Return (UDMA (Arg2, UD01))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x001E0001)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (UC01, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }
                }
            }

            Scope (_SB)
            {
                If (((PC02.UM01 == 0x02) || (PC02.UM01 == 0x03)))
                {
                    Device (PUA1)
                    {
                        Name (_DDN, "MtlPchSerialIoUart1")  // _DDN: DOS Device Name
                        Name (_UID, "MtlPchSerialIoUart1")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (^^PC02.UM01))
                        }

                        Method (UHID, 1, Serialized)
                        {
                            If ((Arg0 == 0x03))
                            {
                                Return (0x0105D041)
                            }

                            Return (0x020CD041)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (^^PC02.UC01, ^^PC02.UI01))
                        }

                        Method (UARH, 2, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Name (BUF0, ResourceTemplate ()
                            {
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000008,         // Address Length
                                    _Y3E)
                            })
                            Name (IBUF, ResourceTemplate ()
                            {
                                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3F)
                                {
                                    0x00000014,
                                }
                            })
                            CreateDWordField (BUF0, \_SB.PUA1.UARH._Y3E._BAS, ADR0)  // _BAS: Base Address
                            CreateDWordField (IBUF, \_SB.PUA1.UARH._Y3F._INT, IRQN)  // _INT: Interrupts
                            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                            ADR0 = Local0
                            IRQN = Arg1
                            ConcatenateResTemplate (BUF0, IBUF, Local1)
                            Return (Local1)
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((^^PC02.UM01 == 0x03))
                            {
                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        Method (UPS3, 2, Serialized)
                        {
                            Name (REGS, Package (0x08)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                Local1 = LCR /* \_SB_.PUA1.UPS3.LCR_ */
                                LCR |= 0x80
                                REGS [Zero] = DLL /* \_SB_.PUA1.UPS3.DLL_ */
                                REGS [One] = DLH /* \_SB_.PUA1.UPS3.DLH_ */
                                LCR = Local1
                                REGS [0x02] = FCR /* \_SB_.PUA1.UPS3.FCR_ */
                                REGS [0x03] = Local1
                                REGS [0x04] = MCR /* \_SB_.PUA1.UPS3.MCR_ */
                                REGS [0x05] = PCLK /* \_SB_.PUA1.UPS3.PCLK */
                                If (((DerefOf (REGS [0x05]) != Zero) && (
                                    DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                                {
                                    URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                                }

                                PPRR = Zero
                                PPRR |= Zero
                                PMEC = 0x03
                                PMEC |= Zero
                            }
                        }

                        Method (UPS0, 2, Serialized)
                        {
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                PMEC = Zero
                                PMEC |= Zero
                                PPRR = 0x07
                                Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                                If (((DerefOf (Local0 [0x05]) != Zero) && (
                                    DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                                {
                                    LCR |= 0x80
                                    DLL = DerefOf (Local0 [Zero])
                                    DLH = DerefOf (Local0 [One])
                                    LCR = DerefOf (Local0 [0x03])
                                    FCR = DerefOf (Local0 [0x02])
                                    MCR = DerefOf (Local0 [0x04])
                                    Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                    PCLK = Local2
                                    Local2 = (DerefOf (Local0 [0x05]) | One)
                                    PCLK = Local2
                                }
                            }
                        }

                        Method (UPSC, 1, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                PMEC,   8
                            }

                            Return ((PMEC & 0x03))
                        }

                        If ((^PC02.UM01 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (^^PC02.UC01))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (^^PC02.UP01, ^^PC02.UC01)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (^^PC02.UP01, ^^PC02.UC01)
                            }
                        }
                    }
                }
            }

            If ((\_SB.PC02.UM02 == One))
            {
                Scope (_SB.PC02)
                {
                    Device (UA02)
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (UDSM (Arg0))
                            {
                                Return (UDMA (Arg2, UD02))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x00190002)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (UC02, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }
                }
            }

            Scope (_SB)
            {
                If (((PC02.UM02 == 0x02) || (PC02.UM02 == 0x03)))
                {
                    Device (PUA2)
                    {
                        Name (_DDN, "MtlPchSerialIoUart2")  // _DDN: DOS Device Name
                        Name (_UID, "MtlPchSerialIoUart2")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (^^PC02.UM02))
                        }

                        Method (UHID, 1, Serialized)
                        {
                            If ((Arg0 == 0x03))
                            {
                                Return (0x0105D041)
                            }

                            Return (0x020CD041)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (^^PC02.UC02, ^^PC02.UI02))
                        }

                        Method (UARH, 2, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Name (BUF0, ResourceTemplate ()
                            {
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000008,         // Address Length
                                    _Y40)
                            })
                            Name (IBUF, ResourceTemplate ()
                            {
                                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y41)
                                {
                                    0x00000014,
                                }
                            })
                            CreateDWordField (BUF0, \_SB.PUA2.UARH._Y40._BAS, ADR0)  // _BAS: Base Address
                            CreateDWordField (IBUF, \_SB.PUA2.UARH._Y41._INT, IRQN)  // _INT: Interrupts
                            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                            ADR0 = Local0
                            IRQN = Arg1
                            ConcatenateResTemplate (BUF0, IBUF, Local1)
                            Return (Local1)
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((^^PC02.UM02 == 0x03))
                            {
                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        Method (UPS3, 2, Serialized)
                        {
                            Name (REGS, Package (0x08)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                Local1 = LCR /* \_SB_.PUA2.UPS3.LCR_ */
                                LCR |= 0x80
                                REGS [Zero] = DLL /* \_SB_.PUA2.UPS3.DLL_ */
                                REGS [One] = DLH /* \_SB_.PUA2.UPS3.DLH_ */
                                LCR = Local1
                                REGS [0x02] = FCR /* \_SB_.PUA2.UPS3.FCR_ */
                                REGS [0x03] = Local1
                                REGS [0x04] = MCR /* \_SB_.PUA2.UPS3.MCR_ */
                                REGS [0x05] = PCLK /* \_SB_.PUA2.UPS3.PCLK */
                                If (((DerefOf (REGS [0x05]) != Zero) && (
                                    DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                                {
                                    URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                                }

                                PPRR = Zero
                                PPRR |= Zero
                                PMEC = 0x03
                                PMEC |= Zero
                            }
                        }

                        Method (UPS0, 2, Serialized)
                        {
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                PMEC = Zero
                                PMEC |= Zero
                                PPRR = 0x07
                                Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                                If (((DerefOf (Local0 [0x05]) != Zero) && (
                                    DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                                {
                                    LCR |= 0x80
                                    DLL = DerefOf (Local0 [Zero])
                                    DLH = DerefOf (Local0 [One])
                                    LCR = DerefOf (Local0 [0x03])
                                    FCR = DerefOf (Local0 [0x02])
                                    MCR = DerefOf (Local0 [0x04])
                                    Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                    PCLK = Local2
                                    Local2 = (DerefOf (Local0 [0x05]) | One)
                                    PCLK = Local2
                                }
                            }
                        }

                        Method (UPSC, 1, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                PMEC,   8
                            }

                            Return ((PMEC & 0x03))
                        }

                        If ((^PC02.UM02 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (^^PC02.UC02))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (^^PC02.UP02, ^^PC02.UC02)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (^^PC02.UP02, ^^PC02.UC02)
                            }
                        }
                    }
                }
            }

            If ((\_SB.PC02.UM03 == One))
            {
                Scope (_SB.PC02)
                {
                    Device (UA03)
                    {
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (UDSM (Arg0))
                            {
                                Return (UDMA (Arg2, UD03))
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x00130001)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SOD3 (UC03, One, One)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                        }
                    }
                }
            }

            Scope (_SB)
            {
                If (((PC02.UM03 == 0x02) || (PC02.UM03 == 0x03)))
                {
                    Device (PUA3)
                    {
                        Name (_DDN, "MtlPchSerialIoUart3")  // _DDN: DOS Device Name
                        Name (_UID, "MtlPchSerialIoUart3")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Return (UHID (^^PC02.UM03))
                        }

                        Method (UHID, 1, Serialized)
                        {
                            If ((Arg0 == 0x03))
                            {
                                Return (0x0105D041)
                            }

                            Return (0x020CD041)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (UARH (^^PC02.UC03, ^^PC02.UI03))
                        }

                        Method (UARH, 2, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Name (BUF0, ResourceTemplate ()
                            {
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000008,         // Address Length
                                    _Y42)
                            })
                            Name (IBUF, ResourceTemplate ()
                            {
                                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y43)
                                {
                                    0x00000014,
                                }
                            })
                            CreateDWordField (BUF0, \_SB.PUA3.UARH._Y42._BAS, ADR0)  // _BAS: Base Address
                            CreateDWordField (IBUF, \_SB.PUA3.UARH._Y43._INT, IRQN)  // _INT: Interrupts
                            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                            ADR0 = Local0
                            IRQN = Arg1
                            ConcatenateResTemplate (BUF0, IBUF, Local1)
                            Return (Local1)
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((^^PC02.UM03 == 0x03))
                            {
                                Return (0x0F)
                            }

                            Return (0x08)
                        }

                        Method (UPS3, 2, Serialized)
                        {
                            Name (REGS, Package (0x08)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                Local1 = LCR /* \_SB_.PUA3.UPS3.LCR_ */
                                LCR |= 0x80
                                REGS [Zero] = DLL /* \_SB_.PUA3.UPS3.DLL_ */
                                REGS [One] = DLH /* \_SB_.PUA3.UPS3.DLH_ */
                                LCR = Local1
                                REGS [0x02] = FCR /* \_SB_.PUA3.UPS3.FCR_ */
                                REGS [0x03] = Local1
                                REGS [0x04] = MCR /* \_SB_.PUA3.UPS3.MCR_ */
                                REGS [0x05] = PCLK /* \_SB_.PUA3.UPS3.PCLK */
                                If (((DerefOf (REGS [0x05]) != Zero) && (
                                    DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                                {
                                    URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                                }

                                PPRR = Zero
                                PPRR |= Zero
                                PMEC = 0x03
                                PMEC |= Zero
                            }
                        }

                        Method (UPS0, 2, Serialized)
                        {
                            If ((Arg0 == One))
                            {
                                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                                Field (UACF, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x10), 
                                    BAR0,   64
                                }

                                Field (UACF, ByteAcc, NoLock, Preserve)
                                {
                                    Offset (0x84), 
                                    PMEC,   8
                                }

                                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                                Field (UAB0, ByteAcc, Lock, Preserve)
                                {
                                    DLL,    8, 
                                    DLH,    8, 
                                    FCR,    8, 
                                    LCR,    8, 
                                    MCR,    8, 
                                    Offset (0x81), 
                                    PPRR,   8
                                }

                                Field (UAB0, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0x80), 
                                    PCLK,   32
                                }

                                PMEC = Zero
                                PMEC |= Zero
                                PPRR = 0x07
                                Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                                If (((DerefOf (Local0 [0x05]) != Zero) && (
                                    DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                                {
                                    LCR |= 0x80
                                    DLL = DerefOf (Local0 [Zero])
                                    DLH = DerefOf (Local0 [One])
                                    LCR = DerefOf (Local0 [0x03])
                                    FCR = DerefOf (Local0 [0x02])
                                    MCR = DerefOf (Local0 [0x04])
                                    Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                    PCLK = Local2
                                    Local2 = (DerefOf (Local0 [0x05]) | One)
                                    PCLK = Local2
                                }
                            }
                        }

                        Method (UPSC, 1, Serialized)
                        {
                            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                PMEC,   8
                            }

                            Return ((PMEC & 0x03))
                        }

                        If ((^PC02.UM03 == 0x03))
                        {
                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (UPSC (^^PC02.UC03))
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                UPS3 (^^PC02.UP03, ^^PC02.UC03)
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                UPS0 (^^PC02.UP03, ^^PC02.UC03)
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC02)
            {
                If ((CRFP == One))
                {
                    If ((CWFC == One))
                    {
                        Device (CNVW)
                        {
                            Name (_ADR, 0x00140003)  // _ADR: Address
                            Name (PU2C, Zero)
                            PU2C = ^PU2C /* \_SB_.PC02.PU2C */
                            Method (BASE, 0, NotSerialized)
                            {
                                Local0 = ^^^PC00.PC2M (_ADR, PBSB)
                                Return (Local0)
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x6B, 0x04))
                            }

                            Name (RSTT, Zero)
                            Name (PRRS, Zero)
                            OperationRegion (CWAR, SystemMemory, BASE (), 0x0100)
                            Field (CWAR, WordAcc, NoLock, Preserve)
                            {
                                VDID,   32, 
                                Offset (0x44), 
                                    ,   28, 
                                WFLR,   1, 
                                Offset (0x48), 
                                    ,   15, 
                                WIFR,   1
                            }

                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                Return (0x03)
                            }

                            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                            {
                            }

                            PowerResource (WRST, 0x05, 0x0000)
                            {
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (One)
                                }

                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                }

                                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                                {
                                    Local0 = Acquire (CNMT, 0x03E8)
                                    If ((Local0 == Zero))
                                    {
                                        CFLR ()
                                        PRRS = One
                                        If ((CondRefOf (RSTT) && (RSTT == One)))
                                        {
                                            Local5 = ^^^SBPC.PCRR (PCNV, 0x44)
                                            If (((^^^SBPC.PCRR (PCNV, 0x44) & 0x02) == Zero))
                                            {
                                                If ((GBTR () == One))
                                                {
                                                    BTRK (Zero)
                                                    Sleep (0xA0)
                                                    Local2 = One
                                                }

                                                ^^^SBPC.PCRO (PCNV, 0x44, 0x03)
                                                Sleep (0x0A)
                                                Local1 = ^^^SBPC.PCRR (PCNV, 0x44)
                                                If ((((Local1 & 0x02) == Zero) && (Local1 & 0x04)))
                                                {
                                                    PRRS = 0x02
                                                    If ((Local2 == One))
                                                    {
                                                        BTRK (One)
                                                        Sleep (0xA0)
                                                    }
                                                }
                                                Else
                                                {
                                                    PRRS = 0x04
                                                    BTRK (One)
                                                }
                                            }
                                            Else
                                            {
                                                PRRS = 0x03
                                            }
                                        }

                                        Release (CNMT)
                                    }
                                }
                            }

                            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                            {
                                WRST
                            })
                            Method (CFLR, 0, NotSerialized)
                            {
                                If ((WFLR == One))
                                {
                                    WIFR = One
                                }
                            }
                        }
                    }
                }
            }

            Scope (_SB.PC02)
            {
                Method (TINT, 1, Serialized)
                {
                    Name (TINR, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                            "\\_SB.PGPI", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (TINR, 0x17, INT1)
                    INT1 = ^^PGPI.GNUM (Arg0)
                    Return (TINR) /* \_SB_.PC02.TINT.TINR */
                }

                Device (THC0)
                {
                    Name (_ADR, 0x00100000)  // _ADR: Address
                    Name (RSTL, Zero)
                    OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                    Field (THCR, ByteAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    If ((VDID != 0xFFFFFFFF))
                    {
                        Name (ICRS, Buffer (0x0C){})
                        CreateWordField (ICRS, Zero, DADR)
                        CreateQWordField (ICRS, 0x02, DSPD)
                        CreateByteField (ICRS, 0x0A, DADM)
                        Name (ISUB, Buffer (0x91){})
                        CreateQWordField (ISUB, Zero, SMHX)
                        CreateQWordField (ISUB, 0x08, SMLX)
                        CreateQWordField (ISUB, 0x10, SMTD)
                        CreateQWordField (ISUB, 0x18, SMRD)
                        CreateQWordField (ISUB, 0x20, FMHX)
                        CreateQWordField (ISUB, 0x28, FMLX)
                        CreateQWordField (ISUB, 0x30, FMTD)
                        CreateQWordField (ISUB, 0x38, FMRD)
                        CreateQWordField (ISUB, 0x40, FMSL)
                        CreateQWordField (ISUB, 0x48, FPHX)
                        CreateQWordField (ISUB, 0x50, FPLX)
                        CreateQWordField (ISUB, 0x58, FPTD)
                        CreateQWordField (ISUB, 0x60, FPRD)
                        CreateQWordField (ISUB, 0x68, HMHX)
                        CreateQWordField (ISUB, 0x70, HMLX)
                        CreateQWordField (ISUB, 0x78, HMTD)
                        CreateQWordField (ISUB, 0x80, HMRD)
                        CreateQWordField (ISUB, 0x88, HMSL)
                        DADR = Zero
                        DSPD = Zero
                        DADM = Zero
                        SMHX = Zero
                        SMLX = Zero
                        SMTD = Zero
                        SMRD = Zero
                        FMHX = Zero
                        FMLX = Zero
                        FMTD = Zero
                        FMRD = Zero
                        FMSL = Zero
                        FPHX = Zero
                        FPLX = Zero
                        FPTD = Zero
                        FPRD = Zero
                        HMHX = Zero
                        HMLX = Zero
                        HMTD = Zero
                        HMRD = Zero
                        HMSL = Zero
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((TMD0 == One))
                            {
                                If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Switch (ToInteger (Arg1))
                                            {
                                                Case (0x02)
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x7F                                             // .
                                                    })
                                                }
                                                Default
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x00                                             // .
                                                    })
                                                }

                                            }
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T040))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T050))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T060))
                                        }
                                        Case (0x04)
                                        {
                                            Name (BUF4, Buffer (One){})
                                            Local0 = ToBuffer (T070)
                                            BUF4 [Zero] = DerefOf (Local0 [Zero])
                                            Return (BUF4) /* \_SB_.PC02.THC0._DSM.BUF4 */
                                        }
                                        Case (0x05)
                                        {
                                            Name (BUF5, Buffer (One){})
                                            Local1 = ToBuffer (T080)
                                            BUF5 [Zero] = DerefOf (Local1 [Zero])
                                            Return (BUF5) /* \_SB_.PC02.THC0._DSM.BUF5 */
                                        }
                                        Case (0x06)
                                        {
                                            Return (ToInteger (T090))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }

                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                                If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T030))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T0C0))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T0D0))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }
                                }
                            }

                            If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (ToInteger (T0A0))
                                    }
                                    Case (0x02)
                                    {
                                        Return (ToInteger (T0B0))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (ToInteger (T0E0))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Zero)
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            Return (Buffer (Zero){})
                        }

                        If ((TIN0 != Zero))
                        {
                            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                If (CondRefOf (PINT))
                                {
                                    Return (PINT ())
                                }
                                Else
                                {
                                    Return (TINT (TIN0))
                                }
                            }
                        }

                        If ((TMD0 != Zero))
                        {
                            Method (_INI, 0, NotSerialized)  // _INI: Initialize
                            {
                                ^^^PGPI.SHPO (T010, One)
                                ^^^PGPI.SPMV (T010, Zero)
                                ^^^PGPI.SPC0 (T010, (0x42000200 | (~(T020 & One) & One
                                    )))
                                If (CondRefOf (^CINI))
                                {
                                    CINI (T010, T0F0)
                                }
                            }

                            Method (_RST, 0, Serialized)  // _RST: Device Reset
                            {
                                While ((RSTL == One))
                                {
                                    Sleep (0x0A)
                                }

                                RSTL = One
                                ^^^PGPI.SGOV (T010, (T020 & One))
                                Sleep (T0F0)
                                ^^^PGPI.SGOV (T010, (~(T020 & One) & One))
                                RSTL = Zero
                            }

                            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                ICRS, 
                                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                                ISUB
                            })
                        }
                    }
                }

                Device (THC1)
                {
                    Name (_ADR, 0x00100001)  // _ADR: Address
                    Name (RSTL, Zero)
                    OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                    Field (THCR, ByteAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    If ((VDID != 0xFFFFFFFF))
                    {
                        Name (ICRS, Buffer (0x0C){})
                        CreateWordField (ICRS, Zero, DADR)
                        CreateQWordField (ICRS, 0x02, DSPD)
                        CreateByteField (ICRS, 0x0A, DADM)
                        Name (ISUB, Buffer (0x91){})
                        CreateQWordField (ISUB, Zero, SMHX)
                        CreateQWordField (ISUB, 0x08, SMLX)
                        CreateQWordField (ISUB, 0x10, SMTD)
                        CreateQWordField (ISUB, 0x18, SMRD)
                        CreateQWordField (ISUB, 0x20, FMHX)
                        CreateQWordField (ISUB, 0x28, FMLX)
                        CreateQWordField (ISUB, 0x30, FMTD)
                        CreateQWordField (ISUB, 0x38, FMRD)
                        CreateQWordField (ISUB, 0x40, FMSL)
                        CreateQWordField (ISUB, 0x48, FPHX)
                        CreateQWordField (ISUB, 0x50, FPLX)
                        CreateQWordField (ISUB, 0x58, FPTD)
                        CreateQWordField (ISUB, 0x60, FPRD)
                        CreateQWordField (ISUB, 0x68, HMHX)
                        CreateQWordField (ISUB, 0x70, HMLX)
                        CreateQWordField (ISUB, 0x78, HMTD)
                        CreateQWordField (ISUB, 0x80, HMRD)
                        CreateQWordField (ISUB, 0x88, HMSL)
                        DADR = Zero
                        DSPD = Zero
                        DADM = Zero
                        SMHX = Zero
                        SMLX = Zero
                        SMTD = Zero
                        SMRD = Zero
                        FMHX = Zero
                        FMLX = Zero
                        FMTD = Zero
                        FMRD = Zero
                        FMSL = Zero
                        FPHX = Zero
                        FPLX = Zero
                        FPTD = Zero
                        FPRD = Zero
                        HMHX = Zero
                        HMLX = Zero
                        HMTD = Zero
                        HMRD = Zero
                        HMSL = Zero
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If (PCIC (Arg0))
                            {
                                Return (PCID (Arg0, Arg1, Arg2, Arg3))
                            }

                            If ((TMD1 == One))
                            {
                                If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Switch (ToInteger (Arg1))
                                            {
                                                Case (0x02)
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x7F                                             // .
                                                    })
                                                }
                                                Default
                                                {
                                                    Return (Buffer (One)
                                                    {
                                                         0x00                                             // .
                                                    })
                                                }

                                            }
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T041))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T051))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T061))
                                        }
                                        Case (0x04)
                                        {
                                            Name (BUF4, Buffer (One){})
                                            Local0 = ToBuffer (T071)
                                            BUF4 [Zero] = DerefOf (Local0 [Zero])
                                            Return (BUF4) /* \_SB_.PC02.THC1._DSM.BUF4 */
                                        }
                                        Case (0x05)
                                        {
                                            Name (BUF5, Buffer (One){})
                                            Local1 = ToBuffer (T081)
                                            BUF5 [Zero] = DerefOf (Local1 [Zero])
                                            Return (BUF5) /* \_SB_.PC02.THC1._DSM.BUF5 */
                                        }
                                        Case (0x06)
                                        {
                                            Return (ToInteger (T091))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }

                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                                If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (ToInteger (T031))
                                        }
                                        Case (0x02)
                                        {
                                            Return (ToInteger (T0C1))
                                        }
                                        Case (0x03)
                                        {
                                            Return (ToInteger (T0D1))
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }
                                }
                            }

                            If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (ToInteger (T0A1))
                                    }
                                    Case (0x02)
                                    {
                                        Return (ToInteger (T0B1))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (ToInteger (T0E1))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Zero)
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }

                            Return (Buffer (Zero){})
                        }

                        If ((TIN1 != Zero))
                        {
                            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                If (CondRefOf (PINT))
                                {
                                    Return (PINT ())
                                }
                                Else
                                {
                                    Return (TINT (TIN1))
                                }
                            }
                        }

                        If ((TMD1 != Zero))
                        {
                            Method (_INI, 0, NotSerialized)  // _INI: Initialize
                            {
                                ^^^PGPI.SHPO (T011, One)
                                ^^^PGPI.SPMV (T011, Zero)
                                ^^^PGPI.SPC0 (T011, (0x42000200 | (~(T021 & One) & One
                                    )))
                                If (CondRefOf (^CINI))
                                {
                                    CINI (T011, T0F1)
                                }
                            }

                            Method (_RST, 0, Serialized)  // _RST: Device Reset
                            {
                                While ((RSTL == One))
                                {
                                    Sleep (0x0A)
                                }

                                RSTL = One
                                ^^^PGPI.SGOV (T011, (T021 & One))
                                Sleep (T0F1)
                                ^^^PGPI.SGOV (T011, (~(T021 & One) & One))
                                RSTL = Zero
                            }

                            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                ICRS, 
                                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                                ISUB
                            })
                        }
                    }
                }
            }

            Scope (_SB)
            {
                Device (PGPI)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((GPHD == One))
                        {
                            Return ("PNP0C02")
                        }

                        Return ("INTC1084")
                    }

                    Name (SBRG, Zero)
                    SBRG = ^PC02.SBRG /* \_SB_.PC02.SBRG */
                    Name (GEI0, Zero)
                    GEI0 = ^PC02.GEI0 /* \_SB_.PC02.GEI0 */
                    Name (GEI1, Zero)
                    GEI1 = ^PC02.GEI1 /* \_SB_.PC02.GEI1 */
                    Name (GEI2, Zero)
                    GEI2 = ^PC02.GEI2 /* \_SB_.PC02.GEI2 */
                    Name (GED0, Zero)
                    GED0 = ^PC02.GED0 /* \_SB_.PC02.GED0 */
                    Name (GED1, Zero)
                    GED1 = ^PC02.GED1 /* \_SB_.PC02.GED1 */
                    Name (GED2, Zero)
                    GED2 = ^PC02.GED2 /* \_SB_.PC02.GED2 */
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (RBFS, ResourceTemplate ()
                        {
                            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y44)
                            {
                                0x0000000E,
                            }
                            QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                                0x0000000000000000, // Granularity
                                0x0000000000000000, // Range Minimum
                                0x000000000000FFFF, // Range Maximum
                                0x0000000000000000, // Translation Offset
                                0x0000000000010000, // Length
                                ,, _Y45, AddressRangeMemory, TypeStatic)
                            QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                                0x0000000000000000, // Granularity
                                0x0000000000000000, // Range Minimum
                                0x000000000000FFFF, // Range Maximum
                                0x0000000000000000, // Translation Offset
                                0x0000000000010000, // Length
                                ,, _Y46, AddressRangeMemory, TypeStatic)
                            QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                                0x0000000000000000, // Granularity
                                0x0000000000000000, // Range Minimum
                                0x000000000000FFFF, // Range Maximum
                                0x0000000000000000, // Translation Offset
                                0x0000000000010000, // Length
                                ,, _Y47, AddressRangeMemory, TypeStatic)
                            QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                                0x0000000000000000, // Granularity
                                0x0000000000000000, // Range Minimum
                                0x000000000000FFFF, // Range Maximum
                                0x0000000000000000, // Translation Offset
                                0x0000000000010000, // Length
                                ,, _Y48, AddressRangeMemory, TypeStatic)
                            QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                                0x0000000000000000, // Granularity
                                0x0000000000000000, // Range Minimum
                                0x000000000000FFFF, // Range Maximum
                                0x0000000000000000, // Translation Offset
                                0x0000000000010000, // Length
                                ,, _Y49, AddressRangeMemory, TypeStatic)
                        })
                        CreateDWordField (RBFS, \_SB.PGPI._CRS._Y44._INT, INTH)  // _INT: Interrupts
                        INTH = SGIR /* \SGIR */
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y45._MIN, CMN0)  // _MIN: Minimum Base Address
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y45._MAX, CMX0)  // _MAX: Maximum Base Address
                        CMN0 = (SBRG + 0x006E0000)
                        CMX0 = (CMN0 + 0xFFFF)
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y46._MIN, CMN1)  // _MIN: Minimum Base Address
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y46._MAX, CMX1)  // _MAX: Maximum Base Address
                        CMN1 = (SBRG + 0x006D0000)
                        CMX1 = (CMN1 + 0xFFFF)
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y47._MIN, CMN3)  // _MIN: Minimum Base Address
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y47._MAX, CMX3)  // _MAX: Maximum Base Address
                        CMN3 = (SBRG + 0x006B0000)
                        CMX3 = (CMN3 + 0xFFFF)
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y48._MIN, CMN4)  // _MIN: Minimum Base Address
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y48._MAX, CMX4)  // _MAX: Maximum Base Address
                        CMN4 = (SBRG + 0x006A0000)
                        CMX4 = (CMN4 + 0xFFFF)
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y49._MIN, CMN5)  // _MIN: Minimum Base Address
                        CreateQWordField (RBFS, \_SB.PGPI._CRS._Y49._MAX, CMX5)  // _MAX: Maximum Base Address
                        CMN5 = (SBRG + 0x00690000)
                        CMX5 = (CMN5 + 0xFFFF)
                        Return (RBFS) /* \_SB_.PGPI._CRS.RBFS */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((GPHD == One))
                        {
                            Return (0x08)
                        }

                        Return (0x0F)
                    }

                    Name (GPCS, Package (0x06)
                    {
                        Package (0x02)
                        {
                            0x006E0000, 
                            Package (0x04)
                            {
                                Package (0x09)
                                {
                                    0x19, 
                                    0x0600, 
                                    0x0150, 
                                    0xB0, 
                                    0x0240, 
                                    0x0110, 
                                    0x0114, 
                                    Zero, 
                                    Zero
                                }, 

                                Package (0x09)
                                {
                                    0x0E, 
                                    0x0790, 
                                    0x0154, 
                                    0xC0, 
                                    0x0244, 
                                    0x0118, 
                                    0x011C, 
                                    0x20, 
                                    One
                                }, 

                                Package (0x09)
                                {
                                    0x12, 
                                    0x0870, 
                                    0x0158, 
                                    0xC8, 
                                    0x0248, 
                                    0x0120, 
                                    0x0124, 
                                    0x40, 
                                    0x02
                                }, 

                                Package (0x09)
                                {
                                    0x1F, 
                                    0x0990, 
                                    0x015C, 
                                    0xD4, 
                                    0x024C, 
                                    0x0128, 
                                    0x012C, 
                                    0x60, 
                                    0x03
                                }
                            }
                        }, 

                        Package (0x02)
                        {
                            0x006D0000, 
                            Package (0x03)
                            {
                                Package (0x09)
                                {
                                    0x0F, 
                                    0x0600, 
                                    0x0150, 
                                    0xB0, 
                                    0x0240, 
                                    0x0110, 
                                    0x0114, 
                                    0x80, 
                                    0x04
                                }, 

                                Package (0x09)
                                {
                                    0x0C, 
                                    0x0720, 
                                    0x0154, 
                                    0xB8, 
                                    0x0244, 
                                    0x0118, 
                                    0x011C, 
                                    0xA0, 
                                    0x05
                                }, 

                                Package (0x09)
                                {
                                    0x16, 
                                    0x07B0, 
                                    0x0158, 
                                    0xC0, 
                                    0x0248, 
                                    0x0120, 
                                    0x0124, 
                                    0xC0, 
                                    0x06
                                }
                            }
                        }, 

                        Package (0x02)
                        {
                            0x006C0000, 
                            Package (0x01)
                            {
                                Package (0x09)
                                {
                                    0x11, 
                                    0x0600, 
                                    0x0150, 
                                    0xB0, 
                                    0x0240, 
                                    0x0110, 
                                    0x0114, 
                                    0xFFFF, 
                                    0xFFFF
                                }
                            }
                        }, 

                        Package (0x02)
                        {
                            0x006B0000, 
                            Package (0x06)
                            {
                                Package (0x09)
                                {
                                    0x09, 
                                    0x0600, 
                                    0x0150, 
                                    0xB0, 
                                    0x0240, 
                                    0x0110, 
                                    0x0114, 
                                    0xE0, 
                                    0x08
                                }, 

                                Package (0x09)
                                {
                                    0x18, 
                                    0x0690, 
                                    0x0154, 
                                    0xB8, 
                                    0x0244, 
                                    0x0118, 
                                    0x011C, 
                                    0x0100, 
                                    0x09
                                }, 

                                Package (0x09)
                                {
                                    0x14, 
                                    0x0810, 
                                    0x0158, 
                                    0xC4, 
                                    0x0248, 
                                    0x0120, 
                                    0x0124, 
                                    0x0120, 
                                    0x0A
                                }, 

                                Package (0x09)
                                {
                                    0x04, 
                                    0x0950, 
                                    0x015C, 
                                    0xD0, 
                                    0x024C, 
                                    0x0128, 
                                    0x012C, 
                                    0x0140, 
                                    0x0B
                                }, 

                                Package (0x09)
                                {
                                    0x08, 
                                    0x0990, 
                                    0x0160, 
                                    0xD4, 
                                    0x0250, 
                                    0x0130, 
                                    0x0134, 
                                    0x0160, 
                                    0x0C
                                }, 

                                Package (0x09)
                                {
                                    0x1F, 
                                    0x0A10, 
                                    0x0164, 
                                    0xD8, 
                                    0x0254, 
                                    0x0138, 
                                    0x013C, 
                                    0x0180, 
                                    0x0D
                                }
                            }
                        }, 

                        Package (0x02)
                        {
                            0x006A0000, 
                            Package (0x04)
                            {
                                Package (0x09)
                                {
                                    0x08, 
                                    0x0600, 
                                    0x0150, 
                                    0xB0, 
                                    0x0240, 
                                    0x0110, 
                                    0x0114, 
                                    0x01A0, 
                                    0x0E
                                }, 

                                Package (0x09)
                                {
                                    0x17, 
                                    0x0680, 
                                    0x0154, 
                                    0xB4, 
                                    0x0244, 
                                    0x0118, 
                                    0x011C, 
                                    0x01C0, 
                                    0x0F
                                }, 

                                Package (0x09)
                                {
                                    0x0E, 
                                    0x07F0, 
                                    0x0158, 
                                    0xC0, 
                                    0x0248, 
                                    0x0120, 
                                    0x0124, 
                                    0x01E0, 
                                    0x10
                                }, 

                                Package (0x09)
                                {
                                    0x18, 
                                    0x08D0, 
                                    0x015C, 
                                    0xC8, 
                                    0x024C, 
                                    0x0128, 
                                    0x012C, 
                                    0x0200, 
                                    0x11
                                }
                            }
                        }, 

                        Package (0x02)
                        {
                            0x00690000, 
                            Package (0x02)
                            {
                                Package (0x09)
                                {
                                    0x15, 
                                    0x0600, 
                                    0x0150, 
                                    0xB0, 
                                    0x0240, 
                                    0x0110, 
                                    0x0114, 
                                    0x0220, 
                                    0x12
                                }, 

                                Package (0x09)
                                {
                                    0x10, 
                                    0x0750, 
                                    0x0154, 
                                    0xBC, 
                                    0x0244, 
                                    0x0118, 
                                    0x011C, 
                                    0x0240, 
                                    0x13
                                }
                            }
                        }
                    })
                    Method (GDSC, 0, NotSerialized)
                    {
                        Return (GPCS) /* \_SB_.PGPI.GPCS */
                    }

                    Method (GMXG, 0, NotSerialized)
                    {
                        Return (0x14)
                    }

                    Method (GCMP, 1, NotSerialized)
                    {
                        Local0 = GDSC ()
                        Return (DerefOf (DerefOf (Local0 [Arg0]) [Zero]))
                    }

                    Method (GINF, 3, NotSerialized)
                    {
                        Local0 = GDSC ()
                        Return (DerefOf (DerefOf (DerefOf (DerefOf (Local0 [Arg0]) [
                            One]) [Arg1]) [Arg2]))
                    }

                    Method (GCOM, 1, Serialized)
                    {
                        Local0 = ((Arg0 >> 0x0A) & 0x07)
                        Return (Local0)
                    }

                    Method (GGRP, 1, Serialized)
                    {
                        Local0 = ((Arg0 >> 0x07) & 0x07)
                        Return (Local0)
                    }

                    Method (GNMB, 1, Serialized)
                    {
                        Return ((Arg0 & 0x7F))
                    }

                    Method (GADR, 2, NotSerialized)
                    {
                        Local2 = GGRP (Arg0)
                        Local3 = GCOM (Arg0)
                        Local0 = (GCMP (Local3) + SBRG)
                        Local1 = GINF (Local3, Local2, Arg1)
                        Return ((Local0 + Local1))
                    }

                    Method (GNUM, 1, NotSerialized)
                    {
                        Local0 = GNMB (Arg0)
                        Local1 = GGRP (Arg0)
                        Local2 = GCOM (Arg0)
                        Return ((GINF (Local2, Local1, 0x07) + Local0))
                    }

                    Method (GGGP, 1, NotSerialized)
                    {
                        Local0 = GGRP (Arg0)
                        Local1 = GCOM (Arg0)
                        Return (GINF (Local1, Local0, 0x08))
                    }

                    Method (INUM, 1, NotSerialized)
                    {
                        Return ((GPC1 (Arg0) & 0x7F))
                    }

                    Method (GGPE, 1, NotSerialized)
                    {
                        Local0 = GGGP (Arg0)
                        Local1 = GNMB (Arg0)
                        Local2 = (Local1 >> 0x05)
                        If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                            (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                            Local2))))
                        {
                            Return (0x6F)
                        }
                        Else
                        {
                            If (((GEI0 == Local0) && (GED0 == Local2)))
                            {
                                Local3 = Zero
                            }
                            ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                            {
                                Local3 = One
                            }
                            ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                            {
                                Local3 = 0x02
                            }
                            Else
                            {
                                BreakPoint
                                Return (Zero)
                            }

                            Return ((((Local3 - Local2) * 0x20) + Local1))
                        }
                    }

                    Method (GPC0, 1, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        Return (TEMP) /* \_SB_.PGPI.GPC0.TEMP */
                    }

                    Method (SPC0, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        TEMP = Arg1
                    }

                    Method (GPC1, 1, Serialized)
                    {
                        Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                            ) + 0x04)
                        OperationRegion (PDW1, SystemMemory, Local2, 0x04)
                        Field (PDW1, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        Return (TEMP) /* \_SB_.PGPI.GPC1.TEMP */
                    }

                    Method (SPC1, 2, Serialized)
                    {
                        Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                            ) + 0x04)
                        OperationRegion (PDW1, SystemMemory, Local2, 0x04)
                        Field (PDW1, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        TEMP = Arg1
                    }

                    Method (SRXO, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   28, 
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        TEMP = Arg1
                    }

                    Method (GGIV, 1, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   1, 
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        Return (TEMP) /* \_SB_.PGPI.GGIV.TEMP */
                    }

                    Method (GGOV, 1, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        Return (TEMP) /* \_SB_.PGPI.GGOV.TEMP */
                    }

                    Method (SGOV, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        TEMP = Arg1
                    }

                    Method (GGII, 1, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   23, 
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        Return (TEMP) /* \_SB_.PGPI.GGII.TEMP */
                    }

                    Method (SGII, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   23, 
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        TEMP = Arg1
                    }

                    Method (GPMV, 1, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   10, 
                            TEMP,   3, 
                            Offset (0x04)
                        }

                        Return (TEMP) /* \_SB_.PGPI.GPMV.TEMP */
                    }

                    Method (SPMV, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   10, 
                            TEMP,   3, 
                            Offset (0x04)
                        }

                        TEMP = Arg1
                    }

                    Method (GHPO, 1, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
                        Local4 = (Local1 & 0x1F)
                        OperationRegion (PREG, SystemMemory, Local3, 0x04)
                        Field (PREG, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        Return (((TEMP >> Local4) & One))
                    }

                    Method (SHPO, 2, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
                        Local4 = (Local1 & 0x1F)
                        OperationRegion (PREG, SystemMemory, Local3, 0x04)
                        Field (PREG, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        If (Arg1)
                        {
                            TEMP |= (One << Local4)
                        }
                        Else
                        {
                            TEMP &= ~(One << Local4)
                        }
                    }

                    Method (GGPO, 1, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local2 = (GADR (Arg0, 0x03) + ((Local1 >> 0x03) * 0x04
                            ))
                        OperationRegion (PREG, SystemMemory, Local2, 0x04)
                        Field (PREG, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                            0x03))
                    }

                    Method (SGRA, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   20, 
                            TEMP,   1, 
                            Offset (0x04)
                        }

                        TEMP = Arg1
                    }

                    Method (SGWP, 2, Serialized)
                    {
                        Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                            ) + 0x04)
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   10, 
                            TEMP,   4, 
                            Offset (0x04)
                        }

                        TEMP = Arg1
                    }

                    Method (CGPI, 1, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local4 = (Local1 >> 0x05)
                        Local3 = GADR (Arg0, 0x04)
                        If (((Local3 & 0xFFFF) != 0xFFFF))
                        {
                            OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                            Field (GPPX, AnyAcc, NoLock, Preserve)
                            {
                                STSX,   32
                            }

                            Local2 = (One << (Local1 % 0x20))
                            STSX = Local2
                        }
                    }

                    Method (CAGS, 1, Serialized)
                    {
                        Local0 = GGGP (Arg0)
                        Local1 = GNMB (Arg0)
                        Local4 = (Local1 >> 0x05)
                        If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                            (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                            Local4))))
                        {
                            Local3 = GADR (Arg0, 0x04)
                            If (((Local3 & 0xFFFF) != 0xFFFF))
                            {
                                OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                                Field (GPPX, AnyAcc, NoLock, Preserve)
                                {
                                    STSX,   32
                                }

                                Local2 = (One << (Local1 % 0x20))
                                STSX = Local2
                            }
                        }
                    }

                    Method (IGPI, 1, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local4 = (Local1 >> 0x05)
                        If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
                        Local3 = (Local1 & 0x1F)
                        OperationRegion (GPPX, SystemMemory, Local2, 0x24)
                        Field (GPPX, AnyAcc, NoLock, Preserve)
                        {
                            STSX,   32, 
                            Offset (0x20), 
                            GENX,   32
                        }

                        Return ((((STSX & GENX) >> Local3) & One))
                    }

                    Method (ISME, 1, Serialized)
                    {
                        Local0 = GGGP (Arg0)
                        Local1 = GNMB (Arg0)
                        Local4 = (Local1 >> 0x05)
                        If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                            ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                            GED2 == Local4))))
                        {
                            Return (Zero)
                        }

                        If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
                        Local3 = (Local1 & 0x1F)
                        OperationRegion (GPPX, SystemMemory, Local2, 0x24)
                        Field (GPPX, AnyAcc, NoLock, Preserve)
                        {
                            STSX,   32, 
                            Offset (0x20), 
                            GENX,   32
                        }

                        Return ((((STSX & GENX) >> Local3) & One))
                    }

                    Method (GRXE, 2, Serialized)
                    {
                        Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                        OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                        Field (PDW0, AnyAcc, NoLock, Preserve)
                        {
                                ,   25, 
                            RCFG,   2, 
                            Offset (0x04)
                        }

                        RCFG = Arg1
                    }

                    Method (GLOC, 2, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local2 = GADR (Arg0, 0x05)
                        OperationRegion (PREG, SystemMemory, Local2, 0x04)
                        Field (PREG, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        Return (((TEMP >> Local1) & One))
                    }

                    Method (GLOT, 2, Serialized)
                    {
                        Local1 = GNMB (Arg0)
                        Local2 = GADR (Arg0, 0x06)
                        OperationRegion (PREG, SystemMemory, Local2, 0x04)
                        Field (PREG, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   32
                        }

                        Return (((TEMP >> Local1) & One))
                    }
                }
            }

            Scope (_SB)
            {
                Device (PCLK)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, "PCHCLK")  // _UID: Unique ID
                    Name (PID, 0xAD)
                    Method (CLKD, 1, NotSerialized)
                    {
                        If ((Arg0 > 0x06))
                        {
                            Local1 = (Arg0 + One)
                            Local1 -= 0x07
                            ^^PC02.SBPC.PCRA (PID, 0x8084, ~(One << Local1))
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x02)
                            ^^PC02.SBPC.PCRA (PID, 0x8080, ~(One << Local1))
                        }
                    }

                    Method (CLKE, 1, NotSerialized)
                    {
                        If ((Arg0 > 0x06))
                        {
                            Local1 = (Arg0 + One)
                            Local1 -= 0x07
                            ^^PC02.SBPC.PCRO (PID, 0x8084, (One << Local1))
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x02)
                            ^^PC02.SBPC.PCRO (PID, 0x8080, (One << Local1))
                        }
                    }

                    Method (SPCO, 2, NotSerialized)
                    {
                        If ((Arg1 == One))
                        {
                            CLKE (Arg0)
                        }
                        Else
                        {
                            CLKD (Arg0)
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Device (RP01)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA1 != Zero))
                    {
                        Return (RPA1) /* \RPA1 */
                    }
                    Else
                    {
                        Return (0x001C0000)
                    }
                }

                Name (SLOT, One)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR1 /* \LTR1 */
                    LMSL = PML1 /* \PML1 */
                    LNSL = PNL1 /* \PNL1 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x0100) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP01))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP01.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP01._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP01.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC0, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR04 ())
                        }
                    }

                    Return (PD04 ())
                }
            }

            Device (RP02)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA2 != Zero))
                    {
                        Return (RPA2) /* \RPA2 */
                    }
                    Else
                    {
                        Return (0x001C0001)
                    }
                }

                Name (SLOT, 0x02)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR2 /* \LTR2 */
                    LMSL = PML2 /* \PML2 */
                    LNSL = PNL2 /* \PNL2 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x0200) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP02))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP02.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP02._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP02.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC0, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR05 ())
                        }
                    }

                    Return (PD05 ())
                }
            }

            Device (RP03)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA3 != Zero))
                    {
                        Return (RPA3) /* \RPA3 */
                    }
                    Else
                    {
                        Return (0x001C0002)
                    }
                }

                Name (SLOT, 0x03)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR3 /* \LTR3 */
                    LMSL = PML3 /* \PML3 */
                    LNSL = PNL3 /* \PNL3 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x0400) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP03))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP03.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP03._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP03.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC0, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR06 ())
                        }
                    }

                    Return (PD06 ())
                }
            }

            Device (RP04)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA4 != Zero))
                    {
                        Return (RPA4) /* \RPA4 */
                    }
                    Else
                    {
                        Return (0x001C0003)
                    }
                }

                Name (SLOT, 0x04)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR4 /* \LTR4 */
                    LMSL = PML4 /* \PML4 */
                    LNSL = PNL4 /* \PNL4 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x0800) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP04))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP04.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP04._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP04.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC0, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR07 ())
                        }
                    }

                    Return (PD07 ())
                }
            }

            Device (RP05)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA5 != Zero))
                    {
                        Return (RPA5) /* \RPA5 */
                    }
                    Else
                    {
                        Return (0x001C0004)
                    }
                }

                Name (SLOT, 0x05)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR5 /* \LTR5 */
                    LMSL = PML5 /* \PML5 */
                    LNSL = PNL5 /* \PNL5 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x1000) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP05))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP05.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP05._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP05.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC1, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR04 ())
                        }
                    }

                    Return (PD04 ())
                }
            }

            Device (RP06)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA6 != Zero))
                    {
                        Return (RPA6) /* \RPA6 */
                    }
                    Else
                    {
                        Return (0x001C0005)
                    }
                }

                Name (SLOT, 0x06)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR6 /* \LTR6 */
                    LMSL = PML6 /* \PML6 */
                    LNSL = PNL6 /* \PNL6 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x2000) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP06))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP06.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP06._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP06.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC1, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR05 ())
                        }
                    }

                    Return (PD05 ())
                }
            }

            Device (RP07)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA7 != Zero))
                    {
                        Return (RPA7) /* \RPA7 */
                    }
                    Else
                    {
                        Return (0x001C0006)
                    }
                }

                Name (SLOT, 0x07)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR7 /* \LTR7 */
                    LMSL = PML7 /* \PML7 */
                    LNSL = PNL7 /* \PNL7 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x4000) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP07))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP07.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP07._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP07.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC1, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR06 ())
                        }
                    }

                    Return (PD06 ())
                }
            }

            Device (RP08)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA8 != Zero))
                    {
                        Return (RPA8) /* \RPA8 */
                    }
                    Else
                    {
                        Return (0x001C0007)
                    }
                }

                Name (SLOT, 0x08)
                Name (PRTP, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR8 /* \LTR8 */
                    LMSL = PML8 /* \PML8 */
                    LNSL = PNL8 /* \PNL8 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x8000) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP08))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP08.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP08._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP08.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC1, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR07 ())
                        }
                    }

                    Return (PD07 ())
                }
            }

            Device (RP09)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPA9 != Zero))
                    {
                        Return (RPA9) /* \RPA9 */
                    }
                    Else
                    {
                        Return (0x00060000)
                    }
                }

                Name (SLOT, 0x09)
                Name (PRTP, 0x04)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTR9 /* \LTR9 */
                    LMSL = PML9 /* \PML9 */
                    LNSL = PNL9 /* \PNL9 */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & One) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP09))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP09.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP09._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP09.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC2, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR04 ())
                        }
                    }

                    Return (PD04 ())
                }
            }

            Device (RP10)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPAA != Zero))
                    {
                        Return (RPAA) /* \RPAA */
                    }
                    Else
                    {
                        Return (0x00060001)
                    }
                }

                Name (SLOT, 0x0A)
                Name (PRTP, 0x04)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTRA /* \LTRA */
                    LMSL = PMLA /* \PMLA */
                    LNSL = PNLA /* \PNLA */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x02) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP10))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP10.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP10._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP10.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC7, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR04 ())
                        }
                    }

                    Return (PD04 ())
                }
            }

            Device (RP11)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPAB != Zero))
                    {
                        Return (RPAB) /* \RPAB */
                    }
                    Else
                    {
                        Return (0x00060002)
                    }
                }

                Name (SLOT, 0x0B)
                Name (PRTP, 0x04)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTRB /* \LTRB */
                    LMSL = PMLB /* \PMLB */
                    LNSL = PNLB /* \PNLB */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x04) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP11))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP11.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP11._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP11.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC7, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR04 ())
                        }
                    }

                    Return (PD04 ())
                }
            }

            Device (RP12)
            {
                Name (PBNU, Zero)
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((RPAC != Zero))
                    {
                        Return (RPAC) /* \RPAC */
                    }
                    Else
                    {
                        Return (0x00010000)
                    }
                }

                Name (SLOT, 0x0C)
                Name (PRTP, 0x04)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTRC /* \LTRC */
                    LMSL = PMLC /* \PMLC */
                    LNSL = PNLC /* \PNLC */
                    If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMSP & 0x20) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP12))
                    {
                        If ((VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP12.PRMV))
                                {
                                    If ((PRMV == One))
                                    {
                                        RD3C = STD3 /* \STD3 */
                                    }
                                }

                                If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }
                        }
                    }
                }

                OperationRegion (PXCS, SystemMemory, PC2M (_ADR (), PBNU), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0x68), 
                        ,   10, 
                    LNRE,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                    Offset (0x32B), 
                    LTSM,   8, 
                    Offset (0x404), 
                    LSOE,   1, 
                    LNSE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((SCB0 != One))
                    {
                        Return (Zero)
                    }

                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = Zero
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        If (((LSOE == One) || (LNSE == One)))
                        {
                            LNRE = One
                            Sleep (One)
                            LNRE = Zero
                        }
                    }

                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    SCB0 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If ((LTEN != Zero))
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                If ((Arg1 >= 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        FUNA = One
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        FUNB = One
                                    }
                                }

                                Return (OPTS) /* \_SB_.PC00.RP12._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP12.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x06))
                            {
                                If ((PIXX == One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If ((BCCX == One))
                        {
                            If ((SCCX == 0x08))
                            {
                                If ((PIXX == 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If ((BCCX == 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If ((STD3 != Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If ((PAHC () || PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0xC7, 0x04))
                            }
                        }

                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If (CondRefOf (ADSD))
                    {
                        Return (ADSD ())
                    }

                    If (CondRefOf (PINI))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }, 

                            ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                            Package (0x00){}
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR04 ())
                        }
                    }

                    Return (PD04 ())
                }

                Scope (PXSX)
                {
                    If ((DGBA != Zero))
                    {
                        Device (PEGB)
                        {
                            Name (_ADR, 0x00010000)  // _ADR: Address
                            Device (PEGE)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                                {
                                    If ((Arg0 == ToUUID ("edbf573d-e352-4ce7-bf23-37ce9f8402b8") /* Unknown UUID */))
                                    {
                                        Switch (ToInteger (Arg2))
                                        {
                                            Case (Zero)
                                            {
                                                If ((Arg1 == One))
                                                {
                                                    Debug = "DG Supported Functions Bitmap "
                                                    Local0 = One
                                                    If ((EDMX != Zero))
                                                    {
                                                        Local0 |= 0x00200000
                                                    }

                                                    Local0 |= 0x00400000
                                                    Return (Local0)
                                                }
                                            }
                                            Case (0x15)
                                            {
                                                Name (DGDB, Buffer (0x05)
                                                {
                                                     0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                                                })
                                                CreateDWordField (DGDB, Zero, DGDF)
                                                CreateByteField (DGDB, 0x04, DGSF)
                                                Local0 = One
                                                If (((DerefOf (Arg3 [Zero]) & One) == Zero))
                                                {
                                                    GGOV (EDMX)
                                                    Local0 = Zero
                                                }
                                                ElseIf (((DerefOf (Arg3 [Zero]) & 0x02) == Zero))
                                                {
                                                    SGOV (EDMX, Zero)
                                                    Local0 = Zero
                                                }
                                                Else
                                                {
                                                    SGOV (EDMX, One)
                                                    Local0 = Zero
                                                }

                                                DGDF = (GGOV (EDMX) << One)
                                                DGSF = Local0
                                                Return (DGDB) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DSM.DGDB */
                                            }
                                            Case (0x16)
                                            {
                                                Switch (ToInteger (Arg3))
                                                {
                                                    Case (Zero)
                                                    {
                                                        If (CondRefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                                        {
                                                            ^^^^^LPCB.H_EC.ECWT (Zero, RefOf (^^^^^LPCB.H_EC.LSTE))
                                                            LIDS = Zero
                                                            CLID = Zero
                                                            Notify (^^^^^LPCB.H_EC.LID0, 0x80) // Status Change
                                                            Return (Zero)
                                                        }
                                                        Else
                                                        {
                                                        }
                                                    }
                                                    Case (One)
                                                    {
                                                        If (CondRefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                                        {
                                                            ^^^^^LPCB.H_EC.ECWT (One, RefOf (^^^^^LPCB.H_EC.LSTE))
                                                            LIDS = One
                                                            CLID = 0x03
                                                            Notify (^^^^^LPCB.H_EC.LID0, 0x80) // Status Change
                                                            Return (Zero)
                                                        }
                                                        Else
                                                        {
                                                        }
                                                    }
                                                    Default
                                                    {
                                                        Return (One)
                                                    }

                                                }
                                            }

                                        }
                                    }

                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                                {
                                    DGDS = (Arg0 & 0x07)
                                }

                                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                                {
                                    DNID = One
                                    If ((DIDL != Zero))
                                    {
                                        DGD1 = DGDL (DIDL)
                                    }

                                    If ((DDL2 != Zero))
                                    {
                                        DGD2 = DGDL (DDL2)
                                    }

                                    If ((DDL3 != Zero))
                                    {
                                        DGD3 = DGDL (DDL3)
                                    }

                                    If ((DDL4 != Zero))
                                    {
                                        DGD4 = DGDL (DDL4)
                                    }

                                    If ((DDL5 != Zero))
                                    {
                                        DGD5 = DGDL (DDL5)
                                    }

                                    If ((DDL6 != Zero))
                                    {
                                        DGD6 = DGDL (DDL6)
                                    }

                                    If ((DDL7 != Zero))
                                    {
                                        DGD7 = DGDL (DDL7)
                                    }

                                    If ((DDL8 != Zero))
                                    {
                                        DGD8 = DGDL (DDL8)
                                    }

                                    If ((DDL9 != Zero))
                                    {
                                        DGD9 = DGDL (DDL9)
                                    }

                                    If ((DD10 != Zero))
                                    {
                                        DGDA = DGDL (DD10)
                                    }

                                    If ((DD11 != Zero))
                                    {
                                        DGDB = DGDL (DD11)
                                    }

                                    If ((DD12 != Zero))
                                    {
                                        DGDC = DGDL (DD12)
                                    }

                                    If ((DD13 != Zero))
                                    {
                                        DGDD = DGDL (DD13)
                                    }

                                    If ((DD14 != Zero))
                                    {
                                        DGDE = DGDL (DD14)
                                    }

                                    If ((DD15 != Zero))
                                    {
                                        DGDF = DGDL (DD15)
                                    }

                                    If ((DNID == One))
                                    {
                                        Name (TMP1, Package (0x01)
                                        {
                                            0xFFFFFFFF
                                        })
                                        TMP1 [Zero] = (0x00010000 | DGD1)
                                        Return (TMP1) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP1 */
                                    }

                                    If ((DNID == 0x02))
                                    {
                                        Name (TMP2, Package (0x02)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP2 [Zero] = (0x00010000 | DGD1)
                                        TMP2 [One] = (0x00010000 | DGD2)
                                        Return (TMP2) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP2 */
                                    }

                                    If ((DNID == 0x03))
                                    {
                                        Name (TMP3, Package (0x03)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP3 [Zero] = (0x00010000 | DGD1)
                                        TMP3 [One] = (0x00010000 | DGD2)
                                        TMP3 [0x02] = (0x00010000 | DGD3)
                                        Return (TMP3) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP3 */
                                    }

                                    If ((DNID == 0x04))
                                    {
                                        Name (TMP4, Package (0x04)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP4 [Zero] = (0x00010000 | DGD1)
                                        TMP4 [One] = (0x00010000 | DGD2)
                                        TMP4 [0x02] = (0x00010000 | DGD3)
                                        TMP4 [0x03] = (0x00010000 | DGD4)
                                        Return (TMP4) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP4 */
                                    }

                                    If ((DNID == 0x05))
                                    {
                                        Name (TMP5, Package (0x05)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP5 [Zero] = (0x00010000 | DGD1)
                                        TMP5 [One] = (0x00010000 | DGD2)
                                        TMP5 [0x02] = (0x00010000 | DGD3)
                                        TMP5 [0x03] = (0x00010000 | DGD4)
                                        TMP5 [0x04] = (0x00010000 | DGD5)
                                        Return (TMP5) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP5 */
                                    }

                                    If ((DNID == 0x06))
                                    {
                                        Name (TMP6, Package (0x06)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP6 [Zero] = (0x00010000 | DGD1)
                                        TMP6 [One] = (0x00010000 | DGD2)
                                        TMP6 [0x02] = (0x00010000 | DGD3)
                                        TMP6 [0x03] = (0x00010000 | DGD4)
                                        TMP6 [0x04] = (0x00010000 | DGD5)
                                        TMP6 [0x05] = (0x00010000 | DGD6)
                                        Return (TMP6) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP6 */
                                    }

                                    If ((DNID == 0x07))
                                    {
                                        Name (TMP7, Package (0x07)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP7 [Zero] = (0x00010000 | DGD1)
                                        TMP7 [One] = (0x00010000 | DGD2)
                                        TMP7 [0x02] = (0x00010000 | DGD3)
                                        TMP7 [0x03] = (0x00010000 | DGD4)
                                        TMP7 [0x04] = (0x00010000 | DGD5)
                                        TMP7 [0x05] = (0x00010000 | DGD6)
                                        TMP7 [0x06] = (0x00010000 | DGD7)
                                        Return (TMP7) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP7 */
                                    }

                                    If ((DNID == 0x08))
                                    {
                                        Name (TMP8, Package (0x08)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP8 [Zero] = (0x00010000 | DGD1)
                                        TMP8 [One] = (0x00010000 | DGD2)
                                        TMP8 [0x02] = (0x00010000 | DGD3)
                                        TMP8 [0x03] = (0x00010000 | DGD4)
                                        TMP8 [0x04] = (0x00010000 | DGD5)
                                        TMP8 [0x05] = (0x00010000 | DGD6)
                                        TMP8 [0x06] = (0x00010000 | DGD7)
                                        TMP8 [0x07] = (0x00010000 | DGD8)
                                        Return (TMP8) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP8 */
                                    }

                                    If ((DNID == 0x09))
                                    {
                                        Name (TMP9, Package (0x09)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMP9 [Zero] = (0x00010000 | DGD1)
                                        TMP9 [One] = (0x00010000 | DGD2)
                                        TMP9 [0x02] = (0x00010000 | DGD3)
                                        TMP9 [0x03] = (0x00010000 | DGD4)
                                        TMP9 [0x04] = (0x00010000 | DGD5)
                                        TMP9 [0x05] = (0x00010000 | DGD6)
                                        TMP9 [0x06] = (0x00010000 | DGD7)
                                        TMP9 [0x07] = (0x00010000 | DGD8)
                                        TMP9 [0x08] = (0x00010000 | DGD9)
                                        Return (TMP9) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP9 */
                                    }

                                    If ((DNID == 0x0A))
                                    {
                                        Name (TMPA, Package (0x0A)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPA [Zero] = (0x00010000 | DGD1)
                                        TMPA [One] = (0x00010000 | DGD2)
                                        TMPA [0x02] = (0x00010000 | DGD3)
                                        TMPA [0x03] = (0x00010000 | DGD4)
                                        TMPA [0x04] = (0x00010000 | DGD5)
                                        TMPA [0x05] = (0x00010000 | DGD6)
                                        TMPA [0x06] = (0x00010000 | DGD7)
                                        TMPA [0x07] = (0x00010000 | DGD8)
                                        TMPA [0x08] = (0x00010000 | DGD9)
                                        TMPA [0x09] = (0x00010000 | DGDA)
                                        Return (TMPA) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPA */
                                    }

                                    If ((DNID == 0x0B))
                                    {
                                        Name (TMPB, Package (0x0B)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPB [Zero] = (0x00010000 | DGD1)
                                        TMPB [One] = (0x00010000 | DGD2)
                                        TMPB [0x02] = (0x00010000 | DGD3)
                                        TMPB [0x03] = (0x00010000 | DGD4)
                                        TMPB [0x04] = (0x00010000 | DGD5)
                                        TMPB [0x05] = (0x00010000 | DGD6)
                                        TMPB [0x06] = (0x00010000 | DGD7)
                                        TMPB [0x07] = (0x00010000 | DGD8)
                                        TMPB [0x08] = (0x00010000 | DGD9)
                                        TMPB [0x09] = (0x00010000 | DGDA)
                                        TMPB [0x0A] = (0x00010000 | DGDB)
                                        Return (TMPB) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPB */
                                    }

                                    If ((DNID == 0x0C))
                                    {
                                        Name (TMPC, Package (0x0C)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPC [Zero] = (0x00010000 | DGD1)
                                        TMPC [One] = (0x00010000 | DGD2)
                                        TMPC [0x02] = (0x00010000 | DGD3)
                                        TMPC [0x03] = (0x00010000 | DGD4)
                                        TMPC [0x04] = (0x00010000 | DGD5)
                                        TMPC [0x05] = (0x00010000 | DGD6)
                                        TMPC [0x06] = (0x00010000 | DGD7)
                                        TMPC [0x07] = (0x00010000 | DGD8)
                                        TMPC [0x08] = (0x00010000 | DGD9)
                                        TMPC [0x09] = (0x00010000 | DGDA)
                                        TMPC [0x0A] = (0x00010000 | DGDB)
                                        TMPC [0x0B] = (0x00010000 | DGDC)
                                        Return (TMPC) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPC */
                                    }

                                    If ((DNID == 0x0D))
                                    {
                                        Name (TMPD, Package (0x0D)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPD [Zero] = (0x00010000 | DGD1)
                                        TMPD [One] = (0x00010000 | DGD2)
                                        TMPD [0x02] = (0x00010000 | DGD3)
                                        TMPD [0x03] = (0x00010000 | DGD4)
                                        TMPD [0x04] = (0x00010000 | DGD5)
                                        TMPD [0x05] = (0x00010000 | DGD6)
                                        TMPD [0x06] = (0x00010000 | DGD7)
                                        TMPD [0x07] = (0x00010000 | DGD8)
                                        TMPD [0x08] = (0x00010000 | DGD9)
                                        TMPD [0x09] = (0x00010000 | DGDA)
                                        TMPD [0x0A] = (0x00010000 | DGDB)
                                        TMPD [0x0B] = (0x00010000 | DGDC)
                                        TMPD [0x0C] = (0x00010000 | DGDD)
                                        Return (TMPD) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPD */
                                    }

                                    If ((DNID == 0x0E))
                                    {
                                        Name (TMPE, Package (0x0E)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPE [Zero] = (0x00010000 | DGD1)
                                        TMPE [One] = (0x00010000 | DGD2)
                                        TMPE [0x02] = (0x00010000 | DGD3)
                                        TMPE [0x03] = (0x00010000 | DGD4)
                                        TMPE [0x04] = (0x00010000 | DGD5)
                                        TMPE [0x05] = (0x00010000 | DGD6)
                                        TMPE [0x06] = (0x00010000 | DGD7)
                                        TMPE [0x07] = (0x00010000 | DGD8)
                                        TMPE [0x08] = (0x00010000 | DGD9)
                                        TMPE [0x09] = (0x00010000 | DGDA)
                                        TMPE [0x0A] = (0x00010000 | DGDB)
                                        TMPE [0x0B] = (0x00010000 | DGDC)
                                        TMPE [0x0C] = (0x00010000 | DGDD)
                                        TMPE [0x0D] = (0x00010000 | DGDE)
                                        Return (TMPE) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPE */
                                    }

                                    If ((DNID == 0x0F))
                                    {
                                        Name (TMPF, Package (0x0F)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPF [Zero] = (0x00010000 | DGD1)
                                        TMPF [One] = (0x00010000 | DGD2)
                                        TMPF [0x02] = (0x00010000 | DGD3)
                                        TMPF [0x03] = (0x00010000 | DGD4)
                                        TMPF [0x04] = (0x00010000 | DGD5)
                                        TMPF [0x05] = (0x00010000 | DGD6)
                                        TMPF [0x06] = (0x00010000 | DGD7)
                                        TMPF [0x07] = (0x00010000 | DGD8)
                                        TMPF [0x08] = (0x00010000 | DGD9)
                                        TMPF [0x09] = (0x00010000 | DGDA)
                                        TMPF [0x0A] = (0x00010000 | DGDB)
                                        TMPF [0x0B] = (0x00010000 | DGDC)
                                        TMPF [0x0C] = (0x00010000 | DGDD)
                                        TMPF [0x0D] = (0x00010000 | DGDE)
                                        TMPF [0x0E] = (0x00010000 | DGDF)
                                        Return (TMPF) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPF */
                                    }

                                    If ((DNID == 0x10))
                                    {
                                        Name (TMPG, Package (0x10)
                                        {
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF, 
                                            0xFFFFFFFF
                                        })
                                        TMPG [Zero] = (0x00010000 | DGD1)
                                        TMPG [One] = (0x00010000 | DGD2)
                                        TMPG [0x02] = (0x00010000 | DGD3)
                                        TMPG [0x03] = (0x00010000 | DGD4)
                                        TMPG [0x04] = (0x00010000 | DGD5)
                                        TMPG [0x05] = (0x00010000 | DGD6)
                                        TMPG [0x06] = (0x00010000 | DGD7)
                                        TMPG [0x07] = (0x00010000 | DGD8)
                                        TMPG [0x08] = (0x00010000 | DGD9)
                                        TMPG [0x09] = (0x00010000 | DGDA)
                                        TMPG [0x0A] = (0x00010000 | DGDB)
                                        TMPG [0x0B] = (0x00010000 | DGDC)
                                        TMPG [0x0C] = (0x00010000 | DGDD)
                                        TMPG [0x0D] = (0x00010000 | DGDE)
                                        TMPG [0x0E] = (0x00010000 | DGDF)
                                        Return (TMPG) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPG */
                                    }

                                    Return (Package (0x01)
                                    {
                                        0x0400
                                    })
                                }

                                Device (DEDP)
                                {
                                    Method (_ADR, 0, Serialized)  // _ADR: Address
                                    {
                                        If (((0x0F00 & DGD1) == 0x0400))
                                        {
                                            DGDX = DGD1 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD2) == 0x0400))
                                        {
                                            DGDX = DGD2 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD3) == 0x0400))
                                        {
                                            DGDX = DGD3 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD4) == 0x0400))
                                        {
                                            DGDX = DGD4 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD5) == 0x0400))
                                        {
                                            DGDX = DGD5 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD6) == 0x0400))
                                        {
                                            DGDX = DGD6 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD7) == 0x0400))
                                        {
                                            DGDX = DGD7 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD8) == 0x0400))
                                        {
                                            DGDX = DGD8 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGD9) == 0x0400))
                                        {
                                            DGDX = DGD9 /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGDA) == 0x0400))
                                        {
                                            DGDX = DGDA /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGDB) == 0x0400))
                                        {
                                            DGDX = DGDB /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGDC) == 0x0400))
                                        {
                                            DGDX = DGDC /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGDD) == 0x0400))
                                        {
                                            DGDX = DGDD /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGDE) == 0x0400))
                                        {
                                            DGDX = DGDE /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        ElseIf (((0x0F00 & DGDF) == 0x0400))
                                        {
                                            DGDX = DGDF /* External reference */
                                            Return ((0xFFFF & DGDX))
                                        }
                                        Else
                                        {
                                            Return (0x1F)
                                        }
                                    }

                                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                                    {
                                        Return (Package (0x67)
                                        {
                                            0x50, 
                                            0x32, 
                                            Zero, 
                                            One, 
                                            0x02, 
                                            0x03, 
                                            0x04, 
                                            0x05, 
                                            0x06, 
                                            0x07, 
                                            0x08, 
                                            0x09, 
                                            0x0A, 
                                            0x0B, 
                                            0x0C, 
                                            0x0D, 
                                            0x0E, 
                                            0x0F, 
                                            0x10, 
                                            0x11, 
                                            0x12, 
                                            0x13, 
                                            0x14, 
                                            0x15, 
                                            0x16, 
                                            0x17, 
                                            0x18, 
                                            0x19, 
                                            0x1A, 
                                            0x1B, 
                                            0x1C, 
                                            0x1D, 
                                            0x1E, 
                                            0x1F, 
                                            0x20, 
                                            0x21, 
                                            0x22, 
                                            0x23, 
                                            0x24, 
                                            0x25, 
                                            0x26, 
                                            0x27, 
                                            0x28, 
                                            0x29, 
                                            0x2A, 
                                            0x2B, 
                                            0x2C, 
                                            0x2D, 
                                            0x2E, 
                                            0x2F, 
                                            0x30, 
                                            0x31, 
                                            0x32, 
                                            0x33, 
                                            0x34, 
                                            0x35, 
                                            0x36, 
                                            0x37, 
                                            0x38, 
                                            0x39, 
                                            0x3A, 
                                            0x3B, 
                                            0x3C, 
                                            0x3D, 
                                            0x3E, 
                                            0x3F, 
                                            0x40, 
                                            0x41, 
                                            0x42, 
                                            0x43, 
                                            0x44, 
                                            0x45, 
                                            0x46, 
                                            0x47, 
                                            0x48, 
                                            0x49, 
                                            0x4A, 
                                            0x4B, 
                                            0x4C, 
                                            0x4D, 
                                            0x4E, 
                                            0x4F, 
                                            0x50, 
                                            0x51, 
                                            0x52, 
                                            0x53, 
                                            0x54, 
                                            0x55, 
                                            0x56, 
                                            0x57, 
                                            0x58, 
                                            0x59, 
                                            0x5A, 
                                            0x5B, 
                                            0x5C, 
                                            0x5D, 
                                            0x5E, 
                                            0x5F, 
                                            0x60, 
                                            0x61, 
                                            0x62, 
                                            0x63, 
                                            0x64
                                        })
                                    }

                                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                                    {
                                        If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                                        {
                                            BCLP = ((Arg0 * 0xFF) / 0x64)
                                            BCLP |= 0x80000000
                                            ASLC = 0x02
                                            DBRL = Arg0
                                        }
                                    }

                                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                                    {
                                        Return (DBRL) /* External reference */
                                    }
                                }

                                Method (DGDL, 1, NotSerialized)
                                {
                                    DNID++
                                    Local0 = (Arg0 & 0x0F0F)
                                    Local1 = (0x80000000 | Local0)
                                    If ((DIDL == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL2 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL3 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL4 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL5 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL6 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL7 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL8 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DDL9 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DD10 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DD11 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DD12 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DD13 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DD14 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    If ((DD15 == Local0))
                                    {
                                        Return (Local1)
                                    }

                                    Return (Zero)
                                }
                            }
                        }
                    }
                }
            }
        }

        Mutex (MUTX, 0x00)
        Mutex (OSUM, 0x00)
        Mutex (CNMT, 0x00)
        OperationRegion (PRT0, SystemIO, 0x80, 0x02)
        Field (PRT0, WordAcc, Lock, Preserve)
        {
            P80B,   16
        }

        Name (P80T, Zero)
        Method (D8XH, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                P80T = ((P80T & 0xFF00) | Arg1)
            }

            If ((Arg0 == One))
            {
                P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
            }

            P80B = P80T /* \P80T */
        }

        Method (P8XH, 2, Serialized)
        {
            If (CondRefOf (MDBG))
            {
                D8XH (Arg0, Arg1)
            }
        }

        OperationRegion (U3F8, SystemIO, 0x03F8, 0x10)
        Field (U3F8, ByteAcc, Lock, Preserve)
        {
            TXBF,   8, 
            DLM,    8, 
            FCR,    8, 
            LCR,    8
        }

        Method (SDBG, 1, Serialized)
        {
            Name (TXBU, Zero)
            Name (DLBU, Zero)
            Name (FCBU, Zero)
            Name (LCBU, Zero)
            TXBU = TXBF /* \TXBF */
            DLBU = DLM /* \DLM_ */
            FCBU = FCR /* \FCR_ */
            LCBU = LCR /* \LCR_ */
            LCR = 0x83
            TXBF = One
            DLM = Zero
            FCR = 0xE1
            LCR = 0x03
            DLM = Zero
            ToHexString (Arg0, Local3)
            Local4 = SizeOf (Local3)
            Local5 = Zero
            While ((Local5 < Local4))
            {
                Mid (Local3, Local5, One, TXBF) /* \TXBF */
                Stall (0x64)
                Local5++
            }

            Stall (0x64)
            TXBF = 0x0D
            Stall (0x64)
            TXBF = 0x0A
            TXBF = TXBU /* \SDBG.TXBU */
            DLM = DLBU /* \SDBG.DLBU */
            FCR = FCBU /* \SDBG.FCBU */
            LCR = LCBU /* \SDBG.LCBU */
        }

        OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
        Field (SPRT, ByteAcc, Lock, Preserve)
        {
            SSMP,   8
        }

        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            GPIC = Arg0
            PICM = Arg0
        }

        Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
        {
            D8XH (Zero, Arg0)
            D8XH (One, Zero)
            If (CondRefOf (\_SB.TPM.PTS))
            {
                \_SB.TPM.PTS (Arg0)
            }

            If (CondRefOf (\_SB.PC00.XHCI.RHUB.HS03.PTS))
            {
                \_SB.PC00.XHCI.RHUB.HS03.PTS (Arg0)
            }

            SPTS (Arg0)
        }

        Method (IWAK, 1, Serialized)
        {
            D8XH (One, 0xAB)
            Name (RPWM, Zero)
            SWAK (Arg0, RPWM)
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If (CondRefOf (\_SB.PC00.TXHC))
                {
                    \_SB.TCWK (Arg0)
                }
            }

            If (CondRefOf (\_SB.PC00.XHCI.RHUB.HS03.WAK))
            {
                \_SB.PC00.XHCI.RHUB.HS03.WAK (Arg0)
            }

            Return (Package (0x02)
            {
                Zero, 
                Zero
            })
        }

        Method (GETB, 3, Serialized)
        {
            Local0 = (Arg0 * 0x08)
            Local1 = (Arg1 * 0x08)
            CreateField (Arg2, Local0, Local1, TBF3)
            Return (TBF3) /* \GETB.TBF3 */
        }

        Method (BPNT, 0, NotSerialized)
        {
        }

        OperationRegion (CPWR, SystemMemory, (\_SB.PC00.GMHB () + 0x5000), 0x1000)
        Field (CPWR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x9A0), 
            PPL1,   15, 
            PL1E,   1, 
            CLP1,   1
        }

        Name (CLMP, Zero)
        Name (PLEN, Zero)
        Name (PLSV, 0x8000)
        Name (CSEM, Zero)
        Method (SPL1, 0, Serialized)
        {
            Name (PPUU, Zero)
            If ((CSEM == One))
            {
                Return (Zero)
            }

            CSEM = One
            PLSV = PPL1 /* \PPL1 */
            PLEN = PL1E /* \PL1E */
            CLMP = CLP1 /* \CLP1 */
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
            Local1 = (Local0 / 0x03E8)
            PPL1 = Local1
            PL1E = One
            CLP1 = One
        }

        Method (RPL1, 0, Serialized)
        {
            PPL1 = PLSV /* \PLSV */
            PL1E = PLEN /* \PLEN */
            CLP1 = CLMP /* \CLMP */
            CSEM = Zero
        }

        Name (UAMS, Zero)
        Name (GLCK, Zero)
        Method (GUAM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    If ((GLCK == One))
                    {
                        GLCK = Zero
                        P8XH (Zero, 0xE1)
                        P8XH (One, 0xAB)
                        If (PSCP)
                        {
                            If (CondRefOf (\_SB.PR00._PPC))
                            {
                                \_SB.CPPC = Zero
                                SPNT ()
                            }
                        }

                        If (PLCS)
                        {
                            RPL1 ()
                        }

                        BPNT ()
                    }
                }
                Case (One)
                {
                    If ((GLCK == Zero))
                    {
                        GLCK = One
                        P8XH (Zero, 0xE0)
                        P8XH (One, Zero)
                        If (PSCP)
                        {
                            If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                            {
                                SPNT ()
                                BPNT ()
                            }
                        }

                        If (PLCS)
                        {
                            SPL1 ()
                        }
                    }
                }
                Default
                {
                    Return (Zero)
                }

            }

            UAMS = (Arg0 && !PWRS)
            P_CS ()
        }

        Method (P_CS, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.PAUD.PUAM))
            {
                \_SB.PC00.PAUD.PUAM ()
            }
        }

        Scope (_SB.PC00)
        {
            Method (PTMA, 0, NotSerialized)
            {
                Return (BGMA) /* External reference */
            }

            Method (PTMS, 0, NotSerialized)
            {
                Return (BGMS) /* External reference */
            }

            Method (PTIA, 0, NotSerialized)
            {
                Return (BGIA) /* External reference */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                OSYS = 0x03E8
                If (CondRefOf (\_OSI))
                {
                    If (_OSI ("Windows 2001"))
                    {
                        OSYS = 0x07D1
                    }

                    If (_OSI ("Windows 2001 SP1"))
                    {
                        OSYS = 0x07D1
                    }

                    If (_OSI ("Windows 2001 SP2"))
                    {
                        OSYS = 0x07D2
                    }

                    If (_OSI ("Windows 2001.1"))
                    {
                        OSYS = 0x07D3
                    }

                    If (_OSI ("Windows 2006"))
                    {
                        OSYS = 0x07D6
                    }

                    If (_OSI ("Windows 2009"))
                    {
                        OSYS = 0x07D9
                    }

                    If (_OSI ("Windows 2012"))
                    {
                        OSYS = 0x07DC
                    }

                    If (_OSI ("Windows 2013"))
                    {
                        OSYS = 0x07DD
                    }

                    If (_OSI ("Windows 2015"))
                    {
                        OSYS = 0x07DF
                    }
                }
            }
        }

        Scope (\)
        {
            Name (PICM, Zero)
            Name (PRWP, Package (0x02)
            {
                Zero, 
                Zero
            })
            Method (GPRW, 2, NotSerialized)
            {
                PRWP [Zero] = Arg0
                Local0 = (SS1 << One)
                Local0 |= (SS2 << 0x02)
                Local0 |= (SS3 << 0x03)
                Local0 |= (SS4 << 0x04)
                If (((One << Arg1) & Local0))
                {
                    PRWP [One] = Arg1
                }
                Else
                {
                    Local0 >>= One
                    FindSetLeftBit (Local0, PRWP [One])
                }

                Return (PRWP) /* \PRWP */
            }
        }

        Scope (_SB)
        {
            Name (OSU4, Zero)
            Name (OSCM, 0xFF)
            Method (DOCM, 0, Serialized)
            {
                If ((U4SE == Zero))
                {
                    Return (0xFF)
                }

                UDB1 ("DOCM: Switch host router to OS requested CM mode - %0X\n", OSU4)
                Local0 = 0xFF
                OSCM = Zero
                UDB1 ("DOCM: Enabled host router mask on platform = %0X\n", CMSK)
                If ((CondRefOf (\_SB.PC00.TDM0.STCM) && (CMSK & One)))
                {
                    UDB0 ("DOCM: Apply CM mode to iTBT0 ...\n")
                    Local1 = ^PC00.TDM0.STCM (OSU4, U4CM)
                    If ((Local1 != 0xFF))
                    {
                        UDB1 ("DOCM: Apply CM mode to iTBT0 successfully, CM mode = %0X\n", Local1)
                        OSCM = Local1
                        Local0 = Zero
                    }
                    Else
                    {
                        UDB1 ("DOCM: Fail to apply CM mode to iTBT0, CM mode = %0X\n", OSU4)
                        Return (0xFF)
                    }
                }

                If ((CondRefOf (\_SB.PC00.TDM1.STCM) && (CMSK & 0x02)))
                {
                    UDB0 ("DOCM: Apply CM mode to iTBT1\n")
                    Local1 = ^PC00.TDM1.STCM (OSU4, U4CM)
                    If ((Local1 != 0xFF))
                    {
                        UDB1 ("DOCM: Apply CM mode to iTBT1 successfully, CM mode = %0X\n", Local1)
                        OSCM = Local1
                        Local0 = Zero
                    }
                    Else
                    {
                        UDB1 ("DOCM: Fail to apply CM mode to iTBT1, CM mode = %0X\n", OSU4)
                        Return (0xFF)
                    }
                }

                If ((Local0 == 0xFF))
                {
                    UDB0 ("DOCM: CM mode is not applied to any host router, native USB4 capability is not supported\n")
                }

                If (((U4CM & 0x70) == 0x20)){}
                Return (Local0)
            }

            Method (U4FN, 2, Serialized)
            {
                If ((U4SE == Zero))
                {
                    If (((U4CM & 0x07) == One))
                    {
                        OSCM = One
                        ^PC00.TDM0.SCME = One
                        ^PC00.TDM1.SCME = One
                        Return (Zero)
                    }
                    Else
                    {
                        OSCM = Zero
                        ^PC00.TDM0.SCME = Zero
                        ^PC00.TDM1.SCME = Zero
                        If ((Arg1 & 0x00040000))
                        {
                            Return (0xFF)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
                Else
                {
                    Local0 = Zero
                    If ((Arg1 & 0x00040000))
                    {
                        OSU4 = One
                    }
                    Else
                    {
                        OSU4 = Zero
                    }

                    If (((U4CM & 0x70) == Zero))
                    {
                        If ((OSU4 == One))
                        {
                            Local0 = 0xFF
                        }
                        Else
                        {
                            Local0 = Zero
                        }

                        Return (Local0)
                    }

                    If (((Arg0 & One) == Zero))
                    {
                        Local1 = DOCM ()
                        If (((OSU4 == One) && (Local1 == 0xFF)))
                        {
                            Local0 = 0xFF
                        }
                    }
                    ElseIf (((OSU4 == One) && (OSCM == Zero)))
                    {
                        Local0 = 0xFF
                    }

                    Return (Local0)
                }
            }
        }

        Scope (_SB)
        {
            Device (COEX)
            {
                Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
                Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((COEM == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        If (CondRefOf (\_SB.PC00.ISHD))
        {
            Scope (_SB.PC00.ISHD)
            {
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (CondRefOf (HIWC))
                    {
                        If (HIWC (Arg0))
                        {
                            If ((Arg2 <= 0x02))
                            {
                                If (CondRefOf (HIDW))
                                {
                                    Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                }
                            }
                            ElseIf ((Arg2 == 0x03))
                            {
                                If (CondRefOf (ISAR))
                                {
                                    Return (ISAR (Arg0, Arg1, Arg2, Arg3))
                                }
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Scope (_SB)
        {
            Device (PR00)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (PR01)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (PR02)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (PR03)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (PR04)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (PR05)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (PR06)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (PR07)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (PR08)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (PR09)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (PR10)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (PR11)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (PR12)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (PR13)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (PR14)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (PR15)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (PR16)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }

            Device (PR17)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
            }

            Device (PR18)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
            }

            Device (PR19)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
            }

            Device (PR20)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
            }

            Device (PR21)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
            }

            Device (PR22)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
            }

            Device (PR23)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
            }

            Device (PR24)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x18)  // _UID: Unique ID
            }

            Device (PR25)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x19)  // _UID: Unique ID
            }

            Device (PR26)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1A)  // _UID: Unique ID
            }

            Device (PR27)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1B)  // _UID: Unique ID
            }

            Device (PR28)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1C)  // _UID: Unique ID
            }

            Device (PR29)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1D)  // _UID: Unique ID
            }

            Device (PR30)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1E)  // _UID: Unique ID
            }

            Device (PR31)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1F)  // _UID: Unique ID
            }

            Device (PR32)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x20)  // _UID: Unique ID
            }

            Device (PR33)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x21)  // _UID: Unique ID
            }

            Device (PR34)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x22)  // _UID: Unique ID
            }

            Device (PR35)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x23)  // _UID: Unique ID
            }

            Device (PR36)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x24)  // _UID: Unique ID
            }

            Device (PR37)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x25)  // _UID: Unique ID
            }

            Device (PR38)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x26)  // _UID: Unique ID
            }

            Device (PR39)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x27)  // _UID: Unique ID
            }

            Device (PR40)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x28)  // _UID: Unique ID
            }

            Device (PR41)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x29)  // _UID: Unique ID
            }

            Device (PR42)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x2A)  // _UID: Unique ID
            }

            Device (PR43)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x2B)  // _UID: Unique ID
            }

            Device (PR44)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x2C)  // _UID: Unique ID
            }

            Device (PR45)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x2D)  // _UID: Unique ID
            }

            Device (PR46)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x2E)  // _UID: Unique ID
            }

            Device (PR47)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x2F)  // _UID: Unique ID
            }
        }

        Scope (_SB)
        {
            Device (PAGD)
            {
                Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (_OSI ("Processor Aggregator Device"))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
                {
                    One, 
                    Zero
                })
            }
        }

        Scope (_SB.PC00)
        {
            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00008000,         // Address Length
                        _Y4B)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y4C)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y4D)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y4E)
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00060000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFC800000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFEE00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y4F)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y4A)
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    If (CondRefOf (DPTR))
                    {
                        CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4A._BAS, ABR0)  // _BAS: Base Address
                        ABR0 = DPTR /* External reference */
                        CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4A._LEN, ABLN)  // _LEN: Length
                        ABLN = (EPTR - DPTR) /* External reference */
                    }

                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4B._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = GMHB ()
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4C._BAS, DBR0)  // _BAS: Base Address
                    DBR0 = GDMB ()
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4D._BAS, EBR0)  // _BAS: Base Address
                    EBR0 = GEPB ()
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4E._BAS, XBR0)  // _BAS: Base Address
                    XBR0 = GPCB ()
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4E._LEN, XSZ0)  // _LEN: Length
                    XSZ0 = GPCL ()
                    If (!HPTE)
                    {
                        CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4F._BAS, HBAS)  // _BAS: Base Address
                        CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4F._LEN, HLEN)  // _LEN: Length
                        HBAS = HPTB /* \HPTB */
                        HLEN = 0x0400
                    }

                    Return (BUF0) /* \_SB_.PC00.PDRC.BUF0 */
                }
            }
        }

        Method (BRTN, 1, Serialized)
        {
            If (((DIDX & 0x0F0F) == 0x0400))
            {
                Notify (\_SB.PC00.GFX0.DD1F, Arg0)
            }

            If (((DIDY & 0x0F0F) == 0x0401))
            {
                Notify (\_SB.PC00.GFX0.DD2F, Arg0)
            }

            If (((DGDX & 0x0F0F) == 0x0400))
            {
                Notify (\_SB.PC00.RP12.PXSX.PEGB.PEGE.DEDP, Arg0)
            }
        }

        Scope (_GPE)
        {
            Method (_L73, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
            }

            Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SL69 ()
            }

            Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                L01C += One
                P8XH (Zero, One)
                P8XH (One, L01C)
                SL61 ()
            }

            Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                GPEC = Zero
            }

            Method (_L50, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
            }

            Method (_L6B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                If (CondRefOf (\_GPE.AL6B))
                {
                    AL6B ()
                }

                If (CondRefOf (\_GPE.PL6B))
                {
                    PL6B ()
                }
            }

            Name (PRES, One)
            Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                If (CondRefOf (\_GPE.AL6F))
                {
                    AL6F ()
                }

                SL6F ()
            }

            Method (_L71, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                If (CondRefOf (\_GPE.SL71))
                {
                    SL71 ()
                }
            }

            If (CondRefOf (GP1E))
            {
                If ((GP1E != Zero))
                {
                    Method (_LC7, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        SLC7 ()
                    }
                }
            }

            If (CondRefOf (GP1E))
            {
                If ((GP1E != Zero))
                {
                    Method (_LA7, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        L01C += One
                        P8XH (Zero, 0xA7)
                        P8XH (One, L01C)
                        SLA7 ()
                    }
                }
            }

            Method (_LA0, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SLA0 ()
            }

            Method (_LA1, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SLA1 ()
            }

            Method (_LA2, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SLA2 ()
            }

            Method (_LC0, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SLC0 ()
            }

            Method (_LC1, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SLC1 ()
            }

            Method (_LC2, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                SLC2 ()
            }
        }

        Scope (_SB)
        {
            Method (WFRK, 1, Serialized)
            {
                If ((DWFK != Zero))
                {
                    SGOV (DWFK, Arg0)
                }
            }

            Method (BTRK, 1, Serialized)
            {
                If ((GBTK != Zero))
                {
                    SGOV (GBTK, Arg0)
                }
            }

            Method (GBTR, 0, NotSerialized)
            {
                Return (GGOV (GBTK))
            }
        }

        If ((CRFP == One))
        {
            If ((CWFC == One))
            {
                Scope (_SB.PC00.CNVW)
                {
                    Name (SPLX, Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (SPLC, 0, Serialized)
                    {
                        DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                        DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                        DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                        Return (SPLX) /* \_SB_.PC00.CNVW.SPLX */
                    }

                    Name (WRDX, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x80000000, 
                            0x8000
                        }
                    })
                    Method (WRDD, 0, Serialized)
                    {
                        DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                        DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                        Return (WRDX) /* \_SB_.PC00.CNVW.WRDX */
                    }

                    Name (ECKY, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }
                    })
                    Method (ECKV, 0, Serialized)
                    {
                        DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                        Return (ECKY) /* \_SB_.PC00.CNVW.ECKY */
                    }

                    Name (PPAY, Package (0x02)
                    {
                        0x02, 
                        Package (0x18)
                        {
                            0x07, 
                            Zero, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28
                        }
                    })
                    Method (PPAG, 0, Serialized)
                    {
                        DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                        DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                        DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                        DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                        DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                        DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                        DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                        DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                        DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                        DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                        DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                        DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                        DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                        DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                        DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                        DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                        DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                        DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                        DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                        DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                        DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                        DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                        DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                        Return (PPAY) /* \_SB_.PC00.CNVW.PPAY */
                    }

                    Name (WPFY, Package (0x02)
                    {
                        Zero, 
                        Package (0x05)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WPFC, 0, Serialized)
                    {
                        DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                        DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                        DerefOf (WPFY [One]) [0x03] = \WPFC
                        DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                        Return (WPFY) /* \_SB_.PC00.CNVW.WPFY */
                    }

                    Name (WTSY, Package (0x02)
                    {
                        One, 
                        Package (0x13)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WTAS, 0, Serialized)
                    {
                        DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                        DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                        DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                        DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                        DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                        DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                        DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                        DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                        DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                        DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                        DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                        DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                        DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                        DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                        DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                        DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                        DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                        DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                        Return (WTSY) /* \_SB_.PC00.CNVW.WTSY */
                    }

                    Name (WAIY, Package (0x02)
                    {
                        Zero, 
                        Package (0x04)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WAIS, 0, Serialized)
                    {
                        DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                        DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                        Return (WAIY) /* \_SB_.PC00.CNVW.WAIY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PC00.CNVW.GPCX */
                    }

                    Name (GLAX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Zero
                        }
                    })
                    Method (GLAI, 0, Serialized)
                    {
                        DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                        DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                        Return (GLAX) /* \_SB_.PC00.CNVW.GLAX */
                    }

                    Name (FDEL, Zero)
                    Name (PDEL, Zero)
                    Name (VDEL, Zero)
                    Method (IFUN, 4, Serialized)
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = (CVPR << Zero)
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            CreateWordField (Arg3, Zero, CMDT)
                            CreateWordField (Arg3, 0x02, CMDP)
                            If ((CMDT == One))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Return (RSTT) /* \_SB_.PC00.CNVW.RSTT */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((CMDT == 0x02))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    RSTT = CMDP /* \_SB_.PC00.CNVW.IFUN.CMDP */
                                }

                                Return (Zero)
                            }

                            If ((CMDT == 0x03))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                                {
                                    Return (PRRS) /* \_SB_.PC00.CNVW.PRRS */
                                }
                            }

                            Return (Zero)
                        }

                        If ((Arg2 == 0x03))
                        {
                            If ((CRFI == One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        If ((Arg2 == 0x04))
                        {
                            CreateWordField (Arg3, Zero, PRTT)
                            CreateWordField (Arg3, 0x02, PRTD)
                            If ((PRTT == One))
                            {
                                FDEL = PRTD /* \_SB_.PC00.CNVW.IFUN.PRTD */
                            }
                            ElseIf ((PRTT == 0x02))
                            {
                                PDEL = PRTD /* \_SB_.PC00.CNVW.IFUN.PRTD */
                            }
                            ElseIf ((PRTT == 0x03))
                            {
                                VDEL = PRTD /* \_SB_.PC00.CNVW.IFUN.PRTD */
                            }
                            Else
                            {
                            }
                        }

                        Return (Zero)
                    }

                    Method (IDSM, 1, Serialized)
                    {
                        If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (EFUN, 4, Serialized)
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x06))
                        {
                            Local0 = AXMU /* \AXMU */
                            Local0 <<= One
                            Local0 |= AXSU /* \AXSU */
                            Local1 = AXMR /* \AXMR */
                            Local1 <<= One
                            Local1 |= AXSR /* \AXSR */
                            Local1 <<= 0x02
                            Local0 |= Local1
                            Return (Local0)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (WFRC) /* \WFRC */
                        }

                        If ((Arg2 == 0x05))
                        {
                            Return (WFUC) /* \WFUC */
                        }

                        If ((Arg2 == 0x07))
                        {
                            Return (UNI4) /* \UNI4 */
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (WFIC) /* \WFIC */
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (WFBS) /* \WFBS */
                        }

                        If ((Arg2 == 0x0A))
                        {
                            Return (WEDT) /* \WEDT */
                        }

                        If ((Arg2 == 0x0B))
                        {
                            If ((CIRM == One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        If ((Arg2 == 0x0C))
                        {
                            Return (WF7C) /* \WF7C */
                        }

                        Return (Zero)
                    }

                    Method (EDSM, 1, Serialized)
                    {
                        If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            If (((CBTC == One) && (CBTI == One)))
            {
                If ((PU2C == 0x0A))
                {
                    Scope (_SB.PC00.XHCI.RHUB.HS10)
                    {
                        Name (ECKY, Package (0x02)
                        {
                            Zero, 
                            Package (0x02)
                            {
                                0x12, 
                                Zero
                            }
                        })
                        Method (ECKV, 0, Serialized)
                        {
                            DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                            Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS10.ECKY */
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                            {
                                If ((Arg2 == Zero))
                                {
                                    If ((Arg1 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }

                                If ((Arg2 == One))
                                {
                                    RDLY = Arg3
                                }

                                If ((Arg2 == 0x03))
                                {
                                    CreateWordField (Arg3, Zero, CMDT)
                                    CreateWordField (Arg3, 0x02, CMDP)
                                    If ((CMDT == One))
                                    {
                                        BRMT = CMDP /* \_SB_.PC00.XHCI.RHUB.HS10._DSM.CMDP */
                                    }
                                }

                                If ((Arg2 == 0x04))
                                {
                                    Return (BRMT) /* External reference */
                                }

                                Return (Zero)
                            }
                            ElseIf ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                            {
                                If ((Arg2 == Zero))
                                {
                                    If ((Arg1 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                }

                                If ((Arg2 == One)){}
                                Return (Zero)
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        PowerResource (BTRT, 0x05, 0x0000)
                        {
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (One)
                            }

                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                            }

                            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                            {
                                Local0 = Acquire (CNMT, 0x03E8)
                                If ((Local0 == Zero))
                                {
                                    BTRK (Zero)
                                    Sleep (RDLY)
                                    BTRK (One)
                                    Sleep (RDLY)
                                }

                                Release (CNMT)
                            }
                        }

                        PowerResource (DBTR, 0x05, 0x0000)
                        {
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (One)
                            }

                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                            }

                            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                            {
                                Local0 = Acquire (CNMT, 0x03E8)
                                If ((Local0 == Zero))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero)){}
                                    Sleep (RDLY)
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero)){}
                                    Sleep (RDLY)
                                }

                                Release (CNMT)
                            }
                        }

                        Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                        {
                            If (((CBTC == One) && (CBTI == One)))
                            {
                                Return (Package (0x01)
                                {
                                    BTRT
                                })
                            }
                            Else
                            {
                                Return (Package (0x01)
                                {
                                    DBTR
                                })
                            }
                        }

                        Name (GPCX, Package (0x03)
                        {
                            Zero, 
                            Package (0x02)
                            {
                                0x07, 
                                Package (0x03)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero
                                }
                            }, 

                            Package (0x02)
                            {
                                0x12, 
                                Package (0x03)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero
                                }
                            }
                        })
                        Method (GPC, 0, Serialized)
                        {
                            Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS10.GPCX */
                        }

                        Name (GLAX, Package (0x03)
                        {
                            Zero, 
                            Package (0x02)
                            {
                                0x07, 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                0x12, 
                                Zero
                            }
                        })
                        Method (GLAI, 0, Serialized)
                        {
                            DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                            DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                            Return (GLAX) /* \_SB_.PC00.XHCI.RHUB.HS10.GLAX */
                        }

                        Method (AOLX, 0, NotSerialized)
                        {
                            Name (AODS, Package (0x03)
                            {
                                Zero, 
                                0x12, 
                                Zero
                            })
                            If ((CBTA == One))
                            {
                                If ((CRFP == Zero))
                                {
                                    If ((HDBO & One))
                                    {
                                        AODS [0x02] = One
                                    }
                                }
                                Else
                                {
                                    AODS [0x02] = One
                                }
                            }

                            Return (AODS) /* \_SB_.PC00.XHCI.RHUB.HS10.AOLX.AODS */
                        }

                        Method (AOLD, 0, NotSerialized)
                        {
                            Return (AOLX ())
                        }
                    }
                }
            }
        }

        Method (PKG1, 1, Serialized)
        {
            Name (PKG, Package (0x01)
            {
                Zero
            })
            PKG [Zero] = Arg0
            Return (PKG) /* \PKG1.PKG_ */
        }

        If ((PCHA == Zero))
        {
            Scope (_SB.PC00.I2C0)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C0))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C0))
                }
            }

            Scope (_SB.PC00.I2C1)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C1))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C1))
                }
            }

            Scope (_SB.PC00.I2C2)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C2))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C2))
                }
            }

            Scope (_SB.PC00.I2C3)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C3))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C3))
                }
            }

            Scope (_SB.PC00.I2C4)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C4))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C4))
                }
            }

            Scope (_SB.PC00.I2C5)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C5))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C5))
                }
            }

            Scope (_SB.PC00.SPI0)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C6))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C6))
                }
            }

            Scope (_SB.PC00.SPI1)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C7))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C7))
                }
            }

            Scope (_SB.PC00.SPI2)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C8))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C8))
                }
            }

            Scope (_SB.PC00.UA00)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C9))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C9))
                }
            }

            Scope (_SB.PC00.UA01)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CA))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CA))
                }
            }

            Scope (_SB.PC00.UA02)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CB))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CB))
                }
            }
        }
        Else
        {
            Scope (_SB.PC02.I2C0)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C0))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C0))
                }
            }

            Scope (_SB.PC02.I2C1)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C1))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C1))
                }
            }

            Scope (_SB.PC02.I2C2)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C2))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C2))
                }
            }

            Scope (_SB.PC02.I2C3)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C3))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C3))
                }
            }

            Scope (_SB.PC02.I2C4)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C4))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C4))
                }
            }

            Scope (_SB.PC02.I2C5)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C5))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C5))
                }
            }

            Scope (_SB.PC02.SPI0)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C6))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C6))
                }
            }

            Scope (_SB.PC02.SPI1)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C7))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C7))
                }
            }

            Scope (_SB.PC02.SPI2)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C8))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C8))
                }
            }

            Scope (_SB.PC02.UA00)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C9))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C9))
                }
            }

            Scope (_SB.PC02.UA01)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CA))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CA))
                }
            }

            Scope (_SB.PC02.UA02)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CB))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CB))
                }
            }
        }

        Scope (\)
        {
            PowerResource (PIN, 0x00, 0x0000)
            {
                Method (STA, 1, Serialized)
                {
                    If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (ON, 1, Serialized)
                {
                    \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
                }

                Method (OFF, 1, Serialized)
                {
                    \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                        )
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }
            }

            If ((PCHA != Zero))
            {
                PowerResource (PPIN, 0x00, 0x0000)
                {
                    Method (STA, 1, Serialized)
                    {
                        If ((\_SB.PGPI.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ON, 1, Serialized)
                    {
                        \_SB.PGPI.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
                    }

                    Method (OFF, 1, Serialized)
                    {
                        \_SB.PGPI.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                            )
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }
                }
            }
        }

        Scope (_SB.PC00.RP01)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((P1WG != Zero) && (P1RN == One)))
                {
                    Return (GPRW (GGPE (P1WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC0, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP02)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0xC0, 0x04))
            }
        }

        Scope (_SB.PC00.RP03)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((WLWK != Zero) && (WLRP == 0x03)))
                {
                    Return (GPRW (GGPE (WLWK), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC0, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP04)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0xC0, 0x04))
            }
        }

        Scope (_SB.PC00.RP05)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((P2WG != Zero) && (P2RN == 0x05)))
                {
                    Return (GPRW (GGPE (P2WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC1, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP06)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((P2WG != Zero) && (P2RN == 0x06)))
                {
                    Return (GPRW (GGPE (P2WG), 0x04))
                }
                ElseIf (((P3WG != Zero) && (P3RN == 0x06)))
                {
                    Return (GPRW (GGPE (P3WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC1, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP07)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((WWKP != Zero) && (WWRP == 0x07)))
                {
                    Return (GPRW (GGPE (WWKP), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC1, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP08)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((WLWK != Zero) && (WLRP == 0x08)))
                {
                    Return (GPRW (GGPE (WLWK), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC1, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP09)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((WWKP != Zero) && (WWRP == 0x09)))
                {
                    Return (GPRW (GGPE (WWKP), 0x04))
                }
                ElseIf (((P3WG != Zero) && (P3RN == 0x09)))
                {
                    Return (GPRW (GGPE (P3WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC2, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP10)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((P2WG != Zero) && (P2RN == 0x0A)))
                {
                    Return (GPRW (GGPE (P2WG), 0x04))
                }
                ElseIf (((P5WG != Zero) && (P5RN == 0x0D)))
                {
                    Return (GPRW (GGPE (P5WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC7, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP11)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((P3WG != Zero) && (P3RN == 0x0B)))
                {
                    Return (GPRW (GGPE (P3WG), 0x04))
                }
                ElseIf (((P6WG != Zero) && (P6RN == 0x11)))
                {
                    Return (GPRW (GGPE (P6WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC7, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP12)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (((P3WG != Zero) && (P3RN == 0x15)))
                {
                    Return (GPRW (GGPE (P3WG), 0x04))
                }
                ElseIf (((P4WG != Zero) && (P4RN == 0x15)))
                {
                    Return (GPRW (GGPE (P4WG), 0x04))
                }
                ElseIf (((P4WG != Zero) && (P4RN == 0x0C)))
                {
                    Return (GPRW (GGPE (P4WG), 0x04))
                }
                ElseIf (((P7WG != Zero) && (P7RN == 0x15)))
                {
                    Return (GPRW (GGPE (P7WG), 0x04))
                }
                Else
                {
                    Return (GPRW (0xC7, 0x04))
                }
            }
        }

        Name (_S0, Package (0x04)  // _S0_: S0 System State
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        If (SS1)
        {
            Name (_S1, Package (0x04)  // _S1_: S1 System State
            {
                One, 
                Zero, 
                Zero, 
                Zero
            })
        }

        If (SS3)
        {
            Name (_S3, Package (0x04)  // _S3_: S3 System State
            {
                0x05, 
                Zero, 
                Zero, 
                Zero
            })
        }

        If (SS4)
        {
            Name (_S4, Package (0x04)  // _S4_: S4 System State
            {
                0x06, 
                Zero, 
                Zero, 
                Zero
            })
        }

        Name (_S5, Package (0x04)  // _S5_: S5 System State
        {
            0x07, 
            Zero, 
            Zero, 
            Zero
        })
        Method (PTS, 1, NotSerialized)
        {
            If (Arg0){}
        }

        Method (WAK, 1, NotSerialized)
        {
        }
    }

    Method (UDBG, 7, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        Switch ((ToInteger (DBGU) & 0x0F))
        {
            Case (One)
            {
                Local0 = UC00 /* \UC00 */
            }
            Case (0x02)
            {
                Local0 = UC01 /* \UC01 */
            }
            Case (0x03)
            {
                Local0 = UC02 /* \UC02 */
            }
            Case (0x04)
            {
                Local0 = UC03 /* \UC03 */
            }
            Default
            {
                Return (Zero)
            }

        }

        OperationRegion (PCCB, SystemMemory, Local0, 0x40)
        Field (PCCB, AnyAcc, Lock, Preserve)
        {
            Offset (0x10), 
            BAR0,   64
        }

        Local1 = (BAR0 & 0xFFFFFFFFFFFFFFF0)
        OperationRegion (PURT, SystemMemory, Local1, 0x20)
        Field (PURT, ByteAcc, Lock, Preserve)
        {
            TXBF,   8, 
            DLM,    8, 
            FCR,    8, 
            LCR,    8, 
            Offset (0x1F), 
                ,   1, 
            TFNF,   1, 
            Offset (0x20)
        }

        LCR = 0x83
        TXBF = One
        DLM = Zero
        FCR = 0xE1
        LCR = 0x03
        DLM = Zero
        Local0 = SizeOf (Arg0)
        Local1 = Zero
        ToBuffer (Arg0, Local2)
        While ((Local1 < Local0))
        {
            If (TFNF)
            {
                Local3 = DerefOf (Local2 [Local1])
                Local1++
                If ((Local3 == 0x25))
                {
                    Local3 = DerefOf (Local2 [Local1])
                    Local1++
                    Switch (ToInteger (Local3))
                    {
                        Case (0x30)
                        {
                            Local4 = Arg1
                        }
                        Case (0x31)
                        {
                            Local4 = Arg2
                        }
                        Case (0x32)
                        {
                            Local4 = Arg3
                        }
                        Case (0x33)
                        {
                            Local4 = Arg4
                        }
                        Case (0x34)
                        {
                            Local4 = Arg5
                        }
                        Case (0x35)
                        {
                            Local4 = Arg6
                        }
                        Default
                        {
                            Local4 = Zero
                        }

                    }

                    Local3 = DerefOf (Local2 [Local1])
                    If ((Local3 == 0x58))
                    {
                        ToHexString (Local4, Local3)
                        Local1++
                    }
                    Else
                    {
                        ToDecimalString (Local4, Local3)
                    }

                    Local4 = SizeOf (Local3)
                    Local5 = Zero
                    ToBuffer (Local3, Local3)
                    While ((Local5 < Local4))
                    {
                        If (TFNF)
                        {
                            TXBF = DerefOf (Local3 [Local5])
                            Local5++
                        }
                    }
                }
                Else
                {
                    TXBF = Local3
                }
            }
        }
    }

    Method (UDB0, 1, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, One, 0x02, 0x03, 0x04, 0x05, 0x06)
    }

    Method (UDB1, 2, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, Arg1, 0x02, 0x03, 0x04, 0x05, 0x06)
    }

    Method (UDB2, 3, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, Arg1, Arg2, 0x03, 0x04, 0x05, 0x06)
    }

    Method (UDB3, 4, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, Arg1, Arg2, Arg3, 0x04, 0x05, 0x06)
    }

    Method (UDB4, 5, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, Arg1, Arg2, Arg3, Arg4, 0x05, 0x06)
    }

    Method (UDB5, 6, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, 0x06)
    }

    Method (UDB6, 7, Serialized)
    {
        If (((DBGU & 0x80) != Zero))
        {
            Return (Zero)
        }

        UDBG (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)
    }

    Scope (_SB)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                ULID ()
                Return (LIDS) /* \LIDS */
            }

            Method (ULID, 0, NotSerialized)
            {
                If ((GGIV (0x0014108E) == One))
                {
                    LIDS = Zero
                }
                Else
                {
                    LIDS = One
                }

                Local0 = (^^PC00.GFX0.CLID & 0x0F)
                If (((LIDS == One) && (Local0 == 0x03)))
                {
                    Return (Zero)
                }

                If (((LIDS == Zero) && (Local0 == Zero)))
                {
                    Return (Zero)
                }

                If (IGDS)
                {
                    If ((LIDS == Zero))
                    {
                        ^^PC00.GFX0.CLID = 0x80000000
                    }

                    If ((LIDS == One))
                    {
                        ^^PC00.GFX0.CLID = 0x80000003
                    }
                }

                Notify (LID0, 0x80) // Status Change
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L2E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.GGIV (0x0014108E) == Zero))
            {
                \_SB.SGII (0x0014108E, Zero)
                Local0 = One
            }
            Else
            {
                \_SB.SGII (0x0014108E, One)
                Local0 = Zero
            }

            If ((LIDS != Local0))
            {
                LIDS = Local0
                If (IGDS)
                {
                    If (\_SB.PC00.GFX0.GLID (LIDS))
                    {
                        \_SB.PC00.GFX0.CLID |= 0x80000000 /* External reference */
                    }
                }

                Notify (\_SB.LID0, 0x80) // Status Change
            }
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("f8b10b85-0562-4f93-940f-a0d27cb5d9c9") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("f8b10b85-0562-4f93-940f-a0d27cb5d9cb") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("f8b10b85-0562-4f93-940f-a0d27cb5d9ca") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("f8b10b85-0562-4f93-940f-a0d27cb5d9cc") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                Return ((ADPM & 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10){})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x32, 
            0x32, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x63, 
            0x64
        })
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((HGDT & 0x0F) != 0x04))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0xFFFFFFFB
                                STS0 |= 0x10
                            }
                        }
                    }

                    If ((U4FN (STS0, CAP0) == 0xFF))
                    {
                        CAP0 &= 0xFFFBFFFF
                        STS0 |= 0x10
                    }

                    If (CondRefOf (OBCL))
                    {
                        Arg3 = OBCL (OSCO, Arg2, Arg3)
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            ElseIf ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((OSCM == One))
                {
                    CreateDWordField (Arg3, 0x08, CTRL)
                    If ((Arg1 == One))
                    {
                        If ((CTRL & 0xFFFFFFF0))
                        {
                            CTRL &= 0x0F
                            STS0 |= 0x10
                        }

                        If ((EPTU == Zero))
                        {
                            CTRL &= 0x0B
                            STS0 |= 0x10
                        }
                    }
                    Else
                    {
                        STS0 &= 0xFFFFFF00
                        STS0 |= 0x0A
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x06
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        If (CondRefOf (\_SB.SRTC))
        {
            Notify (\_SB.SRTC, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Local0 = \_SB.DOCM ()
        }

        Return (IWAK (Arg0))
    }

    Scope (_SB.PC00.THC0)
    {
        Name (WKEN, Zero)
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((GGOV (0x00140486) == Zero))
            {
                SGOV (0x00140486, One)
                Sleep (0x64)
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((WKEN == Zero))
            {
                SGOV (0x00140486, Zero)
                Sleep (0x64)
            }
        }
    }

    Scope (_SB.PC00.HEC3)
    {
        OperationRegion (HC3R, PCI_Config, Zero, 0x0100)
        Field (HC3R, WordAcc, NoLock, Preserve)
        {
            VDID,   32
        }
    }

    Scope (_SB.PC00.I3C0)
    {
        OperationRegion (HC3R, PCI_Config, Zero, 0x0100)
        Field (HC3R, WordAcc, NoLock, Preserve)
        {
            VDID,   32
        }
    }

    Scope (_SB.PC00.VPU0)
    {
        OperationRegion (VPUR, PCI_Config, Zero, 0x0100)
        Field (VPUR, ByteAcc, NoLock, Preserve)
        {
            VDID,   32
        }
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        Name (PERN, "RP01")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP02.PXSX)
    {
        Name (PERN, "RP02")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP03.PXSX)
    {
        Name (PERN, "RP03")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP04.PXSX)
    {
        Name (PERN, "RP04")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        Name (PERN, "RP05")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP06.PXSX)
    {
        Name (PERN, "RP06")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP07.PXSX)
    {
        Name (PERN, "RP07")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP08.PXSX)
    {
        Name (PERN, "RP08")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        Name (PERN, "RP09")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP10.PXSX)
    {
        Name (PERN, "RP10")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP11.PXSX)
    {
        Name (PERN, "RP11")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP12.PXSX)
    {
        Name (PERN, "RP12")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (DEVC, Zero)
            Name (DEVS, Zero)
            Name (IPDI, Zero)
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PCP0, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    Zero
                }
            })
            Name (PCP1, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0xFF, 
                    Zero, 
                    0x81
                }
            })
            Name (PCP2, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    0x02
                }
            })
            Name (PCP3, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    0x03
                }
            })
            Name (DEVY, Package (0x79)
            {
                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }
            })
            Method (UPDE, 4, NotSerialized)
            {
                If ((DEVC < DEVS))
                {
                    If ((SizeOf (Arg1) != Zero))
                    {
                        Local0 = Concatenate (Concatenate (Arg0, "."), Arg1)
                    }
                    Else
                    {
                        Local0 = Arg0
                    }

                    DerefOf (DEVY [DEVC]) [Zero] = Local0
                    If ((Arg0 == "Reserved"))
                    {
                        DEVC++
                        Return (Zero)
                    }

                    DerefOf (DEVY [DEVC]) [One] = Arg2
                    If ((Arg3 == Zero))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP0 /* \_SB_.PEPD.PCP0 */
                    }
                    ElseIf ((Arg3 == One))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP1 /* \_SB_.PEPD.PCP1 */
                    }
                    ElseIf ((Arg3 == 0x02))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP2 /* \_SB_.PEPD.PCP2 */
                    }
                    ElseIf ((Arg3 == 0x03))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP3 /* \_SB_.PEPD.PCP3 */
                    }
                    Else
                    {
                        UDB0 ("PEP Error !!! Unknown D- state constraint is passed..\n")
                    }

                    UDB0 (Concatenate ("DEVY entry index : ", ToDecimalString (DEVC)))
                    UDB0 (Concatenate (" Device Descriptor : ", DerefOf (DerefOf (DEVY [DEVC]) [Zero])
                        ))
                    UDB0 (Concatenate (" Constraint (Enable/Disable) : ", DerefOf (DerefOf (DEVY [DEVC]) [One])
                        ))
                    UDB0 (Concatenate (" Constraint applied (D0/D0F1/D2/D3) : ", Arg3))
                    UDB0 ("\n")
                    DEVC++
                }
                Else
                {
                    UDB0 (Concatenate ("PEP UPDE Error!!!! DEVY size is excedded, DEVY size = ", ToDecimalString (DEVS)))
                    UDB0 ("\n")
                }
            }

            Method (UPPR, 4, Serialized)
            {
                If (CondRefOf (Arg0))
                {
                    Local0 = GRPC (Arg1)
                    If (((Arg1 == One) && (Local0 == One)))
                    {
                        UPDE (Arg2, Concatenate (Arg3, ".PXSX"), One, Local0)
                    }
                    ElseIf ((Local0 != Zero))
                    {
                        UPDE (Arg2, Arg3, One, Local0)
                    }
                    Else
                    {
                        UPDE (Arg2, Arg3, Zero, Local0)
                    }
                }
            }

            Method (GUCP, 2, Serialized)
            {
                If (((PEPC & Arg0) == Arg0))
                {
                    If (((PEPC & (Arg1 | Arg0)) == (Arg1 | Arg0
                        )))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GRPC, 1, Serialized)
            {
                If ((Arg0 == One))
                {
                    Return (GUCP (0x40000000, 0x80000000))
                }

                If ((Arg0 == 0x02))
                {
                    Return (GUCP (0x0000000100000000, 0x0000000200000000))
                }

                If ((Arg0 == 0x03))
                {
                    Return (GUCP (0x0000000400000000, 0x0000000800000000))
                }

                If ((Arg0 == 0x04))
                {
                    Return (GUCP (0x0000001000000000, 0x0000002000000000))
                }

                If ((Arg0 == 0x05))
                {
                    Return (GUCP (0x00400000, 0x00400000))
                }

                If ((Arg0 == 0x06))
                {
                    If ((WRTO == 0x03))
                    {
                        Return (0x03)
                    }
                    ElseIf ((WRTO == 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == Zero))
                {
                    Return (GUCP (0x0000004000000000, 0x0000008000000000))
                }

                Return (Zero)
            }

            Method (UPDV, 0, Serialized)
            {
                DEVS = SizeOf (DEVY)
                UDB0 (Concatenate ("PEP DEVY size = ", ToDecimalString (DEVS)))
                UDB0 ("\n")
                Local0 = Zero
                While ((Local0 < TCNT))
                {
                    If ((Local0 < 0x0A))
                    {
                        Concatenate ("PR0", Local0, Local1)
                    }
                    Else
                    {
                        Concatenate ("PR", ToDecimalString (Local0), Local1)
                    }

                    UPDE ("\\_SB", Local1, One, Zero)
                    Local0 += One
                }

                UPDE ("\\_SB.PC00", "GFX0", One, 0x03)
                If ((^^PC00.HDAS.VDID == 0xFFFFFFFF))
                {
                    UPDE ("\\_SB.PC00", "HDAS", Zero, One)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "HDAS", One, One)
                }

                If (((UM00 != One) && (UM01 != One)))
                {
                    UPDE ("\\_SB.PC00", "UA00", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "UA00", One, 0x03)
                }

                If ((UM01 != One))
                {
                    UPDE ("\\_SB.PC00", "UA01", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "UA01", One, 0x03)
                }

                If ((UM02 != One))
                {
                    UPDE ("\\_SB.PC00", "UA02", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "UA01", One, 0x03)
                }

                If ((((((IM00 == Zero) && (IM01 == Zero)) && (
                    IM02 == Zero)) && (IM03 == Zero)) && (^^PC00.I3C0.VDID == 0xFFFFFFFF)))
                {
                    UPDE ("\\_SB.PC00", "I2C0", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "I2C0", One, 0x03)
                }

                If ((IM01 == Zero))
                {
                    UPDE ("\\_SB.PC00", "I2C1", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "I2C1", One, 0x03)
                }

                If ((IM02 == Zero))
                {
                    UPDE ("\\_SB.PC00", "I2C2", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "I2C2", One, 0x03)
                }

                If ((IM03 == Zero))
                {
                    UPDE ("\\_SB.PC00", "I2C3", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "I2C3", One, 0x03)
                }

                If ((((IM04 == Zero) && (IM05 == Zero)) && (UM02 != 
                    One)))
                {
                    UPDE ("\\_SB.PC00", "I2C4", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "I2C4", One, 0x03)
                }

                If ((IM05 == Zero))
                {
                    UPDE ("\\_SB.PC00", "I2C5", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "I2C5", One, 0x03)
                }

                If ((SM00 == Zero))
                {
                    UPDE ("\\_SB.PC00", "SPI0", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "SPI0", One, 0x03)
                }

                If ((SM01 == Zero))
                {
                    UPDE ("\\_SB.PC00", "SPI1", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "SPI1", One, 0x03)
                }

                If ((SM02 == Zero))
                {
                    UPDE ("\\_SB.PC00", "SPI2", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "SPI2", One, 0x03)
                }

                If ((^^PC00.XHCI.DVID == 0xFFFF))
                {
                    UPDE ("\\_SB.PC00", "XHCI", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "XHCI", One, 0x03)
                }

                If ((IPTP == Zero))
                {
                    UPDE ("\\_SB.PC00", "IPU0", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "IPU0", One, 0x03)
                }

                UPDE ("\\_SB.PC00", "HECI", One, One)
                If ((GBES == Zero))
                {
                    UPDE ("\\_SB.PC00", "GLAN", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "GLAN", One, 0x03)
                }

                If (((^^PC00.THC0.VDID == 0xFFFFFFFF) && (^^PC00.THC1.VDID == 0xFFFFFFFF)))
                {
                    UPDE ("\\_SB.PC00", "THC0", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "THC0", One, 0x03)
                }

                If ((^^PC00.THC1.VDID == 0xFFFFFFFF))
                {
                    UPDE ("\\_SB.PC00", "THC1", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "THC1", One, 0x03)
                }

                If ((WRTO == One))
                {
                    UPDE ("USB\\VID_8087&PID_0AC9&MI*", "", One, WRTO)
                }
                Else
                {
                    UPDE ("USB\\VID_8087&PID_0AC9&MI*", "", Zero, 0x02)
                }

                UPDE ("\\_SB.PC00", "GNA0", One, 0x03)
                If (CondRefOf (\_SB.PC00.HEC3))
                {
                    If ((^^PC00.HEC3.VDID != 0xFFFFFFFF))
                    {
                        UPDE ("\\_SB.PC00", "HEC3", One, 0x03)
                    }
                    Else
                    {
                        UPDE ("\\_SB.PC00", "HEC3", Zero, 0x03)
                    }
                }

                If ((UF0E == Zero))
                {
                    UPDE ("\\_SB.PC00", "PUF0", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "PUF0", One, 0x03)
                }

                If ((^^PC00.VPU0.VDID == 0xFFFFFFFF))
                {
                    UPDE ("\\_SB.PC00", "VPU0", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "VPU0", One, 0x03)
                }

                If (One)
                {
                    If ((THCE == One))
                    {
                        UPDE ("\\_SB.PC00", "TXHC", One, 0x03)
                    }
                    Else
                    {
                        UPDE ("\\_SB.PC00", "TXHC", Zero, 0x03)
                    }

                    If ((TDCE == One))
                    {
                        UPDE ("\\_SB.PC00", "TXDC", One, 0x03)
                    }
                    Else
                    {
                        UPDE ("\\_SB.PC00", "TXDC", Zero, 0x03)
                    }

                    UPDE ("\\_SB.PC00", "TRP0", TRE0, 0x03)
                    UPDE ("\\_SB.PC00", "TRP1", TRE1, 0x03)
                    UPDE ("\\_SB.PC00", "TRP2", TRE2, 0x03)
                    UPDE ("\\_SB.PC00", "TRP3", TRE3, 0x03)
                    UPDE ("\\_SB.PC00", "TDM0", DME0, 0x03)
                    UPDE ("\\_SB.PC00", "TDM1", DME1, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "TXHC", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TXDC", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP0", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP1", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP2", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP3", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TDM0", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TDM1", Zero, 0x03)
                }

                UPDE ("\\_SB.PC01", "TRP0", Zero, Zero)
                UPDE ("\\_SB.PC01", "TRP1", Zero, Zero)
                UPDE ("\\_SB.PC01", "TRP2", Zero, Zero)
                UPDE ("\\_SB.PC01", "TRP3", Zero, Zero)
                UPPR (^^PC00.RP01, ^^PC00.RP01.PXSX.GRPT (), "\\_SB.PC00", "RP01")
                UPPR (^^PC00.RP02, ^^PC00.RP02.PXSX.GRPT (), "\\_SB.PC00", "RP02")
                UPPR (^^PC00.RP03, ^^PC00.RP03.PXSX.GRPT (), "\\_SB.PC00", "RP03")
                UPPR (^^PC00.RP04, ^^PC00.RP04.PXSX.GRPT (), "\\_SB.PC00", "RP04")
                UPPR (^^PC00.RP05, ^^PC00.RP05.PXSX.GRPT (), "\\_SB.PC00", "RP05")
                UPPR (^^PC00.RP06, ^^PC00.RP06.PXSX.GRPT (), "\\_SB.PC00", "RP06")
                UPPR (^^PC00.RP07, ^^PC00.RP07.PXSX.GRPT (), "\\_SB.PC00", "RP07")
                UPPR (^^PC00.RP08, ^^PC00.RP08.PXSX.GRPT (), "\\_SB.PC00", "RP08")
                UPPR (^^PC00.RP09, ^^PC00.RP09.PXSX.GRPT (), "\\_SB.PC00", "RP09")
                UPPR (^^PC00.RP10, ^^PC00.RP10.PXSX.GRPT (), "\\_SB.PC00", "RP10")
                UPPR (^^PC00.RP11, ^^PC00.RP11.PXSX.GRPT (), "\\_SB.PC00", "RP11")
                UPPR (^^PC00.RP12, ^^PC00.RP12.PXSX.GRPT (), "\\_SB.PC00", "RP12")
                If (CondRefOf (\_SB.PC00.CNVW.VDID))
                {
                    If ((^^PC00.CNVW.VDID != 0xFFFFFFFF))
                    {
                        UPDE ("\\_SB.PC00", "CNVW", One, 0x03)
                    }
                }

                UPDE ("\\_SB", "SSH", One, 0x03)
                Local0 = DEVC /* \_SB_.PEPD.DEVC */
                While ((Local0 < DEVS))
                {
                    UPDE ("Reserved", ToDecimalString (Local0), Zero, Zero)
                    Local0 += One
                }

                DEVC = Zero
            }

            Name (BCCD, Package (0x00){})
            Name (DSDV, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "intel-cec-pson-switching-enabled-in-s0", 
                        Zero
                    }
                }
            })
            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                Local0 = Zero
                While ((Local0 < SizeOf (DSDV)))
                {
                    If ((DerefOf (DSDV [Local0]) != ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */))
                    {
                        Continue
                    }

                    Local1 = DerefOf (DSDV [(Local0 + One)])
                    Local2 = Zero
                    While ((Local2 < SizeOf (Local1)))
                    {
                        Local3 = DerefOf (Local1 [Local2])
                        If ((("intel-cec-pson-switching-enabled-in-s0" == DerefOf (Local3 [Zero])) && PSON))
                        {
                            DerefOf (DerefOf (DSDV [(Local0 + One)]) [
                                Local2]) [One] = One
                        }

                        Local2++
                    }

                    Local0 += 0x02
                }

                Return (DSDV) /* \_SB_.PEPD.DSDV */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                PEPC = 0x40000000
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                UDB0 (Concatenate ("PEPC = ", ToHexString (PEPC)))
                UDB0 ("\n")
                If ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x03                                       // ..
                        })
                    }

                    If ((CondRefOf (\_SB.SAPD) && (Arg2 > One)))
                    {
                        Notify (SAPD, (Arg2 + 0xC0))
                    }
                }

                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((IPDI == Zero))
                        {
                            UPDV ()
                            IPDI = One
                        }
                        Else
                        {
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.IMNG))
                        {
                            ^^PC00.IMNG (Arg2)
                        }

                        D8XH (Zero, 0xC5)
                        D8XH (One, Zero)
                    }

                    If ((Arg2 == 0x04))
                    {
                        If (CondRefOf (\_SB.PC00.IMNG))
                        {
                            ^^PC00.IMNG (Arg2)
                        }

                        D8XH (Zero, 0xC5)
                        D8XH (One, 0xAB)
                    }

                    Local0 = Zero
                    If ((Arg2 == 0x05))
                    {
                        GUAM (One)
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            If (CondRefOf (\_SB.PC00.TDM0))
                            {
                                If ((^^PC00.TDM0._STA == 0x0F))
                                {
                                    If ((^^PC00.TDM0.SCME == Zero))
                                    {
                                        Local0 = One
                                    }
                                }
                            }

                            If (CondRefOf (\_SB.PC00.TDM1))
                            {
                                If ((^^PC00.TDM1._STA == 0x0F))
                                {
                                    If ((^^PC00.TDM1.SCME == Zero))
                                    {
                                        Local0 = One
                                    }
                                }
                            }

                            If ((Local0 == One))
                            {
                                ^^PC00.DPOF = One
                            }

                            If (CondRefOf (\GPRV))
                            {
                                GPRV (0x03, Zero)
                            }
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        GUAM (Zero)
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            ^^PC00.DPOF = Zero
                        }

                        If (CondRefOf (\GPRV))
                        {
                            GPRV (0x03, One)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.XHCI.RHUB.HS03)
    {
        Method (PTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x04))
            {
                If (((GGOV (0x00140096) == One) && (GGOV (0x00140897) == One)))
                {
                    SGOV (0x00140897, Zero)
                }
            }
        }

        Method (WAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x04))
            {
                If (((GGOV (0x00140096) == One) && (GGOV (0x00140897) == Zero)))
                {
                    SGOV (0x00140897, One)
                }
            }
        }
    }
}

